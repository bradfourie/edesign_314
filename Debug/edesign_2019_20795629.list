
edesign_2019_20795629.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000099b8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000378  08009b48  08009b48  00019b48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009ec0  08009ec0  00019ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009ec8  08009ec8  00019ec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009ecc  08009ecc  00019ecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000680  20000000  08009ed0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020680  2**0
                  CONTENTS
  8 .bss          000005d8  20000680  20000680  00020680  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000c58  20000c58  00020680  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020680  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002a06d  00000000  00000000  000206b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00004097  00000000  00000000  0004a71d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000fecb  00000000  00000000  0004e7b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001300  00000000  00000000  0005e680  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000017d8  00000000  00000000  0005f980  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000a72f  00000000  00000000  00061158  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000073f3  00000000  00000000  0006b887  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00072c7a  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000048dc  00000000  00000000  00072cf8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000680 	.word	0x20000680
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009b30 	.word	0x08009b30

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000684 	.word	0x20000684
 80001cc:	08009b30 	.word	0x08009b30

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpun>:
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_dcmpun+0x10>
 8000b2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b32:	d10a      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x20>
 8000b3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0001 	mov.w	r0, #1
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_d2iz>:
 8000b50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b58:	d215      	bcs.n	8000b86 <__aeabi_d2iz+0x36>
 8000b5a:	d511      	bpl.n	8000b80 <__aeabi_d2iz+0x30>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d912      	bls.n	8000b8c <__aeabi_d2iz+0x3c>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	4240      	negne	r0, r0
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d105      	bne.n	8000b98 <__aeabi_d2iz+0x48>
 8000b8c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	bf08      	it	eq
 8000b92:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_d2uiz>:
 8000ba0:	004a      	lsls	r2, r1, #1
 8000ba2:	d211      	bcs.n	8000bc8 <__aeabi_d2uiz+0x28>
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba8:	d211      	bcs.n	8000bce <__aeabi_d2uiz+0x2e>
 8000baa:	d50d      	bpl.n	8000bc8 <__aeabi_d2uiz+0x28>
 8000bac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d40e      	bmi.n	8000bd4 <__aeabi_d2uiz+0x34>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d102      	bne.n	8000bda <__aeabi_d2uiz+0x3a>
 8000bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd8:	4770      	bx	lr
 8000bda:	f04f 0000 	mov.w	r0, #0
 8000bde:	4770      	bx	lr

08000be0 <__aeabi_d2f>:
 8000be0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000be4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be8:	bf24      	itt	cs
 8000bea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bf2:	d90d      	bls.n	8000c10 <__aeabi_d2f+0x30>
 8000bf4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bfc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c00:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c04:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c08:	bf08      	it	eq
 8000c0a:	f020 0001 	biceq.w	r0, r0, #1
 8000c0e:	4770      	bx	lr
 8000c10:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c14:	d121      	bne.n	8000c5a <__aeabi_d2f+0x7a>
 8000c16:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c1a:	bfbc      	itt	lt
 8000c1c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c20:	4770      	bxlt	lr
 8000c22:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c26:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c2a:	f1c2 0218 	rsb	r2, r2, #24
 8000c2e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c32:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c36:	fa20 f002 	lsr.w	r0, r0, r2
 8000c3a:	bf18      	it	ne
 8000c3c:	f040 0001 	orrne.w	r0, r0, #1
 8000c40:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c44:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c48:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c4c:	ea40 000c 	orr.w	r0, r0, ip
 8000c50:	fa23 f302 	lsr.w	r3, r3, r2
 8000c54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c58:	e7cc      	b.n	8000bf4 <__aeabi_d2f+0x14>
 8000c5a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c5e:	d107      	bne.n	8000c70 <__aeabi_d2f+0x90>
 8000c60:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c64:	bf1e      	ittt	ne
 8000c66:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c6a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c6e:	4770      	bxne	lr
 8000c70:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c74:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c78:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop

08000c80 <__aeabi_uldivmod>:
 8000c80:	b953      	cbnz	r3, 8000c98 <__aeabi_uldivmod+0x18>
 8000c82:	b94a      	cbnz	r2, 8000c98 <__aeabi_uldivmod+0x18>
 8000c84:	2900      	cmp	r1, #0
 8000c86:	bf08      	it	eq
 8000c88:	2800      	cmpeq	r0, #0
 8000c8a:	bf1c      	itt	ne
 8000c8c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c90:	f04f 30ff 	movne.w	r0, #4294967295
 8000c94:	f000 b97a 	b.w	8000f8c <__aeabi_idiv0>
 8000c98:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c9c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca0:	f000 f806 	bl	8000cb0 <__udivmoddi4>
 8000ca4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cac:	b004      	add	sp, #16
 8000cae:	4770      	bx	lr

08000cb0 <__udivmoddi4>:
 8000cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cb4:	468c      	mov	ip, r1
 8000cb6:	460d      	mov	r5, r1
 8000cb8:	4604      	mov	r4, r0
 8000cba:	9e08      	ldr	r6, [sp, #32]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d151      	bne.n	8000d64 <__udivmoddi4+0xb4>
 8000cc0:	428a      	cmp	r2, r1
 8000cc2:	4617      	mov	r7, r2
 8000cc4:	d96d      	bls.n	8000da2 <__udivmoddi4+0xf2>
 8000cc6:	fab2 fe82 	clz	lr, r2
 8000cca:	f1be 0f00 	cmp.w	lr, #0
 8000cce:	d00b      	beq.n	8000ce8 <__udivmoddi4+0x38>
 8000cd0:	f1ce 0c20 	rsb	ip, lr, #32
 8000cd4:	fa01 f50e 	lsl.w	r5, r1, lr
 8000cd8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000cdc:	fa02 f70e 	lsl.w	r7, r2, lr
 8000ce0:	ea4c 0c05 	orr.w	ip, ip, r5
 8000ce4:	fa00 f40e 	lsl.w	r4, r0, lr
 8000ce8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000cec:	0c25      	lsrs	r5, r4, #16
 8000cee:	fbbc f8fa 	udiv	r8, ip, sl
 8000cf2:	fa1f f987 	uxth.w	r9, r7
 8000cf6:	fb0a cc18 	mls	ip, sl, r8, ip
 8000cfa:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000cfe:	fb08 f309 	mul.w	r3, r8, r9
 8000d02:	42ab      	cmp	r3, r5
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x6c>
 8000d06:	19ed      	adds	r5, r5, r7
 8000d08:	f108 32ff 	add.w	r2, r8, #4294967295
 8000d0c:	f080 8123 	bcs.w	8000f56 <__udivmoddi4+0x2a6>
 8000d10:	42ab      	cmp	r3, r5
 8000d12:	f240 8120 	bls.w	8000f56 <__udivmoddi4+0x2a6>
 8000d16:	f1a8 0802 	sub.w	r8, r8, #2
 8000d1a:	443d      	add	r5, r7
 8000d1c:	1aed      	subs	r5, r5, r3
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb5 f0fa 	udiv	r0, r5, sl
 8000d24:	fb0a 5510 	mls	r5, sl, r0, r5
 8000d28:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d2c:	fb00 f909 	mul.w	r9, r0, r9
 8000d30:	45a1      	cmp	r9, r4
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x98>
 8000d34:	19e4      	adds	r4, r4, r7
 8000d36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3a:	f080 810a 	bcs.w	8000f52 <__udivmoddi4+0x2a2>
 8000d3e:	45a1      	cmp	r9, r4
 8000d40:	f240 8107 	bls.w	8000f52 <__udivmoddi4+0x2a2>
 8000d44:	3802      	subs	r0, #2
 8000d46:	443c      	add	r4, r7
 8000d48:	eba4 0409 	sub.w	r4, r4, r9
 8000d4c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d50:	2100      	movs	r1, #0
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d061      	beq.n	8000e1a <__udivmoddi4+0x16a>
 8000d56:	fa24 f40e 	lsr.w	r4, r4, lr
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	6034      	str	r4, [r6, #0]
 8000d5e:	6073      	str	r3, [r6, #4]
 8000d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d64:	428b      	cmp	r3, r1
 8000d66:	d907      	bls.n	8000d78 <__udivmoddi4+0xc8>
 8000d68:	2e00      	cmp	r6, #0
 8000d6a:	d054      	beq.n	8000e16 <__udivmoddi4+0x166>
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000d72:	4608      	mov	r0, r1
 8000d74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d78:	fab3 f183 	clz	r1, r3
 8000d7c:	2900      	cmp	r1, #0
 8000d7e:	f040 808e 	bne.w	8000e9e <__udivmoddi4+0x1ee>
 8000d82:	42ab      	cmp	r3, r5
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xdc>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80fa 	bhi.w	8000f80 <__udivmoddi4+0x2d0>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb65 0503 	sbc.w	r5, r5, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	46ac      	mov	ip, r5
 8000d96:	2e00      	cmp	r6, #0
 8000d98:	d03f      	beq.n	8000e1a <__udivmoddi4+0x16a>
 8000d9a:	e886 1010 	stmia.w	r6, {r4, ip}
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	b912      	cbnz	r2, 8000daa <__udivmoddi4+0xfa>
 8000da4:	2701      	movs	r7, #1
 8000da6:	fbb7 f7f2 	udiv	r7, r7, r2
 8000daa:	fab7 fe87 	clz	lr, r7
 8000dae:	f1be 0f00 	cmp.w	lr, #0
 8000db2:	d134      	bne.n	8000e1e <__udivmoddi4+0x16e>
 8000db4:	1beb      	subs	r3, r5, r7
 8000db6:	0c3a      	lsrs	r2, r7, #16
 8000db8:	fa1f fc87 	uxth.w	ip, r7
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	fbb3 f8f2 	udiv	r8, r3, r2
 8000dc2:	0c25      	lsrs	r5, r4, #16
 8000dc4:	fb02 3318 	mls	r3, r2, r8, r3
 8000dc8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000dcc:	fb0c f308 	mul.w	r3, ip, r8
 8000dd0:	42ab      	cmp	r3, r5
 8000dd2:	d907      	bls.n	8000de4 <__udivmoddi4+0x134>
 8000dd4:	19ed      	adds	r5, r5, r7
 8000dd6:	f108 30ff 	add.w	r0, r8, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x132>
 8000ddc:	42ab      	cmp	r3, r5
 8000dde:	f200 80d1 	bhi.w	8000f84 <__udivmoddi4+0x2d4>
 8000de2:	4680      	mov	r8, r0
 8000de4:	1aed      	subs	r5, r5, r3
 8000de6:	b2a3      	uxth	r3, r4
 8000de8:	fbb5 f0f2 	udiv	r0, r5, r2
 8000dec:	fb02 5510 	mls	r5, r2, r0, r5
 8000df0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000df4:	fb0c fc00 	mul.w	ip, ip, r0
 8000df8:	45a4      	cmp	ip, r4
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x15c>
 8000dfc:	19e4      	adds	r4, r4, r7
 8000dfe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x15a>
 8000e04:	45a4      	cmp	ip, r4
 8000e06:	f200 80b8 	bhi.w	8000f7a <__udivmoddi4+0x2ca>
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	eba4 040c 	sub.w	r4, r4, ip
 8000e10:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e14:	e79d      	b.n	8000d52 <__udivmoddi4+0xa2>
 8000e16:	4631      	mov	r1, r6
 8000e18:	4630      	mov	r0, r6
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	f1ce 0420 	rsb	r4, lr, #32
 8000e22:	fa05 f30e 	lsl.w	r3, r5, lr
 8000e26:	fa07 f70e 	lsl.w	r7, r7, lr
 8000e2a:	fa20 f804 	lsr.w	r8, r0, r4
 8000e2e:	0c3a      	lsrs	r2, r7, #16
 8000e30:	fa25 f404 	lsr.w	r4, r5, r4
 8000e34:	ea48 0803 	orr.w	r8, r8, r3
 8000e38:	fbb4 f1f2 	udiv	r1, r4, r2
 8000e3c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000e40:	fb02 4411 	mls	r4, r2, r1, r4
 8000e44:	fa1f fc87 	uxth.w	ip, r7
 8000e48:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000e4c:	fb01 f30c 	mul.w	r3, r1, ip
 8000e50:	42ab      	cmp	r3, r5
 8000e52:	fa00 f40e 	lsl.w	r4, r0, lr
 8000e56:	d909      	bls.n	8000e6c <__udivmoddi4+0x1bc>
 8000e58:	19ed      	adds	r5, r5, r7
 8000e5a:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e5e:	f080 808a 	bcs.w	8000f76 <__udivmoddi4+0x2c6>
 8000e62:	42ab      	cmp	r3, r5
 8000e64:	f240 8087 	bls.w	8000f76 <__udivmoddi4+0x2c6>
 8000e68:	3902      	subs	r1, #2
 8000e6a:	443d      	add	r5, r7
 8000e6c:	1aeb      	subs	r3, r5, r3
 8000e6e:	fa1f f588 	uxth.w	r5, r8
 8000e72:	fbb3 f0f2 	udiv	r0, r3, r2
 8000e76:	fb02 3310 	mls	r3, r2, r0, r3
 8000e7a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e7e:	fb00 f30c 	mul.w	r3, r0, ip
 8000e82:	42ab      	cmp	r3, r5
 8000e84:	d907      	bls.n	8000e96 <__udivmoddi4+0x1e6>
 8000e86:	19ed      	adds	r5, r5, r7
 8000e88:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e8c:	d26f      	bcs.n	8000f6e <__udivmoddi4+0x2be>
 8000e8e:	42ab      	cmp	r3, r5
 8000e90:	d96d      	bls.n	8000f6e <__udivmoddi4+0x2be>
 8000e92:	3802      	subs	r0, #2
 8000e94:	443d      	add	r5, r7
 8000e96:	1aeb      	subs	r3, r5, r3
 8000e98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e9c:	e78f      	b.n	8000dbe <__udivmoddi4+0x10e>
 8000e9e:	f1c1 0720 	rsb	r7, r1, #32
 8000ea2:	fa22 f807 	lsr.w	r8, r2, r7
 8000ea6:	408b      	lsls	r3, r1
 8000ea8:	fa05 f401 	lsl.w	r4, r5, r1
 8000eac:	ea48 0303 	orr.w	r3, r8, r3
 8000eb0:	fa20 fe07 	lsr.w	lr, r0, r7
 8000eb4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	ea4e 0e04 	orr.w	lr, lr, r4
 8000ebe:	fbb5 f9fc 	udiv	r9, r5, ip
 8000ec2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000ec6:	fb0c 5519 	mls	r5, ip, r9, r5
 8000eca:	fa1f f883 	uxth.w	r8, r3
 8000ece:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000ed2:	fb09 f408 	mul.w	r4, r9, r8
 8000ed6:	42ac      	cmp	r4, r5
 8000ed8:	fa02 f201 	lsl.w	r2, r2, r1
 8000edc:	fa00 fa01 	lsl.w	sl, r0, r1
 8000ee0:	d908      	bls.n	8000ef4 <__udivmoddi4+0x244>
 8000ee2:	18ed      	adds	r5, r5, r3
 8000ee4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ee8:	d243      	bcs.n	8000f72 <__udivmoddi4+0x2c2>
 8000eea:	42ac      	cmp	r4, r5
 8000eec:	d941      	bls.n	8000f72 <__udivmoddi4+0x2c2>
 8000eee:	f1a9 0902 	sub.w	r9, r9, #2
 8000ef2:	441d      	add	r5, r3
 8000ef4:	1b2d      	subs	r5, r5, r4
 8000ef6:	fa1f fe8e 	uxth.w	lr, lr
 8000efa:	fbb5 f0fc 	udiv	r0, r5, ip
 8000efe:	fb0c 5510 	mls	r5, ip, r0, r5
 8000f02:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000f06:	fb00 f808 	mul.w	r8, r0, r8
 8000f0a:	45a0      	cmp	r8, r4
 8000f0c:	d907      	bls.n	8000f1e <__udivmoddi4+0x26e>
 8000f0e:	18e4      	adds	r4, r4, r3
 8000f10:	f100 35ff 	add.w	r5, r0, #4294967295
 8000f14:	d229      	bcs.n	8000f6a <__udivmoddi4+0x2ba>
 8000f16:	45a0      	cmp	r8, r4
 8000f18:	d927      	bls.n	8000f6a <__udivmoddi4+0x2ba>
 8000f1a:	3802      	subs	r0, #2
 8000f1c:	441c      	add	r4, r3
 8000f1e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f22:	eba4 0408 	sub.w	r4, r4, r8
 8000f26:	fba0 8902 	umull	r8, r9, r0, r2
 8000f2a:	454c      	cmp	r4, r9
 8000f2c:	46c6      	mov	lr, r8
 8000f2e:	464d      	mov	r5, r9
 8000f30:	d315      	bcc.n	8000f5e <__udivmoddi4+0x2ae>
 8000f32:	d012      	beq.n	8000f5a <__udivmoddi4+0x2aa>
 8000f34:	b156      	cbz	r6, 8000f4c <__udivmoddi4+0x29c>
 8000f36:	ebba 030e 	subs.w	r3, sl, lr
 8000f3a:	eb64 0405 	sbc.w	r4, r4, r5
 8000f3e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f42:	40cb      	lsrs	r3, r1
 8000f44:	431f      	orrs	r7, r3
 8000f46:	40cc      	lsrs	r4, r1
 8000f48:	6037      	str	r7, [r6, #0]
 8000f4a:	6074      	str	r4, [r6, #4]
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f52:	4618      	mov	r0, r3
 8000f54:	e6f8      	b.n	8000d48 <__udivmoddi4+0x98>
 8000f56:	4690      	mov	r8, r2
 8000f58:	e6e0      	b.n	8000d1c <__udivmoddi4+0x6c>
 8000f5a:	45c2      	cmp	sl, r8
 8000f5c:	d2ea      	bcs.n	8000f34 <__udivmoddi4+0x284>
 8000f5e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f62:	eb69 0503 	sbc.w	r5, r9, r3
 8000f66:	3801      	subs	r0, #1
 8000f68:	e7e4      	b.n	8000f34 <__udivmoddi4+0x284>
 8000f6a:	4628      	mov	r0, r5
 8000f6c:	e7d7      	b.n	8000f1e <__udivmoddi4+0x26e>
 8000f6e:	4640      	mov	r0, r8
 8000f70:	e791      	b.n	8000e96 <__udivmoddi4+0x1e6>
 8000f72:	4681      	mov	r9, r0
 8000f74:	e7be      	b.n	8000ef4 <__udivmoddi4+0x244>
 8000f76:	4601      	mov	r1, r0
 8000f78:	e778      	b.n	8000e6c <__udivmoddi4+0x1bc>
 8000f7a:	3802      	subs	r0, #2
 8000f7c:	443c      	add	r4, r7
 8000f7e:	e745      	b.n	8000e0c <__udivmoddi4+0x15c>
 8000f80:	4608      	mov	r0, r1
 8000f82:	e708      	b.n	8000d96 <__udivmoddi4+0xe6>
 8000f84:	f1a8 0802 	sub.w	r8, r8, #2
 8000f88:	443d      	add	r5, r7
 8000f8a:	e72b      	b.n	8000de4 <__udivmoddi4+0x134>

08000f8c <__aeabi_idiv0>:
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop

08000f90 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f90:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f92:	4a0e      	ldr	r2, [pc, #56]	; (8000fcc <HAL_InitTick+0x3c>)
 8000f94:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <HAL_InitTick+0x40>)
{
 8000f96:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f98:	7818      	ldrb	r0, [r3, #0]
 8000f9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f9e:	fbb3 f3f0 	udiv	r3, r3, r0
 8000fa2:	6810      	ldr	r0, [r2, #0]
 8000fa4:	fbb0 f0f3 	udiv	r0, r0, r3
 8000fa8:	f000 fcd4 	bl	8001954 <HAL_SYSTICK_Config>
 8000fac:	4604      	mov	r4, r0
 8000fae:	b958      	cbnz	r0, 8000fc8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fb0:	2d0f      	cmp	r5, #15
 8000fb2:	d809      	bhi.n	8000fc8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	4629      	mov	r1, r5
 8000fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fbc:	f000 fc8a 	bl	80018d4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fc0:	4b04      	ldr	r3, [pc, #16]	; (8000fd4 <HAL_InitTick+0x44>)
 8000fc2:	4620      	mov	r0, r4
 8000fc4:	601d      	str	r5, [r3, #0]
 8000fc6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000fc8:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 8000fca:	bd38      	pop	{r3, r4, r5, pc}
 8000fcc:	20000008 	.word	0x20000008
 8000fd0:	20000000 	.word	0x20000000
 8000fd4:	20000004 	.word	0x20000004

08000fd8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fd8:	4a07      	ldr	r2, [pc, #28]	; (8000ff8 <HAL_Init+0x20>)
{
 8000fda:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fdc:	6813      	ldr	r3, [r2, #0]
 8000fde:	f043 0310 	orr.w	r3, r3, #16
 8000fe2:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fe4:	2003      	movs	r0, #3
 8000fe6:	f000 fc63 	bl	80018b0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fea:	2000      	movs	r0, #0
 8000fec:	f7ff ffd0 	bl	8000f90 <HAL_InitTick>
  HAL_MspInit();
 8000ff0:	f004 f95e 	bl	80052b0 <HAL_MspInit>
}
 8000ff4:	2000      	movs	r0, #0
 8000ff6:	bd08      	pop	{r3, pc}
 8000ff8:	40022000 	.word	0x40022000

08000ffc <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000ffc:	4a03      	ldr	r2, [pc, #12]	; (800100c <HAL_IncTick+0x10>)
 8000ffe:	4b04      	ldr	r3, [pc, #16]	; (8001010 <HAL_IncTick+0x14>)
 8001000:	6811      	ldr	r1, [r2, #0]
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	440b      	add	r3, r1
 8001006:	6013      	str	r3, [r2, #0]
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	2000080c 	.word	0x2000080c
 8001010:	20000000 	.word	0x20000000

08001014 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8001014:	4b01      	ldr	r3, [pc, #4]	; (800101c <HAL_GetTick+0x8>)
 8001016:	6818      	ldr	r0, [r3, #0]
}
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	2000080c 	.word	0x2000080c

08001020 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001020:	b538      	push	{r3, r4, r5, lr}
 8001022:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001024:	f7ff fff6 	bl	8001014 <HAL_GetTick>
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001028:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800102a:	bf1c      	itt	ne
 800102c:	4b05      	ldrne	r3, [pc, #20]	; (8001044 <HAL_Delay+0x24>)
 800102e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8001030:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8001032:	bf18      	it	ne
 8001034:	18e4      	addne	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001036:	f7ff ffed 	bl	8001014 <HAL_GetTick>
 800103a:	1b40      	subs	r0, r0, r5
 800103c:	4284      	cmp	r4, r0
 800103e:	d8fa      	bhi.n	8001036 <HAL_Delay+0x16>
  {
  }
}
 8001040:	bd38      	pop	{r3, r4, r5, pc}
 8001042:	bf00      	nop
 8001044:	20000000 	.word	0x20000000

08001048 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001048:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800104a:	6803      	ldr	r3, [r0, #0]
{
 800104c:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET )
 800104e:	6898      	ldr	r0, [r3, #8]
 8001050:	f000 0003 	and.w	r0, r0, #3
 8001054:	2801      	cmp	r0, #1
 8001056:	d001      	beq.n	800105c <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001058:	2000      	movs	r0, #0
 800105a:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	07d2      	lsls	r2, r2, #31
 8001060:	d5fa      	bpl.n	8001058 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001062:	689a      	ldr	r2, [r3, #8]
 8001064:	f002 020d 	and.w	r2, r2, #13
 8001068:	2a01      	cmp	r2, #1
 800106a:	d11b      	bne.n	80010a4 <ADC_Disable+0x5c>
      __HAL_ADC_DISABLE(hadc);
 800106c:	689a      	ldr	r2, [r3, #8]
 800106e:	f042 0202 	orr.w	r2, r2, #2
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	2203      	movs	r2, #3
 8001076:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8001078:	f7ff ffcc 	bl	8001014 <HAL_GetTick>
 800107c:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800107e:	6823      	ldr	r3, [r4, #0]
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	07db      	lsls	r3, r3, #31
 8001084:	d5e8      	bpl.n	8001058 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001086:	f7ff ffc5 	bl	8001014 <HAL_GetTick>
 800108a:	1b40      	subs	r0, r0, r5
 800108c:	2802      	cmp	r0, #2
 800108e:	d9f6      	bls.n	800107e <ADC_Disable+0x36>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001090:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001092:	f043 0310 	orr.w	r3, r3, #16
 8001096:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001098:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800109a:	f043 0301 	orr.w	r3, r3, #1
 800109e:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 80010a0:	2001      	movs	r0, #1
 80010a2:	bd38      	pop	{r3, r4, r5, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010a4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80010a6:	f043 0310 	orr.w	r3, r3, #16
 80010aa:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010ac:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80010ae:	f043 0301 	orr.w	r3, r3, #1
 80010b2:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 80010b4:	bd38      	pop	{r3, r4, r5, pc}
	...

080010b8 <ADC_Enable>:
{
 80010b8:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 80010ba:	6803      	ldr	r3, [r0, #0]
 80010bc:	689a      	ldr	r2, [r3, #8]
 80010be:	f002 0203 	and.w	r2, r2, #3
 80010c2:	2a01      	cmp	r2, #1
{
 80010c4:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 80010c6:	d104      	bne.n	80010d2 <ADC_Enable+0x1a>
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	07d2      	lsls	r2, r2, #31
 80010cc:	d501      	bpl.n	80010d2 <ADC_Enable+0x1a>
  return HAL_OK;
 80010ce:	2000      	movs	r0, #0
 80010d0:	bd38      	pop	{r3, r4, r5, pc}
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80010d2:	6899      	ldr	r1, [r3, #8]
 80010d4:	4a0e      	ldr	r2, [pc, #56]	; (8001110 <ADC_Enable+0x58>)
 80010d6:	4211      	tst	r1, r2
 80010d8:	d10f      	bne.n	80010fa <ADC_Enable+0x42>
    __HAL_ADC_ENABLE(hadc);
 80010da:	689a      	ldr	r2, [r3, #8]
 80010dc:	f042 0201 	orr.w	r2, r2, #1
 80010e0:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 80010e2:	f7ff ff97 	bl	8001014 <HAL_GetTick>
 80010e6:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80010e8:	6823      	ldr	r3, [r4, #0]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	07db      	lsls	r3, r3, #31
 80010ee:	d4ee      	bmi.n	80010ce <ADC_Enable+0x16>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80010f0:	f7ff ff90 	bl	8001014 <HAL_GetTick>
 80010f4:	1b40      	subs	r0, r0, r5
 80010f6:	2802      	cmp	r0, #2
 80010f8:	d9f6      	bls.n	80010e8 <ADC_Enable+0x30>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010fa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80010fc:	f043 0310 	orr.w	r3, r3, #16
 8001100:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001102:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001104:	f043 0301 	orr.w	r3, r3, #1
 8001108:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 800110a:	2001      	movs	r0, #1
 800110c:	bd38      	pop	{r3, r4, r5, pc}
 800110e:	bf00      	nop
 8001110:	8000003f 	.word	0x8000003f

08001114 <HAL_ADC_Init>:
{
 8001114:	b570      	push	{r4, r5, r6, lr}
 8001116:	b096      	sub	sp, #88	; 0x58
  __IO uint32_t wait_loop_index = 0U;
 8001118:	2300      	movs	r3, #0
 800111a:	9300      	str	r3, [sp, #0]
  if(hadc == NULL)
 800111c:	4604      	mov	r4, r0
 800111e:	2800      	cmp	r0, #0
 8001120:	f000 80e3 	beq.w	80012ea <HAL_ADC_Init+0x1d6>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001124:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001126:	06d5      	lsls	r5, r2, #27
 8001128:	f100 80cc 	bmi.w	80012c4 <HAL_ADC_Init+0x1b0>
    if (hadc->State == HAL_ADC_STATE_RESET)
 800112c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800112e:	2b00      	cmp	r3, #0
 8001130:	f000 8092 	beq.w	8001258 <HAL_ADC_Init+0x144>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001134:	2000      	movs	r0, #0
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001136:	6823      	ldr	r3, [r4, #0]
 8001138:	689a      	ldr	r2, [r3, #8]
 800113a:	00d2      	lsls	r2, r2, #3
 800113c:	d502      	bpl.n	8001144 <HAL_ADC_Init+0x30>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800113e:	689b      	ldr	r3, [r3, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	d50a      	bpl.n	800115a <HAL_ADC_Init+0x46>
      ADC_STATE_CLR_SET(hadc->State,
 8001144:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001146:	f023 0312 	bic.w	r3, r3, #18
 800114a:	f043 0310 	orr.w	r3, r3, #16
 800114e:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001150:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001152:	f043 0301 	orr.w	r3, r3, #1
 8001156:	64a3      	str	r3, [r4, #72]	; 0x48
      tmp_hal_status = HAL_ERROR;
 8001158:	2001      	movs	r0, #1
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800115a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800115c:	06de      	lsls	r6, r3, #27
 800115e:	f100 80be 	bmi.w	80012de <HAL_ADC_Init+0x1ca>
 8001162:	2800      	cmp	r0, #0
 8001164:	f040 80bb 	bne.w	80012de <HAL_ADC_Init+0x1ca>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001168:	6823      	ldr	r3, [r4, #0]
 800116a:	6899      	ldr	r1, [r3, #8]
      (tmp_hal_status == HAL_OK)                                &&
 800116c:	f011 0104 	ands.w	r1, r1, #4
 8001170:	f040 80b5 	bne.w	80012de <HAL_ADC_Init+0x1ca>
    ADC_STATE_CLR_SET(hadc->State,
 8001174:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001176:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 800117a:	f042 0202 	orr.w	r2, r2, #2
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800117e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
    ADC_STATE_CLR_SET(hadc->State,
 8001182:	6462      	str	r2, [r4, #68]	; 0x44
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001184:	bf0c      	ite	eq
 8001186:	4a5a      	ldreq	r2, [pc, #360]	; (80012f0 <HAL_ADC_Init+0x1dc>)
 8001188:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
 800118c:	9201      	str	r2, [sp, #4]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800118e:	689a      	ldr	r2, [r3, #8]
 8001190:	f002 0203 	and.w	r2, r2, #3
 8001194:	2a01      	cmp	r2, #1
 8001196:	d102      	bne.n	800119e <HAL_ADC_Init+0x8a>
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	07d5      	lsls	r5, r2, #31
 800119c:	d410      	bmi.n	80011c0 <HAL_ADC_Init+0xac>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800119e:	9a01      	ldr	r2, [sp, #4]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80011a0:	b13a      	cbz	r2, 80011b2 <HAL_ADC_Init+0x9e>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80011a2:	6895      	ldr	r5, [r2, #8]
 80011a4:	f005 0503 	and.w	r5, r5, #3
 80011a8:	2d01      	cmp	r5, #1
 80011aa:	d102      	bne.n	80011b2 <HAL_ADC_Init+0x9e>
 80011ac:	6812      	ldr	r2, [r2, #0]
 80011ae:	07d2      	lsls	r2, r2, #31
 80011b0:	d406      	bmi.n	80011c0 <HAL_ADC_Init+0xac>
      MODIFY_REG(tmpADC_Common->CCR       ,
 80011b2:	4d50      	ldr	r5, [pc, #320]	; (80012f4 <HAL_ADC_Init+0x1e0>)
 80011b4:	6866      	ldr	r6, [r4, #4]
 80011b6:	68aa      	ldr	r2, [r5, #8]
 80011b8:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80011bc:	4332      	orrs	r2, r6
 80011be:	60aa      	str	r2, [r5, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 80011c0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80011c2:	68a6      	ldr	r6, [r4, #8]
 80011c4:	69e5      	ldr	r5, [r4, #28]
 80011c6:	2a01      	cmp	r2, #1
 80011c8:	68e2      	ldr	r2, [r4, #12]
 80011ca:	ea42 0206 	orr.w	r2, r2, r6
 80011ce:	bf18      	it	ne
 80011d0:	f44f 5180 	movne.w	r1, #4096	; 0x1000
 80011d4:	ea42 3245 	orr.w	r2, r2, r5, lsl #13
 80011d8:	430a      	orrs	r2, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80011da:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80011dc:	2901      	cmp	r1, #1
 80011de:	d107      	bne.n	80011f0 <HAL_ADC_Init+0xdc>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80011e0:	2d00      	cmp	r5, #0
 80011e2:	d171      	bne.n	80012c8 <HAL_ADC_Init+0x1b4>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80011e4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80011e6:	3901      	subs	r1, #1
 80011e8:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 80011ec:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80011f0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80011f2:	2901      	cmp	r1, #1
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80011f4:	bf1e      	ittt	ne
 80011f6:	6b25      	ldrne	r5, [r4, #48]	; 0x30
 80011f8:	4329      	orrne	r1, r5
 80011fa:	430a      	orrne	r2, r1
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80011fc:	6899      	ldr	r1, [r3, #8]
 80011fe:	f011 0f0c 	tst.w	r1, #12
 8001202:	d10b      	bne.n	800121c <HAL_ADC_Init+0x108>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001204:	68d9      	ldr	r1, [r3, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8001206:	69a5      	ldr	r5, [r4, #24]
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001208:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 800120c:	f021 0102 	bic.w	r1, r1, #2
 8001210:	60d9      	str	r1, [r3, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8001212:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001214:	0049      	lsls	r1, r1, #1
 8001216:	ea41 3185 	orr.w	r1, r1, r5, lsl #14
 800121a:	430a      	orrs	r2, r1
    MODIFY_REG(hadc->Instance->CFGR,
 800121c:	68dd      	ldr	r5, [r3, #12]
 800121e:	4936      	ldr	r1, [pc, #216]	; (80012f8 <HAL_ADC_Init+0x1e4>)
 8001220:	4029      	ands	r1, r5
 8001222:	430a      	orrs	r2, r1
 8001224:	60da      	str	r2, [r3, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001226:	6922      	ldr	r2, [r4, #16]
 8001228:	2a01      	cmp	r2, #1
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800122a:	bf05      	ittet	eq
 800122c:	6b19      	ldreq	r1, [r3, #48]	; 0x30
 800122e:	6a22      	ldreq	r2, [r4, #32]
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001230:	6b1a      	ldrne	r2, [r3, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001232:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8001236:	bf06      	itte	eq
 8001238:	f021 010f 	biceq.w	r1, r1, #15
 800123c:	430a      	orreq	r2, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800123e:	f022 020f 	bicne.w	r2, r2, #15
 8001242:	631a      	str	r2, [r3, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 8001244:	2300      	movs	r3, #0
 8001246:	64a3      	str	r3, [r4, #72]	; 0x48
    ADC_STATE_CLR_SET(hadc->State,
 8001248:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800124a:	f023 0303 	bic.w	r3, r3, #3
 800124e:	f043 0301 	orr.w	r3, r3, #1
 8001252:	6463      	str	r3, [r4, #68]	; 0x44
}
 8001254:	b016      	add	sp, #88	; 0x58
 8001256:	bd70      	pop	{r4, r5, r6, pc}
      ADC_CLEAR_ERRORCODE(hadc);
 8001258:	6483      	str	r3, [r0, #72]	; 0x48
      hadc->InjectionConfig.ChannelCount = 0U;
 800125a:	6503      	str	r3, [r0, #80]	; 0x50
      hadc->InjectionConfig.ContextQueue = 0U;
 800125c:	64c3      	str	r3, [r0, #76]	; 0x4c
      hadc->Lock = HAL_UNLOCKED;
 800125e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
      HAL_ADC_MspInit(hadc);
 8001262:	f004 f841 	bl	80052e8 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001266:	6823      	ldr	r3, [r4, #0]
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	00d8      	lsls	r0, r3, #3
 800126c:	f53f af62 	bmi.w	8001134 <HAL_ADC_Init+0x20>
        tmp_hal_status = ADC_Disable(hadc);
 8001270:	4620      	mov	r0, r4
 8001272:	f7ff fee9 	bl	8001048 <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001276:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001278:	06d1      	lsls	r1, r2, #27
 800127a:	f53f af5c 	bmi.w	8001136 <HAL_ADC_Init+0x22>
 800127e:	2800      	cmp	r0, #0
 8001280:	f47f af59 	bne.w	8001136 <HAL_ADC_Init+0x22>
          ADC_STATE_CLR_SET(hadc->State,
 8001284:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001286:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800128a:	f023 0302 	bic.w	r3, r3, #2
 800128e:	f043 0302 	orr.w	r3, r3, #2
 8001292:	6463      	str	r3, [r4, #68]	; 0x44
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001294:	6823      	ldr	r3, [r4, #0]
 8001296:	689a      	ldr	r2, [r3, #8]
 8001298:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800129c:	609a      	str	r2, [r3, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800129e:	689a      	ldr	r2, [r3, #8]
 80012a0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012a4:	609a      	str	r2, [r3, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80012a6:	4b15      	ldr	r3, [pc, #84]	; (80012fc <HAL_ADC_Init+0x1e8>)
 80012a8:	4a15      	ldr	r2, [pc, #84]	; (8001300 <HAL_ADC_Init+0x1ec>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	fbb3 f2f2 	udiv	r2, r3, r2
 80012b0:	230a      	movs	r3, #10
 80012b2:	4353      	muls	r3, r2
            wait_loop_index--;
 80012b4:	9300      	str	r3, [sp, #0]
          while(wait_loop_index != 0U)
 80012b6:	9b00      	ldr	r3, [sp, #0]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	f43f af3b 	beq.w	8001134 <HAL_ADC_Init+0x20>
            wait_loop_index--;
 80012be:	9b00      	ldr	r3, [sp, #0]
 80012c0:	3b01      	subs	r3, #1
 80012c2:	e7f7      	b.n	80012b4 <HAL_ADC_Init+0x1a0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012c4:	4618      	mov	r0, r3
 80012c6:	e748      	b.n	800115a <HAL_ADC_Init+0x46>
        ADC_STATE_CLR_SET(hadc->State,
 80012c8:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80012ca:	f021 0122 	bic.w	r1, r1, #34	; 0x22
 80012ce:	f041 0120 	orr.w	r1, r1, #32
 80012d2:	6461      	str	r1, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012d4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80012d6:	f041 0101 	orr.w	r1, r1, #1
 80012da:	64a1      	str	r1, [r4, #72]	; 0x48
 80012dc:	e788      	b.n	80011f0 <HAL_ADC_Init+0xdc>
    ADC_STATE_CLR_SET(hadc->State,
 80012de:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80012e0:	f023 0312 	bic.w	r3, r3, #18
 80012e4:	f043 0310 	orr.w	r3, r3, #16
 80012e8:	6463      	str	r3, [r4, #68]	; 0x44
    return HAL_ERROR;
 80012ea:	2001      	movs	r0, #1
 80012ec:	e7b2      	b.n	8001254 <HAL_ADC_Init+0x140>
 80012ee:	bf00      	nop
 80012f0:	50000100 	.word	0x50000100
 80012f4:	50000300 	.word	0x50000300
 80012f8:	fff0c007 	.word	0xfff0c007
 80012fc:	20000008 	.word	0x20000008
 8001300:	000f4240 	.word	0x000f4240

08001304 <HAL_ADC_Start>:
{
 8001304:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001306:	6803      	ldr	r3, [r0, #0]
 8001308:	689d      	ldr	r5, [r3, #8]
 800130a:	f015 0504 	ands.w	r5, r5, #4
{
 800130e:	4604      	mov	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001310:	d158      	bne.n	80013c4 <HAL_ADC_Start+0xc0>
    __HAL_LOCK(hadc);
 8001312:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001316:	2b01      	cmp	r3, #1
 8001318:	d054      	beq.n	80013c4 <HAL_ADC_Start+0xc0>
 800131a:	2301      	movs	r3, #1
 800131c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tmp_hal_status = ADC_Enable(hadc);
 8001320:	f7ff feca 	bl	80010b8 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8001324:	2800      	cmp	r0, #0
 8001326:	d14a      	bne.n	80013be <HAL_ADC_Start+0xba>
      ADC_STATE_CLR_SET(hadc->State,
 8001328:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800132a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800132e:	f023 0301 	bic.w	r3, r3, #1
 8001332:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001336:	6463      	str	r3, [r4, #68]	; 0x44
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001338:	4b23      	ldr	r3, [pc, #140]	; (80013c8 <HAL_ADC_Start+0xc4>)
 800133a:	689b      	ldr	r3, [r3, #8]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800133c:	6c62      	ldr	r2, [r4, #68]	; 0x44
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800133e:	f013 0f1f 	tst.w	r3, #31
 8001342:	6823      	ldr	r3, [r4, #0]
 8001344:	d002      	beq.n	800134c <HAL_ADC_Start+0x48>
 8001346:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800134a:	d12e      	bne.n	80013aa <HAL_ADC_Start+0xa6>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800134c:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001350:	6462      	str	r2, [r4, #68]	; 0x44
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001352:	68da      	ldr	r2, [r3, #12]
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001354:	0195      	lsls	r5, r2, #6
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001356:	bf41      	itttt	mi
 8001358:	6c62      	ldrmi	r2, [r4, #68]	; 0x44
 800135a:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 800135e:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 8001362:	6462      	strmi	r2, [r4, #68]	; 0x44
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001364:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001366:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800136a:	bf1c      	itt	ne
 800136c:	6ca2      	ldrne	r2, [r4, #72]	; 0x48
 800136e:	f022 0206 	bicne.w	r2, r2, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8001372:	64a2      	str	r2, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 8001374:	2200      	movs	r2, #0
 8001376:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800137a:	221c      	movs	r2, #28
 800137c:	601a      	str	r2, [r3, #0]
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800137e:	4a12      	ldr	r2, [pc, #72]	; (80013c8 <HAL_ADC_Start+0xc4>)
 8001380:	6891      	ldr	r1, [r2, #8]
 8001382:	06c9      	lsls	r1, r1, #27
 8001384:	d00c      	beq.n	80013a0 <HAL_ADC_Start+0x9c>
 8001386:	6891      	ldr	r1, [r2, #8]
 8001388:	f001 011f 	and.w	r1, r1, #31
 800138c:	2905      	cmp	r1, #5
 800138e:	d007      	beq.n	80013a0 <HAL_ADC_Start+0x9c>
 8001390:	6892      	ldr	r2, [r2, #8]
 8001392:	f002 021f 	and.w	r2, r2, #31
 8001396:	2a09      	cmp	r2, #9
 8001398:	d002      	beq.n	80013a0 <HAL_ADC_Start+0x9c>
 800139a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800139e:	d112      	bne.n	80013c6 <HAL_ADC_Start+0xc2>
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80013a0:	689a      	ldr	r2, [r3, #8]
 80013a2:	f042 0204 	orr.w	r2, r2, #4
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	bd38      	pop	{r3, r4, r5, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80013aa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80013ae:	6462      	str	r2, [r4, #68]	; 0x44
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80013b0:	4a06      	ldr	r2, [pc, #24]	; (80013cc <HAL_ADC_Start+0xc8>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d1d6      	bne.n	8001364 <HAL_ADC_Start+0x60>
 80013b6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80013ba:	68d2      	ldr	r2, [r2, #12]
 80013bc:	e7ca      	b.n	8001354 <HAL_ADC_Start+0x50>
      __HAL_UNLOCK(hadc);
 80013be:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
 80013c2:	bd38      	pop	{r3, r4, r5, pc}
    tmp_hal_status = HAL_BUSY;
 80013c4:	2002      	movs	r0, #2
}
 80013c6:	bd38      	pop	{r3, r4, r5, pc}
 80013c8:	50000300 	.word	0x50000300
 80013cc:	50000100 	.word	0x50000100

080013d0 <HAL_ADC_PollForConversion>:
{
 80013d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80013d4:	6946      	ldr	r6, [r0, #20]
 80013d6:	2e08      	cmp	r6, #8
{
 80013d8:	4604      	mov	r4, r0
 80013da:	460f      	mov	r7, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80013dc:	d01c      	beq.n	8001418 <HAL_ADC_PollForConversion+0x48>
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80013de:	4a37      	ldr	r2, [pc, #220]	; (80014bc <HAL_ADC_PollForConversion+0xec>)
 80013e0:	6893      	ldr	r3, [r2, #8]
 80013e2:	f013 031f 	ands.w	r3, r3, #31
 80013e6:	d10c      	bne.n	8001402 <HAL_ADC_PollForConversion+0x32>
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80013e8:	6802      	ldr	r2, [r0, #0]
 80013ea:	68d2      	ldr	r2, [r2, #12]
 80013ec:	07d1      	lsls	r1, r2, #31
 80013ee:	d512      	bpl.n	8001416 <HAL_ADC_PollForConversion+0x46>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013f0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80013f2:	f042 0220 	orr.w	r2, r2, #32
 80013f6:	6442      	str	r2, [r0, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 80013f8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 80013fc:	2001      	movs	r0, #1
 80013fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001402:	6893      	ldr	r3, [r2, #8]
 8001404:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 8001408:	d005      	beq.n	8001416 <HAL_ADC_PollForConversion+0x46>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800140a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800140c:	f043 0320 	orr.w	r3, r3, #32
 8001410:	6443      	str	r3, [r0, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 8001412:	2300      	movs	r3, #0
 8001414:	e7f0      	b.n	80013f8 <HAL_ADC_PollForConversion+0x28>
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001416:	260c      	movs	r6, #12
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001418:	4b28      	ldr	r3, [pc, #160]	; (80014bc <HAL_ADC_PollForConversion+0xec>)
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	f013 0f1f 	tst.w	r3, #31
 8001420:	6823      	ldr	r3, [r4, #0]
 8001422:	d004      	beq.n	800142e <HAL_ADC_PollForConversion+0x5e>
 8001424:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001428:	bf18      	it	ne
 800142a:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
 800142e:	68dd      	ldr	r5, [r3, #12]
  tickstart = HAL_GetTick();  
 8001430:	f7ff fdf0 	bl	8001014 <HAL_GetTick>
 8001434:	4680      	mov	r8, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001436:	6823      	ldr	r3, [r4, #0]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	4216      	tst	r6, r2
 800143c:	d022      	beq.n	8001484 <HAL_ADC_PollForConversion+0xb4>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800143e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001440:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001444:	6462      	str	r2, [r4, #68]	; 0x44
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001446:	68da      	ldr	r2, [r3, #12]
 8001448:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 800144c:	d113      	bne.n	8001476 <HAL_ADC_PollForConversion+0xa6>
 800144e:	04a8      	lsls	r0, r5, #18
 8001450:	d411      	bmi.n	8001476 <HAL_ADC_PollForConversion+0xa6>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	0711      	lsls	r1, r2, #28
 8001456:	d50e      	bpl.n	8001476 <HAL_ADC_PollForConversion+0xa6>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001458:	689a      	ldr	r2, [r3, #8]
 800145a:	f012 0f04 	tst.w	r2, #4
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800145e:	6c62      	ldr	r2, [r4, #68]	; 0x44
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001460:	d124      	bne.n	80014ac <HAL_ADC_PollForConversion+0xdc>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001462:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001466:	6462      	str	r2, [r4, #68]	; 0x44
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001468:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800146a:	04d2      	lsls	r2, r2, #19
 800146c:	d403      	bmi.n	8001476 <HAL_ADC_PollForConversion+0xa6>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800146e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001470:	f042 0201 	orr.w	r2, r2, #1
 8001474:	6462      	str	r2, [r4, #68]	; 0x44
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8001476:	f415 4080 	ands.w	r0, r5, #16384	; 0x4000
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 800147a:	bf0c      	ite	eq
 800147c:	601e      	streq	r6, [r3, #0]
  return HAL_OK;
 800147e:	2000      	movne	r0, #0
}
 8001480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001484:	1c7a      	adds	r2, r7, #1
 8001486:	d0d7      	beq.n	8001438 <HAL_ADC_PollForConversion+0x68>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001488:	b94f      	cbnz	r7, 800149e <HAL_ADC_PollForConversion+0xce>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800148a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800148c:	f043 0304 	orr.w	r3, r3, #4
 8001490:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 8001492:	2300      	movs	r3, #0
 8001494:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 8001498:	2003      	movs	r0, #3
 800149a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800149e:	f7ff fdb9 	bl	8001014 <HAL_GetTick>
 80014a2:	eba0 0008 	sub.w	r0, r0, r8
 80014a6:	4287      	cmp	r7, r0
 80014a8:	d2c5      	bcs.n	8001436 <HAL_ADC_PollForConversion+0x66>
 80014aa:	e7ee      	b.n	800148a <HAL_ADC_PollForConversion+0xba>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014ac:	f042 0220 	orr.w	r2, r2, #32
 80014b0:	6462      	str	r2, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014b2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80014b4:	f042 0201 	orr.w	r2, r2, #1
 80014b8:	64a2      	str	r2, [r4, #72]	; 0x48
 80014ba:	e7dc      	b.n	8001476 <HAL_ADC_PollForConversion+0xa6>
 80014bc:	50000300 	.word	0x50000300

080014c0 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 80014c0:	6803      	ldr	r3, [r0, #0]
 80014c2:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 80014c4:	4770      	bx	lr
	...

080014c8 <HAL_ADC_ConfigChannel>:
{
 80014c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014ca:	b097      	sub	sp, #92	; 0x5c
  __IO uint32_t wait_loop_index = 0U;
 80014cc:	2300      	movs	r3, #0
 80014ce:	9300      	str	r3, [sp, #0]
  __HAL_LOCK(hadc);
 80014d0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80014d4:	2b01      	cmp	r3, #1
{
 80014d6:	4605      	mov	r5, r0
  __HAL_LOCK(hadc);
 80014d8:	f000 8151 	beq.w	800177e <HAL_ADC_ConfigChannel+0x2b6>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80014dc:	682b      	ldr	r3, [r5, #0]
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80014de:	68ce      	ldr	r6, [r1, #12]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80014e0:	689a      	ldr	r2, [r3, #8]
  __HAL_LOCK(hadc);
 80014e2:	2001      	movs	r0, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80014e4:	0754      	lsls	r4, r2, #29
  __HAL_LOCK(hadc);
 80014e6:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80014ea:	f100 8143 	bmi.w	8001774 <HAL_ADC_ConfigChannel+0x2ac>
    if (sConfig->Rank < 5U)
 80014ee:	6848      	ldr	r0, [r1, #4]
 80014f0:	680c      	ldr	r4, [r1, #0]
 80014f2:	2804      	cmp	r0, #4
 80014f4:	f04f 0206 	mov.w	r2, #6
 80014f8:	d831      	bhi.n	800155e <HAL_ADC_ConfigChannel+0x96>
      MODIFY_REG(hadc->Instance->SQR1,
 80014fa:	4342      	muls	r2, r0
 80014fc:	6b1f      	ldr	r7, [r3, #48]	; 0x30
 80014fe:	201f      	movs	r0, #31
 8001500:	4090      	lsls	r0, r2
 8001502:	ea27 0000 	bic.w	r0, r7, r0
 8001506:	fa04 f202 	lsl.w	r2, r4, r2
 800150a:	4302      	orrs	r2, r0
 800150c:	631a      	str	r2, [r3, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800150e:	689a      	ldr	r2, [r3, #8]
 8001510:	f012 0f0c 	tst.w	r2, #12
 8001514:	d162      	bne.n	80015dc <HAL_ADC_ConfigChannel+0x114>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001516:	2c09      	cmp	r4, #9
 8001518:	ea4f 0244 	mov.w	r2, r4, lsl #1
 800151c:	688f      	ldr	r7, [r1, #8]
 800151e:	d946      	bls.n	80015ae <HAL_ADC_ConfigChannel+0xe6>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001520:	4422      	add	r2, r4
 8001522:	6998      	ldr	r0, [r3, #24]
 8001524:	3a1e      	subs	r2, #30
 8001526:	f04f 0e07 	mov.w	lr, #7
 800152a:	fa0e fe02 	lsl.w	lr, lr, r2
 800152e:	ea20 000e 	bic.w	r0, r0, lr
 8001532:	fa07 f202 	lsl.w	r2, r7, r2
 8001536:	4302      	orrs	r2, r0
 8001538:	619a      	str	r2, [r3, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800153a:	68da      	ldr	r2, [r3, #12]
 800153c:	f3c2 0ec1 	ubfx	lr, r2, #3, #2
 8001540:	694a      	ldr	r2, [r1, #20]
 8001542:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 8001546:	fa02 fe0e 	lsl.w	lr, r2, lr
    switch (sConfig->OffsetNumber)
 800154a:	690a      	ldr	r2, [r1, #16]
 800154c:	3a01      	subs	r2, #1
 800154e:	ea4f 6c84 	mov.w	ip, r4, lsl #26
 8001552:	2a03      	cmp	r2, #3
 8001554:	d873      	bhi.n	800163e <HAL_ADC_ConfigChannel+0x176>
 8001556:	e8df f002 	tbb	[pc, r2]
 800155a:	5137      	.short	0x5137
 800155c:	675c      	.short	0x675c
    else if (sConfig->Rank < 10U)
 800155e:	2809      	cmp	r0, #9
 8001560:	d80b      	bhi.n	800157a <HAL_ADC_ConfigChannel+0xb2>
      MODIFY_REG(hadc->Instance->SQR2,
 8001562:	4342      	muls	r2, r0
 8001564:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 8001566:	3a1e      	subs	r2, #30
 8001568:	201f      	movs	r0, #31
 800156a:	4090      	lsls	r0, r2
 800156c:	ea27 0000 	bic.w	r0, r7, r0
 8001570:	fa04 f202 	lsl.w	r2, r4, r2
 8001574:	4302      	orrs	r2, r0
 8001576:	635a      	str	r2, [r3, #52]	; 0x34
 8001578:	e7c9      	b.n	800150e <HAL_ADC_ConfigChannel+0x46>
    else if (sConfig->Rank < 15U)
 800157a:	280e      	cmp	r0, #14
 800157c:	d80b      	bhi.n	8001596 <HAL_ADC_ConfigChannel+0xce>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800157e:	4342      	muls	r2, r0
 8001580:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8001582:	3a3c      	subs	r2, #60	; 0x3c
 8001584:	201f      	movs	r0, #31
 8001586:	4090      	lsls	r0, r2
 8001588:	ea27 0000 	bic.w	r0, r7, r0
 800158c:	fa04 f202 	lsl.w	r2, r4, r2
 8001590:	4302      	orrs	r2, r0
 8001592:	639a      	str	r2, [r3, #56]	; 0x38
 8001594:	e7bb      	b.n	800150e <HAL_ADC_ConfigChannel+0x46>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001596:	4342      	muls	r2, r0
 8001598:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 800159a:	3a5a      	subs	r2, #90	; 0x5a
 800159c:	201f      	movs	r0, #31
 800159e:	4090      	lsls	r0, r2
 80015a0:	ea27 0000 	bic.w	r0, r7, r0
 80015a4:	fa04 f202 	lsl.w	r2, r4, r2
 80015a8:	4302      	orrs	r2, r0
 80015aa:	63da      	str	r2, [r3, #60]	; 0x3c
 80015ac:	e7af      	b.n	800150e <HAL_ADC_ConfigChannel+0x46>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80015ae:	6958      	ldr	r0, [r3, #20]
 80015b0:	4422      	add	r2, r4
 80015b2:	f04f 0e07 	mov.w	lr, #7
 80015b6:	fa0e fe02 	lsl.w	lr, lr, r2
 80015ba:	ea20 000e 	bic.w	r0, r0, lr
 80015be:	fa07 f202 	lsl.w	r2, r7, r2
 80015c2:	4302      	orrs	r2, r0
 80015c4:	615a      	str	r2, [r3, #20]
 80015c6:	e7b8      	b.n	800153a <HAL_ADC_ConfigChannel+0x72>
      MODIFY_REG(hadc->Instance->OFR1               ,
 80015c8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80015ca:	4f7a      	ldr	r7, [pc, #488]	; (80017b4 <HAL_ADC_ConfigChannel+0x2ec>)
 80015cc:	4017      	ands	r7, r2
 80015ce:	ea47 020c 	orr.w	r2, r7, ip
 80015d2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80015d6:	ea42 020e 	orr.w	r2, r2, lr
 80015da:	661a      	str	r2, [r3, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 80015dc:	689a      	ldr	r2, [r3, #8]
 80015de:	f002 0203 	and.w	r2, r2, #3
 80015e2:	2a01      	cmp	r2, #1
 80015e4:	f040 80cd 	bne.w	8001782 <HAL_ADC_ConfigChannel+0x2ba>
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	07d0      	lsls	r0, r2, #31
 80015ec:	f140 80c9 	bpl.w	8001782 <HAL_ADC_ConfigChannel+0x2ba>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015f0:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 80015f2:	2300      	movs	r3, #0
 80015f4:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
}
 80015f8:	b017      	add	sp, #92	; 0x5c
 80015fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MODIFY_REG(hadc->Instance->OFR2               ,
 80015fc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80015fe:	4f6d      	ldr	r7, [pc, #436]	; (80017b4 <HAL_ADC_ConfigChannel+0x2ec>)
 8001600:	4017      	ands	r7, r2
 8001602:	ea47 020c 	orr.w	r2, r7, ip
 8001606:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800160a:	ea42 020e 	orr.w	r2, r2, lr
 800160e:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 8001610:	e7e4      	b.n	80015dc <HAL_ADC_ConfigChannel+0x114>
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001612:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001614:	4867      	ldr	r0, [pc, #412]	; (80017b4 <HAL_ADC_ConfigChannel+0x2ec>)
 8001616:	4010      	ands	r0, r2
 8001618:	ea40 020c 	orr.w	r2, r0, ip
 800161c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001620:	ea42 020e 	orr.w	r2, r2, lr
 8001624:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8001626:	e7d9      	b.n	80015dc <HAL_ADC_ConfigChannel+0x114>
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001628:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800162a:	4a62      	ldr	r2, [pc, #392]	; (80017b4 <HAL_ADC_ConfigChannel+0x2ec>)
 800162c:	4002      	ands	r2, r0
 800162e:	ea42 020c 	orr.w	r2, r2, ip
 8001632:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001636:	ea42 020e 	orr.w	r2, r2, lr
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800163a:	66da      	str	r2, [r3, #108]	; 0x6c
 800163c:	e7ce      	b.n	80015dc <HAL_ADC_ConfigChannel+0x114>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800163e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001640:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8001644:	4562      	cmp	r2, ip
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001646:	bf02      	ittt	eq
 8001648:	6e1a      	ldreq	r2, [r3, #96]	; 0x60
 800164a:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 800164e:	661a      	streq	r2, [r3, #96]	; 0x60
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001650:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001652:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8001656:	4594      	cmp	ip, r2
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001658:	bf02      	ittt	eq
 800165a:	6e5a      	ldreq	r2, [r3, #100]	; 0x64
 800165c:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8001660:	665a      	streq	r2, [r3, #100]	; 0x64
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001662:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001664:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8001668:	4594      	cmp	ip, r2
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800166a:	bf02      	ittt	eq
 800166c:	6e9a      	ldreq	r2, [r3, #104]	; 0x68
 800166e:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8001672:	669a      	streq	r2, [r3, #104]	; 0x68
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001674:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001676:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 800167a:	4594      	cmp	ip, r2
 800167c:	d1ae      	bne.n	80015dc <HAL_ADC_ConfigChannel+0x114>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800167e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001680:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001684:	e7d9      	b.n	800163a <HAL_ADC_ConfigChannel+0x172>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001686:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800168a:	2101      	movs	r1, #1
 800168c:	40a1      	lsls	r1, r4
 800168e:	ea22 0201 	bic.w	r2, r2, r1
 8001692:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001696:	2c10      	cmp	r4, #16
 8001698:	d143      	bne.n	8001722 <HAL_ADC_ConfigChannel+0x25a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800169a:	4a47      	ldr	r2, [pc, #284]	; (80017b8 <HAL_ADC_ConfigChannel+0x2f0>)
 800169c:	6892      	ldr	r2, [r2, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800169e:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80016a2:	d1a5      	bne.n	80015f0 <HAL_ADC_ConfigChannel+0x128>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80016a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016a8:	bf0c      	ite	eq
 80016aa:	4a44      	ldreq	r2, [pc, #272]	; (80017bc <HAL_ADC_ConfigChannel+0x2f4>)
 80016ac:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
 80016b0:	9201      	str	r2, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80016b2:	689a      	ldr	r2, [r3, #8]
 80016b4:	f002 0203 	and.w	r2, r2, #3
 80016b8:	2a01      	cmp	r2, #1
 80016ba:	d102      	bne.n	80016c2 <HAL_ADC_ConfigChannel+0x1fa>
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	07d1      	lsls	r1, r2, #31
 80016c0:	d452      	bmi.n	8001768 <HAL_ADC_ConfigChannel+0x2a0>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80016c2:	9a01      	ldr	r2, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80016c4:	b13a      	cbz	r2, 80016d6 <HAL_ADC_ConfigChannel+0x20e>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80016c6:	6891      	ldr	r1, [r2, #8]
 80016c8:	f001 0103 	and.w	r1, r1, #3
 80016cc:	2901      	cmp	r1, #1
 80016ce:	d102      	bne.n	80016d6 <HAL_ADC_ConfigChannel+0x20e>
 80016d0:	6812      	ldr	r2, [r2, #0]
 80016d2:	07d2      	lsls	r2, r2, #31
 80016d4:	d448      	bmi.n	8001768 <HAL_ADC_ConfigChannel+0x2a0>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80016d6:	2c10      	cmp	r4, #16
 80016d8:	d132      	bne.n	8001740 <HAL_ADC_ConfigChannel+0x278>
 80016da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016de:	d187      	bne.n	80015f0 <HAL_ADC_ConfigChannel+0x128>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80016e0:	4a35      	ldr	r2, [pc, #212]	; (80017b8 <HAL_ADC_ConfigChannel+0x2f0>)
 80016e2:	6893      	ldr	r3, [r2, #8]
 80016e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80016e8:	6093      	str	r3, [r2, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80016ea:	4b35      	ldr	r3, [pc, #212]	; (80017c0 <HAL_ADC_ConfigChannel+0x2f8>)
 80016ec:	4a35      	ldr	r2, [pc, #212]	; (80017c4 <HAL_ADC_ConfigChannel+0x2fc>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	fbb3 f2f2 	udiv	r2, r3, r2
 80016f4:	230a      	movs	r3, #10
 80016f6:	4353      	muls	r3, r2
            wait_loop_index--;
 80016f8:	9300      	str	r3, [sp, #0]
          while(wait_loop_index != 0U)
 80016fa:	9b00      	ldr	r3, [sp, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	f43f af77 	beq.w	80015f0 <HAL_ADC_ConfigChannel+0x128>
            wait_loop_index--;
 8001702:	9b00      	ldr	r3, [sp, #0]
 8001704:	3b01      	subs	r3, #1
 8001706:	e7f7      	b.n	80016f8 <HAL_ADC_ConfigChannel+0x230>
        MODIFY_REG(hadc->Instance->SMPR1,
 8001708:	1c60      	adds	r0, r4, #1
 800170a:	6959      	ldr	r1, [r3, #20]
 800170c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8001710:	2207      	movs	r2, #7
 8001712:	4082      	lsls	r2, r0
 8001714:	ea21 0102 	bic.w	r1, r1, r2
 8001718:	fa06 f200 	lsl.w	r2, r6, r0
 800171c:	430a      	orrs	r2, r1
 800171e:	615a      	str	r2, [r3, #20]
 8001720:	e7b9      	b.n	8001696 <HAL_ADC_ConfigChannel+0x1ce>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001722:	2c11      	cmp	r4, #17
 8001724:	d104      	bne.n	8001730 <HAL_ADC_ConfigChannel+0x268>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001726:	4a24      	ldr	r2, [pc, #144]	; (80017b8 <HAL_ADC_ConfigChannel+0x2f0>)
 8001728:	6892      	ldr	r2, [r2, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800172a:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 800172e:	e7b8      	b.n	80016a2 <HAL_ADC_ConfigChannel+0x1da>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001730:	2c12      	cmp	r4, #18
 8001732:	f47f af5d 	bne.w	80015f0 <HAL_ADC_ConfigChannel+0x128>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001736:	4a20      	ldr	r2, [pc, #128]	; (80017b8 <HAL_ADC_ConfigChannel+0x2f0>)
 8001738:	6892      	ldr	r2, [r2, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800173a:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 800173e:	e7b0      	b.n	80016a2 <HAL_ADC_ConfigChannel+0x1da>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001740:	2c11      	cmp	r4, #17
 8001742:	d109      	bne.n	8001758 <HAL_ADC_ConfigChannel+0x290>
 8001744:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001748:	f47f af52 	bne.w	80015f0 <HAL_ADC_ConfigChannel+0x128>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800174c:	4a1a      	ldr	r2, [pc, #104]	; (80017b8 <HAL_ADC_ConfigChannel+0x2f0>)
 800174e:	6893      	ldr	r3, [r2, #8]
 8001750:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001754:	6093      	str	r3, [r2, #8]
 8001756:	e74b      	b.n	80015f0 <HAL_ADC_ConfigChannel+0x128>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001758:	2c12      	cmp	r4, #18
 800175a:	f47f af49 	bne.w	80015f0 <HAL_ADC_ConfigChannel+0x128>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800175e:	4a16      	ldr	r2, [pc, #88]	; (80017b8 <HAL_ADC_ConfigChannel+0x2f0>)
 8001760:	6893      	ldr	r3, [r2, #8]
 8001762:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001766:	e7f5      	b.n	8001754 <HAL_ADC_ConfigChannel+0x28c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001768:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800176a:	f043 0320 	orr.w	r3, r3, #32
 800176e:	646b      	str	r3, [r5, #68]	; 0x44
        tmp_hal_status = HAL_ERROR;
 8001770:	2001      	movs	r0, #1
 8001772:	e73e      	b.n	80015f2 <HAL_ADC_ConfigChannel+0x12a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001774:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001776:	f043 0320 	orr.w	r3, r3, #32
 800177a:	646b      	str	r3, [r5, #68]	; 0x44
 800177c:	e739      	b.n	80015f2 <HAL_ADC_ConfigChannel+0x12a>
  __HAL_LOCK(hadc);
 800177e:	2002      	movs	r0, #2
 8001780:	e73a      	b.n	80015f8 <HAL_ADC_ConfigChannel+0x130>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001782:	2e01      	cmp	r6, #1
 8001784:	f47f af7f 	bne.w	8001686 <HAL_ADC_ConfigChannel+0x1be>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001788:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800178c:	40a6      	lsls	r6, r4
 800178e:	4316      	orrs	r6, r2
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001790:	2c09      	cmp	r4, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001792:	f8c3 60b0 	str.w	r6, [r3, #176]	; 0xb0
 8001796:	688e      	ldr	r6, [r1, #8]
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001798:	d9b6      	bls.n	8001708 <HAL_ADC_ConfigChannel+0x240>
        MODIFY_REG(hadc->Instance->SMPR2,
 800179a:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800179e:	6999      	ldr	r1, [r3, #24]
 80017a0:	3a1b      	subs	r2, #27
 80017a2:	2007      	movs	r0, #7
 80017a4:	4090      	lsls	r0, r2
 80017a6:	ea21 0100 	bic.w	r1, r1, r0
 80017aa:	fa06 f202 	lsl.w	r2, r6, r2
 80017ae:	430a      	orrs	r2, r1
 80017b0:	619a      	str	r2, [r3, #24]
 80017b2:	e770      	b.n	8001696 <HAL_ADC_ConfigChannel+0x1ce>
 80017b4:	83fff000 	.word	0x83fff000
 80017b8:	50000300 	.word	0x50000300
 80017bc:	50000100 	.word	0x50000100
 80017c0:	20000008 	.word	0x20000008
 80017c4:	000f4240 	.word	0x000f4240

080017c8 <HAL_ADCEx_MultiModeConfigChannel>:
{
 80017c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017ca:	4603      	mov	r3, r0
 80017cc:	b097      	sub	sp, #92	; 0x5c
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80017ce:	681c      	ldr	r4, [r3, #0]
  if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80017d0:	6808      	ldr	r0, [r1, #0]
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80017d2:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 80017d6:	bf0c      	ite	eq
 80017d8:	4a33      	ldreq	r2, [pc, #204]	; (80018a8 <HAL_ADCEx_MultiModeConfigChannel+0xe0>)
 80017da:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
 80017de:	9201      	str	r2, [sp, #4]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80017e0:	9a01      	ldr	r2, [sp, #4]
 80017e2:	2a00      	cmp	r2, #0
 80017e4:	d049      	beq.n	800187a <HAL_ADCEx_MultiModeConfigChannel+0xb2>
  __HAL_LOCK(hadc);
 80017e6:	f893 5040 	ldrb.w	r5, [r3, #64]	; 0x40
 80017ea:	2d01      	cmp	r5, #1
 80017ec:	d047      	beq.n	800187e <HAL_ADCEx_MultiModeConfigChannel+0xb6>
 80017ee:	2501      	movs	r5, #1
 80017f0:	f883 5040 	strb.w	r5, [r3, #64]	; 0x40
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80017f4:	68a5      	ldr	r5, [r4, #8]
 80017f6:	076f      	lsls	r7, r5, #29
 80017f8:	d435      	bmi.n	8001866 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80017fa:	6895      	ldr	r5, [r2, #8]
 80017fc:	076e      	lsls	r6, r5, #29
 80017fe:	d432      	bmi.n	8001866 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8001800:	4e2a      	ldr	r6, [pc, #168]	; (80018ac <HAL_ADCEx_MultiModeConfigChannel+0xe4>)
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001802:	b1a0      	cbz	r0, 800182e <HAL_ADCEx_MultiModeConfigChannel+0x66>
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001804:	684d      	ldr	r5, [r1, #4]
 8001806:	f8d6 e008 	ldr.w	lr, [r6, #8]
 800180a:	462f      	mov	r7, r5
 800180c:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 800180e:	ea47 3545 	orr.w	r5, r7, r5, lsl #13
 8001812:	f42e 4760 	bic.w	r7, lr, #57344	; 0xe000
 8001816:	433d      	orrs	r5, r7
 8001818:	60b5      	str	r5, [r6, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800181a:	68a5      	ldr	r5, [r4, #8]
 800181c:	f005 0503 	and.w	r5, r5, #3
 8001820:	2d01      	cmp	r5, #1
 8001822:	d12e      	bne.n	8001882 <HAL_ADCEx_MultiModeConfigChannel+0xba>
 8001824:	6824      	ldr	r4, [r4, #0]
 8001826:	07e5      	lsls	r5, r4, #31
 8001828:	d52b      	bpl.n	8001882 <HAL_ADCEx_MultiModeConfigChannel+0xba>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800182a:	2000      	movs	r0, #0
 800182c:	e020      	b.n	8001870 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800182e:	68b1      	ldr	r1, [r6, #8]
 8001830:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 8001834:	60b1      	str	r1, [r6, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001836:	68a1      	ldr	r1, [r4, #8]
 8001838:	f001 0103 	and.w	r1, r1, #3
 800183c:	2901      	cmp	r1, #1
 800183e:	d102      	bne.n	8001846 <HAL_ADCEx_MultiModeConfigChannel+0x7e>
 8001840:	6821      	ldr	r1, [r4, #0]
 8001842:	07c9      	lsls	r1, r1, #31
 8001844:	d4f1      	bmi.n	800182a <HAL_ADCEx_MultiModeConfigChannel+0x62>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001846:	6891      	ldr	r1, [r2, #8]
 8001848:	f001 0103 	and.w	r1, r1, #3
 800184c:	2901      	cmp	r1, #1
 800184e:	d102      	bne.n	8001856 <HAL_ADCEx_MultiModeConfigChannel+0x8e>
 8001850:	6812      	ldr	r2, [r2, #0]
 8001852:	07d2      	lsls	r2, r2, #31
 8001854:	d4e9      	bmi.n	800182a <HAL_ADCEx_MultiModeConfigChannel+0x62>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001856:	4915      	ldr	r1, [pc, #84]	; (80018ac <HAL_ADCEx_MultiModeConfigChannel+0xe4>)
 8001858:	688a      	ldr	r2, [r1, #8]
 800185a:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 800185e:	f022 020f 	bic.w	r2, r2, #15
 8001862:	608a      	str	r2, [r1, #8]
 8001864:	e7e1      	b.n	800182a <HAL_ADCEx_MultiModeConfigChannel+0x62>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001866:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001868:	f042 0220 	orr.w	r2, r2, #32
 800186c:	645a      	str	r2, [r3, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 800186e:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8001870:	2200      	movs	r2, #0
 8001872:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
} 
 8001876:	b017      	add	sp, #92	; 0x5c
 8001878:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800187a:	2001      	movs	r0, #1
 800187c:	e7fb      	b.n	8001876 <HAL_ADCEx_MultiModeConfigChannel+0xae>
  __HAL_LOCK(hadc);
 800187e:	2002      	movs	r0, #2
 8001880:	e7f9      	b.n	8001876 <HAL_ADCEx_MultiModeConfigChannel+0xae>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001882:	6894      	ldr	r4, [r2, #8]
 8001884:	f004 0403 	and.w	r4, r4, #3
 8001888:	2c01      	cmp	r4, #1
 800188a:	d102      	bne.n	8001892 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800188c:	6812      	ldr	r2, [r2, #0]
 800188e:	07d4      	lsls	r4, r2, #31
 8001890:	d4cb      	bmi.n	800182a <HAL_ADCEx_MultiModeConfigChannel+0x62>
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001892:	4c06      	ldr	r4, [pc, #24]	; (80018ac <HAL_ADCEx_MultiModeConfigChannel+0xe4>)
 8001894:	6889      	ldr	r1, [r1, #8]
 8001896:	68a2      	ldr	r2, [r4, #8]
 8001898:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 800189c:	4308      	orrs	r0, r1
 800189e:	f022 020f 	bic.w	r2, r2, #15
 80018a2:	4310      	orrs	r0, r2
 80018a4:	60a0      	str	r0, [r4, #8]
 80018a6:	e7c0      	b.n	800182a <HAL_ADCEx_MultiModeConfigChannel+0x62>
 80018a8:	50000100 	.word	0x50000100
 80018ac:	50000300 	.word	0x50000300

080018b0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018b0:	4a07      	ldr	r2, [pc, #28]	; (80018d0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80018b2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018b4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80018b8:	041b      	lsls	r3, r3, #16
 80018ba:	0c1b      	lsrs	r3, r3, #16
 80018bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80018c0:	0200      	lsls	r0, r0, #8
 80018c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018c6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80018ca:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80018cc:	60d3      	str	r3, [r2, #12]
 80018ce:	4770      	bx	lr
 80018d0:	e000ed00 	.word	0xe000ed00

080018d4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018d4:	4b17      	ldr	r3, [pc, #92]	; (8001934 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018d6:	b530      	push	{r4, r5, lr}
 80018d8:	68dc      	ldr	r4, [r3, #12]
 80018da:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018de:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018e2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018e4:	2b04      	cmp	r3, #4
 80018e6:	bf28      	it	cs
 80018e8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ea:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ec:	f04f 0501 	mov.w	r5, #1
 80018f0:	fa05 f303 	lsl.w	r3, r5, r3
 80018f4:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018f8:	bf8c      	ite	hi
 80018fa:	3c03      	subhi	r4, #3
 80018fc:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018fe:	4019      	ands	r1, r3
 8001900:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001902:	fa05 f404 	lsl.w	r4, r5, r4
 8001906:	3c01      	subs	r4, #1
 8001908:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800190a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800190c:	ea42 0201 	orr.w	r2, r2, r1
 8001910:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001914:	bfaf      	iteee	ge
 8001916:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800191a:	f000 000f 	andlt.w	r0, r0, #15
 800191e:	4b06      	ldrlt	r3, [pc, #24]	; (8001938 <HAL_NVIC_SetPriority+0x64>)
 8001920:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001922:	bfa5      	ittet	ge
 8001924:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8001928:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800192a:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800192c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001930:	bd30      	pop	{r4, r5, pc}
 8001932:	bf00      	nop
 8001934:	e000ed00 	.word	0xe000ed00
 8001938:	e000ed14 	.word	0xe000ed14

0800193c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800193c:	0942      	lsrs	r2, r0, #5
 800193e:	2301      	movs	r3, #1
 8001940:	f000 001f 	and.w	r0, r0, #31
 8001944:	fa03 f000 	lsl.w	r0, r3, r0
 8001948:	4b01      	ldr	r3, [pc, #4]	; (8001950 <HAL_NVIC_EnableIRQ+0x14>)
 800194a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800194e:	4770      	bx	lr
 8001950:	e000e100 	.word	0xe000e100

08001954 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001954:	3801      	subs	r0, #1
 8001956:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800195a:	d20a      	bcs.n	8001972 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800195c:	4b06      	ldr	r3, [pc, #24]	; (8001978 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800195e:	4a07      	ldr	r2, [pc, #28]	; (800197c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001960:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001962:	21f0      	movs	r1, #240	; 0xf0
 8001964:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001968:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800196a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800196c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001972:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	e000e010 	.word	0xe000e010
 800197c:	e000ed00 	.word	0xe000ed00

08001980 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001980:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 8001984:	2a02      	cmp	r2, #2
{  
 8001986:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001988:	d003      	beq.n	8001992 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800198a:	2204      	movs	r2, #4
 800198c:	6382      	str	r2, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 800198e:	2001      	movs	r0, #1
 8001990:	bd10      	pop	{r4, pc}
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001992:	6802      	ldr	r2, [r0, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001994:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001996:	6811      	ldr	r1, [r2, #0]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001998:	6b43      	ldr	r3, [r0, #52]	; 0x34
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800199a:	f021 010e 	bic.w	r1, r1, #14
 800199e:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80019a0:	6811      	ldr	r1, [r2, #0]
 80019a2:	f021 0101 	bic.w	r1, r1, #1
 80019a6:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80019a8:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80019aa:	2101      	movs	r1, #1
 80019ac:	fa01 f202 	lsl.w	r2, r1, r2
 80019b0:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 80019b2:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 80019b4:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 80019b8:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80019bc:	b113      	cbz	r3, 80019c4 <HAL_DMA_Abort_IT+0x44>
    {
      hdma->XferAbortCallback(hdma);
 80019be:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80019c0:	4620      	mov	r0, r4
 80019c2:	bd10      	pop	{r4, pc}
 80019c4:	4618      	mov	r0, r3
    } 
  }
  return status;
}
 80019c6:	bd10      	pop	{r4, pc}

080019c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019cc:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80019ce:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019d0:	f8df 8164 	ldr.w	r8, [pc, #356]	; 8001b38 <HAL_GPIO_Init+0x170>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019d4:	4a56      	ldr	r2, [pc, #344]	; (8001b30 <HAL_GPIO_Init+0x168>)
  while (((GPIO_Init->Pin) >> position) != RESET)
 80019d6:	9301      	str	r3, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80019d8:	f04f 090f 	mov.w	r9, #15
  uint32_t position = 0x00U;
 80019dc:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 80019de:	9c01      	ldr	r4, [sp, #4]
 80019e0:	40dc      	lsrs	r4, r3
 80019e2:	d102      	bne.n	80019ea <HAL_GPIO_Init+0x22>
      }
    }
    
    position++;
  }
}
 80019e4:	b005      	add	sp, #20
 80019e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80019ea:	2401      	movs	r4, #1
 80019ec:	fa04 fa03 	lsl.w	sl, r4, r3
    if(iocurrent)
 80019f0:	9c01      	ldr	r4, [sp, #4]
 80019f2:	ea14 050a 	ands.w	r5, r4, sl
 80019f6:	f000 8093 	beq.w	8001b20 <HAL_GPIO_Init+0x158>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019fa:	684c      	ldr	r4, [r1, #4]
 80019fc:	f024 0b10 	bic.w	fp, r4, #16
 8001a00:	f1bb 0f02 	cmp.w	fp, #2
 8001a04:	d111      	bne.n	8001a2a <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 8001a06:	08df      	lsrs	r7, r3, #3
 8001a08:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a0c:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8001a10:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a12:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001a16:	fa09 fc0e 	lsl.w	ip, r9, lr
 8001a1a:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a1e:	690e      	ldr	r6, [r1, #16]
 8001a20:	fa06 f60e 	lsl.w	r6, r6, lr
 8001a24:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3] = temp;
 8001a28:	623e      	str	r6, [r7, #32]
 8001a2a:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a2e:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 8001a30:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a32:	fa07 f70c 	lsl.w	r7, r7, ip
 8001a36:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a38:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a3c:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a3e:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a42:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a46:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a4a:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 8001a4e:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a50:	d811      	bhi.n	8001a76 <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 8001a52:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a54:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a58:	68ce      	ldr	r6, [r1, #12]
 8001a5a:	fa06 fe0c 	lsl.w	lr, r6, ip
 8001a5e:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 8001a62:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8001a64:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a66:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a6a:	f3c4 1600 	ubfx	r6, r4, #4, #1
 8001a6e:	409e      	lsls	r6, r3
 8001a70:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 8001a74:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8001a76:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a78:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a7a:	688e      	ldr	r6, [r1, #8]
 8001a7c:	fa06 f60c 	lsl.w	r6, r6, ip
 8001a80:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a82:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 8001a84:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a86:	d54b      	bpl.n	8001b20 <HAL_GPIO_Init+0x158>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a88:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8001a8c:	f046 0601 	orr.w	r6, r6, #1
 8001a90:	f8c8 6018 	str.w	r6, [r8, #24]
 8001a94:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8001a98:	f023 0703 	bic.w	r7, r3, #3
 8001a9c:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001aa0:	f006 0601 	and.w	r6, r6, #1
 8001aa4:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8001aa8:	9603      	str	r6, [sp, #12]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001aaa:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aae:	9e03      	ldr	r6, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8001ab0:	68be      	ldr	r6, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001ab2:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001ab6:	fa09 fc0e 	lsl.w	ip, r9, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001aba:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001abe:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001ac2:	d02f      	beq.n	8001b24 <HAL_GPIO_Init+0x15c>
 8001ac4:	4e1b      	ldr	r6, [pc, #108]	; (8001b34 <HAL_GPIO_Init+0x16c>)
 8001ac6:	42b0      	cmp	r0, r6
 8001ac8:	d02e      	beq.n	8001b28 <HAL_GPIO_Init+0x160>
 8001aca:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001ace:	42b0      	cmp	r0, r6
 8001ad0:	d02c      	beq.n	8001b2c <HAL_GPIO_Init+0x164>
 8001ad2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001ad6:	42b0      	cmp	r0, r6
 8001ad8:	bf14      	ite	ne
 8001ada:	2605      	movne	r6, #5
 8001adc:	2603      	moveq	r6, #3
 8001ade:	fa06 f60e 	lsl.w	r6, r6, lr
 8001ae2:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8001ae6:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8001ae8:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001aea:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001aec:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001af0:	bf0c      	ite	eq
 8001af2:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001af4:	432e      	orrne	r6, r5
        EXTI->IMR = temp;
 8001af6:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 8001af8:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001afa:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001afe:	bf0c      	ite	eq
 8001b00:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001b02:	432e      	orrne	r6, r5
        EXTI->EMR = temp;
 8001b04:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 8001b06:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b08:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001b0c:	bf0c      	ite	eq
 8001b0e:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001b10:	432e      	orrne	r6, r5
        EXTI->RTSR = temp;
 8001b12:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 8001b14:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b16:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001b18:	bf54      	ite	pl
 8001b1a:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8001b1c:	432e      	orrmi	r6, r5
        EXTI->FTSR = temp;
 8001b1e:	60d6      	str	r6, [r2, #12]
    position++;
 8001b20:	3301      	adds	r3, #1
 8001b22:	e75c      	b.n	80019de <HAL_GPIO_Init+0x16>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001b24:	2600      	movs	r6, #0
 8001b26:	e7da      	b.n	8001ade <HAL_GPIO_Init+0x116>
 8001b28:	2601      	movs	r6, #1
 8001b2a:	e7d8      	b.n	8001ade <HAL_GPIO_Init+0x116>
 8001b2c:	2602      	movs	r6, #2
 8001b2e:	e7d6      	b.n	8001ade <HAL_GPIO_Init+0x116>
 8001b30:	40010400 	.word	0x40010400
 8001b34:	48000400 	.word	0x48000400
 8001b38:	40021000 	.word	0x40021000

08001b3c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b3c:	b10a      	cbz	r2, 8001b42 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b3e:	6181      	str	r1, [r0, #24]
 8001b40:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b42:	6281      	str	r1, [r0, #40]	; 0x28
 8001b44:	4770      	bx	lr

08001b46 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001b46:	6803      	ldr	r3, [r0, #0]
 8001b48:	699a      	ldr	r2, [r3, #24]
 8001b4a:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 8001b4c:	bf44      	itt	mi
 8001b4e:	2200      	movmi	r2, #0
 8001b50:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b52:	699a      	ldr	r2, [r3, #24]
 8001b54:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001b56:	bf5e      	ittt	pl
 8001b58:	699a      	ldrpl	r2, [r3, #24]
 8001b5a:	f042 0201 	orrpl.w	r2, r2, #1
 8001b5e:	619a      	strpl	r2, [r3, #24]
 8001b60:	4770      	bx	lr

08001b62 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001b62:	b530      	push	{r4, r5, lr}
 8001b64:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8001b66:	6805      	ldr	r5, [r0, #0]
 8001b68:	4323      	orrs	r3, r4
 8001b6a:	0d64      	lsrs	r4, r4, #21
 8001b6c:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8001b70:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8001b74:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8001b78:	6868      	ldr	r0, [r5, #4]
 8001b7a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8001b7e:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8001b82:	4319      	orrs	r1, r3
 8001b84:	f044 0403 	orr.w	r4, r4, #3
 8001b88:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001b8c:	ea20 0404 	bic.w	r4, r0, r4
 8001b90:	4321      	orrs	r1, r4
 8001b92:	6069      	str	r1, [r5, #4]
 8001b94:	bd30      	pop	{r4, r5, pc}

08001b96 <I2C_WaitOnFlagUntilTimeout>:
{
 8001b96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b9a:	9f06      	ldr	r7, [sp, #24]
 8001b9c:	4604      	mov	r4, r0
 8001b9e:	4688      	mov	r8, r1
 8001ba0:	4616      	mov	r6, r2
 8001ba2:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ba4:	6822      	ldr	r2, [r4, #0]
 8001ba6:	6993      	ldr	r3, [r2, #24]
 8001ba8:	ea38 0303 	bics.w	r3, r8, r3
 8001bac:	bf0c      	ite	eq
 8001bae:	2301      	moveq	r3, #1
 8001bb0:	2300      	movne	r3, #0
 8001bb2:	42b3      	cmp	r3, r6
 8001bb4:	d002      	beq.n	8001bbc <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8001bb6:	2000      	movs	r0, #0
}
 8001bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001bbc:	1c6b      	adds	r3, r5, #1
 8001bbe:	d0f2      	beq.n	8001ba6 <I2C_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001bc0:	b955      	cbnz	r5, 8001bd8 <I2C_WaitOnFlagUntilTimeout+0x42>
        hi2c->State = HAL_I2C_STATE_READY;
 8001bc2:	2320      	movs	r3, #32
 8001bc4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8001bce:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 8001bd2:	2003      	movs	r0, #3
 8001bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001bd8:	f7ff fa1c 	bl	8001014 <HAL_GetTick>
 8001bdc:	1bc0      	subs	r0, r0, r7
 8001bde:	4285      	cmp	r5, r0
 8001be0:	d2e0      	bcs.n	8001ba4 <I2C_WaitOnFlagUntilTimeout+0xe>
 8001be2:	e7ee      	b.n	8001bc2 <I2C_WaitOnFlagUntilTimeout+0x2c>

08001be4 <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001be4:	6803      	ldr	r3, [r0, #0]
{
 8001be6:	b570      	push	{r4, r5, r6, lr}
 8001be8:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001bea:	6998      	ldr	r0, [r3, #24]
 8001bec:	f010 0010 	ands.w	r0, r0, #16
{
 8001bf0:	460d      	mov	r5, r1
 8001bf2:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001bf4:	d112      	bne.n	8001c1c <I2C_IsAcknowledgeFailed+0x38>
 8001bf6:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 8001bf8:	1c69      	adds	r1, r5, #1
 8001bfa:	d010      	beq.n	8001c1e <I2C_IsAcknowledgeFailed+0x3a>
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001bfc:	b94d      	cbnz	r5, 8001c12 <I2C_IsAcknowledgeFailed+0x2e>
          hi2c->State = HAL_I2C_STATE_READY;
 8001bfe:	2320      	movs	r3, #32
 8001c00:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c04:	2300      	movs	r3, #0
 8001c06:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8001c0a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          return HAL_TIMEOUT;
 8001c0e:	2003      	movs	r0, #3
 8001c10:	bd70      	pop	{r4, r5, r6, pc}
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001c12:	f7ff f9ff 	bl	8001014 <HAL_GetTick>
 8001c16:	1b80      	subs	r0, r0, r6
 8001c18:	4285      	cmp	r5, r0
 8001c1a:	d3f0      	bcc.n	8001bfe <I2C_IsAcknowledgeFailed+0x1a>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c1c:	6823      	ldr	r3, [r4, #0]
 8001c1e:	6999      	ldr	r1, [r3, #24]
 8001c20:	068a      	lsls	r2, r1, #26
 8001c22:	d5e9      	bpl.n	8001bf8 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c24:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c26:	2520      	movs	r5, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c28:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8001c2a:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c2c:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8001c2e:	f7ff ff8a 	bl	8001b46 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8001c32:	6822      	ldr	r2, [r4, #0]
 8001c34:	6853      	ldr	r3, [r2, #4]
 8001c36:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8001c3a:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8001c3e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001c42:	f023 0301 	bic.w	r3, r3, #1
 8001c46:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001c48:	2304      	movs	r3, #4
 8001c4a:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c4c:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001c4e:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001c52:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c56:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    return HAL_ERROR;
 8001c5a:	2001      	movs	r0, #1
}
 8001c5c:	bd70      	pop	{r4, r5, r6, pc}

08001c5e <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8001c5e:	b570      	push	{r4, r5, r6, lr}
 8001c60:	4604      	mov	r4, r0
 8001c62:	460d      	mov	r5, r1
 8001c64:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c66:	6823      	ldr	r3, [r4, #0]
 8001c68:	699b      	ldr	r3, [r3, #24]
 8001c6a:	079b      	lsls	r3, r3, #30
 8001c6c:	d501      	bpl.n	8001c72 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8001c6e:	2000      	movs	r0, #0
 8001c70:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c72:	4632      	mov	r2, r6
 8001c74:	4629      	mov	r1, r5
 8001c76:	4620      	mov	r0, r4
 8001c78:	f7ff ffb4 	bl	8001be4 <I2C_IsAcknowledgeFailed>
 8001c7c:	b9b0      	cbnz	r0, 8001cac <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 8001c7e:	1c6a      	adds	r2, r5, #1
 8001c80:	d0f1      	beq.n	8001c66 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001c82:	b96d      	cbnz	r5, 8001ca0 <I2C_WaitOnTXISFlagUntilTimeout+0x42>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c84:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001c86:	f043 0320 	orr.w	r3, r3, #32
 8001c8a:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001c8c:	2320      	movs	r3, #32
 8001c8e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c92:	2300      	movs	r3, #0
 8001c94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001c98:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001c9c:	2003      	movs	r0, #3
 8001c9e:	bd70      	pop	{r4, r5, r6, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001ca0:	f7ff f9b8 	bl	8001014 <HAL_GetTick>
 8001ca4:	1b80      	subs	r0, r0, r6
 8001ca6:	4285      	cmp	r5, r0
 8001ca8:	d2dd      	bcs.n	8001c66 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
 8001caa:	e7eb      	b.n	8001c84 <I2C_WaitOnTXISFlagUntilTimeout+0x26>
      return HAL_ERROR;
 8001cac:	2001      	movs	r0, #1
}
 8001cae:	bd70      	pop	{r4, r5, r6, pc}

08001cb0 <I2C_RequestMemoryWrite>:
{
 8001cb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001cb2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8001cb4:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001cb6:	4b18      	ldr	r3, [pc, #96]	; (8001d18 <I2C_RequestMemoryWrite+0x68>)
 8001cb8:	9300      	str	r3, [sp, #0]
{
 8001cba:	4604      	mov	r4, r0
 8001cbc:	4615      	mov	r5, r2
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001cbe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001cc2:	b2fa      	uxtb	r2, r7
 8001cc4:	f7ff ff4d 	bl	8001b62 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cc8:	4632      	mov	r2, r6
 8001cca:	9908      	ldr	r1, [sp, #32]
 8001ccc:	4620      	mov	r0, r4
 8001cce:	f7ff ffc6 	bl	8001c5e <I2C_WaitOnTXISFlagUntilTimeout>
 8001cd2:	b128      	cbz	r0, 8001ce0 <I2C_RequestMemoryWrite+0x30>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cd4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001cd6:	2b04      	cmp	r3, #4
 8001cd8:	d110      	bne.n	8001cfc <I2C_RequestMemoryWrite+0x4c>
      return HAL_ERROR;
 8001cda:	2001      	movs	r0, #1
}
 8001cdc:	b003      	add	sp, #12
 8001cde:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001ce0:	2f01      	cmp	r7, #1
 8001ce2:	6823      	ldr	r3, [r4, #0]
 8001ce4:	d10c      	bne.n	8001d00 <I2C_RequestMemoryWrite+0x50>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ce6:	b2ed      	uxtb	r5, r5
 8001ce8:	629d      	str	r5, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001cea:	9b08      	ldr	r3, [sp, #32]
 8001cec:	9600      	str	r6, [sp, #0]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	2180      	movs	r1, #128	; 0x80
 8001cf2:	4620      	mov	r0, r4
 8001cf4:	f7ff ff4f 	bl	8001b96 <I2C_WaitOnFlagUntilTimeout>
 8001cf8:	2800      	cmp	r0, #0
 8001cfa:	d0ef      	beq.n	8001cdc <I2C_RequestMemoryWrite+0x2c>
      return HAL_TIMEOUT;
 8001cfc:	2003      	movs	r0, #3
 8001cfe:	e7ed      	b.n	8001cdc <I2C_RequestMemoryWrite+0x2c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001d00:	0a2a      	lsrs	r2, r5, #8
 8001d02:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d04:	9908      	ldr	r1, [sp, #32]
 8001d06:	4632      	mov	r2, r6
 8001d08:	4620      	mov	r0, r4
 8001d0a:	f7ff ffa8 	bl	8001c5e <I2C_WaitOnTXISFlagUntilTimeout>
 8001d0e:	2800      	cmp	r0, #0
 8001d10:	d1e0      	bne.n	8001cd4 <I2C_RequestMemoryWrite+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001d12:	6823      	ldr	r3, [r4, #0]
 8001d14:	e7e7      	b.n	8001ce6 <I2C_RequestMemoryWrite+0x36>
 8001d16:	bf00      	nop
 8001d18:	80002000 	.word	0x80002000

08001d1c <I2C_RequestMemoryRead>:
{
 8001d1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001d1e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8001d20:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001d22:	4b17      	ldr	r3, [pc, #92]	; (8001d80 <I2C_RequestMemoryRead+0x64>)
 8001d24:	9300      	str	r3, [sp, #0]
{
 8001d26:	4604      	mov	r4, r0
 8001d28:	4615      	mov	r5, r2
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	b2fa      	uxtb	r2, r7
 8001d2e:	f7ff ff18 	bl	8001b62 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d32:	4632      	mov	r2, r6
 8001d34:	9908      	ldr	r1, [sp, #32]
 8001d36:	4620      	mov	r0, r4
 8001d38:	f7ff ff91 	bl	8001c5e <I2C_WaitOnTXISFlagUntilTimeout>
 8001d3c:	b128      	cbz	r0, 8001d4a <I2C_RequestMemoryRead+0x2e>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d3e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001d40:	2b04      	cmp	r3, #4
 8001d42:	d110      	bne.n	8001d66 <I2C_RequestMemoryRead+0x4a>
      return HAL_ERROR;
 8001d44:	2001      	movs	r0, #1
}
 8001d46:	b003      	add	sp, #12
 8001d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001d4a:	2f01      	cmp	r7, #1
 8001d4c:	6823      	ldr	r3, [r4, #0]
 8001d4e:	d10c      	bne.n	8001d6a <I2C_RequestMemoryRead+0x4e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001d50:	b2ed      	uxtb	r5, r5
 8001d52:	629d      	str	r5, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001d54:	9b08      	ldr	r3, [sp, #32]
 8001d56:	9600      	str	r6, [sp, #0]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	2140      	movs	r1, #64	; 0x40
 8001d5c:	4620      	mov	r0, r4
 8001d5e:	f7ff ff1a 	bl	8001b96 <I2C_WaitOnFlagUntilTimeout>
 8001d62:	2800      	cmp	r0, #0
 8001d64:	d0ef      	beq.n	8001d46 <I2C_RequestMemoryRead+0x2a>
      return HAL_TIMEOUT;
 8001d66:	2003      	movs	r0, #3
 8001d68:	e7ed      	b.n	8001d46 <I2C_RequestMemoryRead+0x2a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001d6a:	0a2a      	lsrs	r2, r5, #8
 8001d6c:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d6e:	9908      	ldr	r1, [sp, #32]
 8001d70:	4632      	mov	r2, r6
 8001d72:	4620      	mov	r0, r4
 8001d74:	f7ff ff73 	bl	8001c5e <I2C_WaitOnTXISFlagUntilTimeout>
 8001d78:	2800      	cmp	r0, #0
 8001d7a:	d1e0      	bne.n	8001d3e <I2C_RequestMemoryRead+0x22>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001d7c:	6823      	ldr	r3, [r4, #0]
 8001d7e:	e7e7      	b.n	8001d50 <I2C_RequestMemoryRead+0x34>
 8001d80:	80002000 	.word	0x80002000

08001d84 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8001d84:	b570      	push	{r4, r5, r6, lr}
 8001d86:	4604      	mov	r4, r0
 8001d88:	460d      	mov	r5, r1
 8001d8a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d8c:	6823      	ldr	r3, [r4, #0]
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	069b      	lsls	r3, r3, #26
 8001d92:	d501      	bpl.n	8001d98 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8001d94:	2000      	movs	r0, #0
 8001d96:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d98:	4632      	mov	r2, r6
 8001d9a:	4629      	mov	r1, r5
 8001d9c:	4620      	mov	r0, r4
 8001d9e:	f7ff ff21 	bl	8001be4 <I2C_IsAcknowledgeFailed>
 8001da2:	b9a0      	cbnz	r0, 8001dce <I2C_WaitOnSTOPFlagUntilTimeout+0x4a>
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001da4:	b96d      	cbnz	r5, 8001dc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x3e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001da6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001da8:	f043 0320 	orr.w	r3, r3, #32
 8001dac:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001dae:	2320      	movs	r3, #32
 8001db0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001db4:	2300      	movs	r3, #0
 8001db6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001dba:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001dbe:	2003      	movs	r0, #3
 8001dc0:	bd70      	pop	{r4, r5, r6, pc}
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001dc2:	f7ff f927 	bl	8001014 <HAL_GetTick>
 8001dc6:	1b80      	subs	r0, r0, r6
 8001dc8:	4285      	cmp	r5, r0
 8001dca:	d2df      	bcs.n	8001d8c <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
 8001dcc:	e7eb      	b.n	8001da6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8001dce:	2001      	movs	r0, #1
}
 8001dd0:	bd70      	pop	{r4, r5, r6, pc}

08001dd2 <HAL_I2C_Init>:
{
 8001dd2:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8001dd4:	4604      	mov	r4, r0
 8001dd6:	2800      	cmp	r0, #0
 8001dd8:	d04a      	beq.n	8001e70 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dda:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001dde:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001de2:	b91b      	cbnz	r3, 8001dec <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8001de4:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8001de8:	f003 fad4 	bl	8005394 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001dec:	2324      	movs	r3, #36	; 0x24
 8001dee:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8001df2:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001df4:	68e1      	ldr	r1, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	f022 0201 	bic.w	r2, r2, #1
 8001dfc:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001dfe:	6862      	ldr	r2, [r4, #4]
 8001e00:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e04:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e06:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e08:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e0a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e0e:	609a      	str	r2, [r3, #8]
 8001e10:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e12:	d124      	bne.n	8001e5e <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e14:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e18:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e1a:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001e1c:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e1e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001e22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e26:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e28:	68da      	ldr	r2, [r3, #12]
 8001e2a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e2e:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001e30:	6922      	ldr	r2, [r4, #16]
 8001e32:	430a      	orrs	r2, r1
 8001e34:	69a1      	ldr	r1, [r4, #24]
 8001e36:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001e3a:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e3c:	6a21      	ldr	r1, [r4, #32]
 8001e3e:	69e2      	ldr	r2, [r4, #28]
 8001e40:	430a      	orrs	r2, r1
 8001e42:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	f042 0201 	orr.w	r2, r2, #1
 8001e4a:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e4c:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8001e4e:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e50:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e52:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e56:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e58:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 8001e5c:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e5e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e62:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e64:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001e66:	bf04      	itt	eq
 8001e68:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8001e6c:	605a      	streq	r2, [r3, #4]
 8001e6e:	e7d4      	b.n	8001e1a <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8001e70:	2001      	movs	r0, #1
}
 8001e72:	bd10      	pop	{r4, pc}

08001e74 <HAL_I2C_Mem_Write>:
{
 8001e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e78:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e7a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8001e7e:	b085      	sub	sp, #20
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e80:	2b20      	cmp	r3, #32
{
 8001e82:	4604      	mov	r4, r0
 8001e84:	460f      	mov	r7, r1
 8001e86:	9203      	str	r2, [sp, #12]
 8001e88:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8001e8c:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e90:	f040 80a6 	bne.w	8001fe0 <HAL_I2C_Mem_Write+0x16c>
    if ((pData == NULL) || (Size == 0U))
 8001e94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001e96:	b91b      	cbnz	r3, 8001ea0 <HAL_I2C_Mem_Write+0x2c>
      return  HAL_ERROR;
 8001e98:	2001      	movs	r0, #1
}
 8001e9a:	b005      	add	sp, #20
 8001e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pData == NULL) || (Size == 0U))
 8001ea0:	f1ba 0f00 	cmp.w	sl, #0
 8001ea4:	d0f8      	beq.n	8001e98 <HAL_I2C_Mem_Write+0x24>
    __HAL_LOCK(hi2c);
 8001ea6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	f000 8098 	beq.w	8001fe0 <HAL_I2C_Mem_Write+0x16c>
 8001eb0:	2501      	movs	r5, #1
 8001eb2:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8001eb6:	f7ff f8ad 	bl	8001014 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001eba:	2319      	movs	r3, #25
 8001ebc:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8001ebe:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001ec0:	462a      	mov	r2, r5
 8001ec2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ec6:	4620      	mov	r0, r4
 8001ec8:	f7ff fe65 	bl	8001b96 <I2C_WaitOnFlagUntilTimeout>
 8001ecc:	4680      	mov	r8, r0
 8001ece:	b9d0      	cbnz	r0, 8001f06 <HAL_I2C_Mem_Write+0x92>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001ed0:	2321      	movs	r3, #33	; 0x21
 8001ed2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ed6:	2340      	movs	r3, #64	; 0x40
 8001ed8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8001edc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ede:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8001ee0:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 8001ee2:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8001ee4:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001ee8:	9601      	str	r6, [sp, #4]
 8001eea:	f8cd 9000 	str.w	r9, [sp]
 8001eee:	465b      	mov	r3, fp
 8001ef0:	9a03      	ldr	r2, [sp, #12]
 8001ef2:	4639      	mov	r1, r7
 8001ef4:	4620      	mov	r0, r4
 8001ef6:	f7ff fedb 	bl	8001cb0 <I2C_RequestMemoryWrite>
 8001efa:	b130      	cbz	r0, 8001f0a <HAL_I2C_Mem_Write+0x96>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001efc:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8001efe:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f02:	2b04      	cmp	r3, #4
 8001f04:	d0c8      	beq.n	8001e98 <HAL_I2C_Mem_Write+0x24>
          return HAL_TIMEOUT;
 8001f06:	2003      	movs	r0, #3
 8001f08:	e7c7      	b.n	8001e9a <HAL_I2C_Mem_Write+0x26>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f0a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	2bff      	cmp	r3, #255	; 0xff
 8001f10:	d910      	bls.n	8001f34 <HAL_I2C_Mem_Write+0xc0>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f12:	22ff      	movs	r2, #255	; 0xff
 8001f14:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001f16:	9000      	str	r0, [sp, #0]
 8001f18:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001f1c:	4639      	mov	r1, r7
 8001f1e:	4620      	mov	r0, r4
 8001f20:	f7ff fe1f 	bl	8001b62 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f24:	4632      	mov	r2, r6
 8001f26:	4649      	mov	r1, r9
 8001f28:	4620      	mov	r0, r4
 8001f2a:	f7ff fe98 	bl	8001c5e <I2C_WaitOnTXISFlagUntilTimeout>
 8001f2e:	b148      	cbz	r0, 8001f44 <HAL_I2C_Mem_Write+0xd0>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f30:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001f32:	e7e6      	b.n	8001f02 <HAL_I2C_Mem_Write+0x8e>
      hi2c->XferSize = hi2c->XferCount;
 8001f34:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001f36:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8001f38:	b292      	uxth	r2, r2
 8001f3a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001f3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f40:	b2d2      	uxtb	r2, r2
 8001f42:	e7eb      	b.n	8001f1c <HAL_I2C_Mem_Write+0xa8>
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8001f44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f46:	6822      	ldr	r2, [r4, #0]
 8001f48:	1c59      	adds	r1, r3, #1
 8001f4a:	6261      	str	r1, [r4, #36]	; 0x24
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 8001f50:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001f52:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001f54:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8001f56:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8001f58:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8001f5a:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8001f5c:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001f5e:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8001f60:	b9ba      	cbnz	r2, 8001f92 <HAL_I2C_Mem_Write+0x11e>
 8001f62:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	b1a3      	cbz	r3, 8001f92 <HAL_I2C_Mem_Write+0x11e>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001f68:	9600      	str	r6, [sp, #0]
 8001f6a:	464b      	mov	r3, r9
 8001f6c:	2180      	movs	r1, #128	; 0x80
 8001f6e:	4620      	mov	r0, r4
 8001f70:	f7ff fe11 	bl	8001b96 <I2C_WaitOnFlagUntilTimeout>
 8001f74:	2800      	cmp	r0, #0
 8001f76:	d1c6      	bne.n	8001f06 <HAL_I2C_Mem_Write+0x92>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f78:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	2bff      	cmp	r3, #255	; 0xff
 8001f7e:	d927      	bls.n	8001fd0 <HAL_I2C_Mem_Write+0x15c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f80:	22ff      	movs	r2, #255	; 0xff
 8001f82:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001f84:	9000      	str	r0, [sp, #0]
 8001f86:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001f8a:	4639      	mov	r1, r7
 8001f8c:	4620      	mov	r0, r4
 8001f8e:	f7ff fde8 	bl	8001b62 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8001f92:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1c4      	bne.n	8001f24 <HAL_I2C_Mem_Write+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f9a:	4632      	mov	r2, r6
 8001f9c:	4649      	mov	r1, r9
 8001f9e:	4620      	mov	r0, r4
 8001fa0:	f7ff fef0 	bl	8001d84 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001fa4:	2800      	cmp	r0, #0
 8001fa6:	d1c3      	bne.n	8001f30 <HAL_I2C_Mem_Write+0xbc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fa8:	6823      	ldr	r3, [r4, #0]
 8001faa:	2120      	movs	r1, #32
 8001fac:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001fae:	685a      	ldr	r2, [r3, #4]
 8001fb0:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8001fb4:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8001fb8:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8001fbc:	f022 0201 	bic.w	r2, r2, #1
 8001fc0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001fc2:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001fc6:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001fca:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8001fce:	e764      	b.n	8001e9a <HAL_I2C_Mem_Write+0x26>
          hi2c->XferSize = hi2c->XferCount;
 8001fd0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001fd2:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8001fd4:	b292      	uxth	r2, r2
 8001fd6:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001fd8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fdc:	b2d2      	uxtb	r2, r2
 8001fde:	e7d4      	b.n	8001f8a <HAL_I2C_Mem_Write+0x116>
    return HAL_BUSY;
 8001fe0:	2002      	movs	r0, #2
 8001fe2:	e75a      	b.n	8001e9a <HAL_I2C_Mem_Write+0x26>

08001fe4 <HAL_I2C_Mem_Read>:
{
 8001fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fe8:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fea:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8001fee:	b085      	sub	sp, #20
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ff0:	2b20      	cmp	r3, #32
{
 8001ff2:	4604      	mov	r4, r0
 8001ff4:	460f      	mov	r7, r1
 8001ff6:	9203      	str	r2, [sp, #12]
 8001ff8:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8001ffc:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002000:	f040 80a9 	bne.w	8002156 <HAL_I2C_Mem_Read+0x172>
    if ((pData == NULL) || (Size == 0U))
 8002004:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002006:	b91b      	cbnz	r3, 8002010 <HAL_I2C_Mem_Read+0x2c>
      return  HAL_ERROR;
 8002008:	2001      	movs	r0, #1
}
 800200a:	b005      	add	sp, #20
 800200c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pData == NULL) || (Size == 0U))
 8002010:	f1ba 0f00 	cmp.w	sl, #0
 8002014:	d0f8      	beq.n	8002008 <HAL_I2C_Mem_Read+0x24>
    __HAL_LOCK(hi2c);
 8002016:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800201a:	2b01      	cmp	r3, #1
 800201c:	f000 809b 	beq.w	8002156 <HAL_I2C_Mem_Read+0x172>
 8002020:	2501      	movs	r5, #1
 8002022:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8002026:	f7fe fff5 	bl	8001014 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800202a:	2319      	movs	r3, #25
 800202c:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 800202e:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002030:	462a      	mov	r2, r5
 8002032:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002036:	4620      	mov	r0, r4
 8002038:	f7ff fdad 	bl	8001b96 <I2C_WaitOnFlagUntilTimeout>
 800203c:	4680      	mov	r8, r0
 800203e:	b9d0      	cbnz	r0, 8002076 <HAL_I2C_Mem_Read+0x92>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002040:	2322      	movs	r3, #34	; 0x22
 8002042:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002046:	2340      	movs	r3, #64	; 0x40
 8002048:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 800204c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800204e:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8002050:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 8002052:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8002054:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002058:	9601      	str	r6, [sp, #4]
 800205a:	f8cd 9000 	str.w	r9, [sp]
 800205e:	465b      	mov	r3, fp
 8002060:	9a03      	ldr	r2, [sp, #12]
 8002062:	4639      	mov	r1, r7
 8002064:	4620      	mov	r0, r4
 8002066:	f7ff fe59 	bl	8001d1c <I2C_RequestMemoryRead>
 800206a:	b130      	cbz	r0, 800207a <HAL_I2C_Mem_Read+0x96>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800206c:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800206e:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002072:	2b04      	cmp	r3, #4
 8002074:	d0c8      	beq.n	8002008 <HAL_I2C_Mem_Read+0x24>
        return HAL_TIMEOUT;
 8002076:	2003      	movs	r0, #3
 8002078:	e7c7      	b.n	800200a <HAL_I2C_Mem_Read+0x26>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800207a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800207c:	b29b      	uxth	r3, r3
 800207e:	2bff      	cmp	r3, #255	; 0xff
 8002080:	4b36      	ldr	r3, [pc, #216]	; (800215c <HAL_I2C_Mem_Read+0x178>)
 8002082:	d944      	bls.n	800210e <HAL_I2C_Mem_Read+0x12a>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002084:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002086:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002088:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800208a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800208e:	4639      	mov	r1, r7
 8002090:	4620      	mov	r0, r4
 8002092:	f7ff fd66 	bl	8001b62 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002096:	9600      	str	r6, [sp, #0]
 8002098:	464b      	mov	r3, r9
 800209a:	2200      	movs	r2, #0
 800209c:	2104      	movs	r1, #4
 800209e:	4620      	mov	r0, r4
 80020a0:	f7ff fd79 	bl	8001b96 <I2C_WaitOnFlagUntilTimeout>
 80020a4:	2800      	cmp	r0, #0
 80020a6:	d1e6      	bne.n	8002076 <HAL_I2C_Mem_Read+0x92>
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 80020a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80020aa:	1c5a      	adds	r2, r3, #1
 80020ac:	6262      	str	r2, [r4, #36]	; 0x24
 80020ae:	6822      	ldr	r2, [r4, #0]
 80020b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80020b2:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 80020b4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80020b6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80020b8:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 80020ba:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 80020bc:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 80020be:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 80020c0:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80020c2:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 80020c4:	b9ba      	cbnz	r2, 80020f6 <HAL_I2C_Mem_Read+0x112>
 80020c6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	b1a3      	cbz	r3, 80020f6 <HAL_I2C_Mem_Read+0x112>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80020cc:	9600      	str	r6, [sp, #0]
 80020ce:	464b      	mov	r3, r9
 80020d0:	2180      	movs	r1, #128	; 0x80
 80020d2:	4620      	mov	r0, r4
 80020d4:	f7ff fd5f 	bl	8001b96 <I2C_WaitOnFlagUntilTimeout>
 80020d8:	2800      	cmp	r0, #0
 80020da:	d1cc      	bne.n	8002076 <HAL_I2C_Mem_Read+0x92>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020dc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80020de:	b29b      	uxth	r3, r3
 80020e0:	2bff      	cmp	r3, #255	; 0xff
 80020e2:	d91c      	bls.n	800211e <HAL_I2C_Mem_Read+0x13a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80020e4:	22ff      	movs	r2, #255	; 0xff
 80020e6:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80020e8:	9000      	str	r0, [sp, #0]
 80020ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80020ee:	4639      	mov	r1, r7
 80020f0:	4620      	mov	r0, r4
 80020f2:	f7ff fd36 	bl	8001b62 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 80020f6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1cb      	bne.n	8002096 <HAL_I2C_Mem_Read+0xb2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020fe:	4632      	mov	r2, r6
 8002100:	4649      	mov	r1, r9
 8002102:	4620      	mov	r0, r4
 8002104:	f7ff fe3e 	bl	8001d84 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002108:	b188      	cbz	r0, 800212e <HAL_I2C_Mem_Read+0x14a>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800210a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800210c:	e7b1      	b.n	8002072 <HAL_I2C_Mem_Read+0x8e>
      hi2c->XferSize = hi2c->XferCount;
 800210e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002110:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8002112:	b292      	uxth	r2, r2
 8002114:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002116:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800211a:	b2d2      	uxtb	r2, r2
 800211c:	e7b7      	b.n	800208e <HAL_I2C_Mem_Read+0xaa>
          hi2c->XferSize = hi2c->XferCount;
 800211e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002120:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8002122:	b292      	uxth	r2, r2
 8002124:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002126:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800212a:	b2d2      	uxtb	r2, r2
 800212c:	e7df      	b.n	80020ee <HAL_I2C_Mem_Read+0x10a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800212e:	6823      	ldr	r3, [r4, #0]
 8002130:	2120      	movs	r1, #32
 8002132:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002134:	685a      	ldr	r2, [r3, #4]
 8002136:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800213a:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800213e:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8002142:	f022 0201 	bic.w	r2, r2, #1
 8002146:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002148:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800214c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002150:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8002154:	e759      	b.n	800200a <HAL_I2C_Mem_Read+0x26>
    return HAL_BUSY;
 8002156:	2002      	movs	r0, #2
 8002158:	e757      	b.n	800200a <HAL_I2C_Mem_Read+0x26>
 800215a:	bf00      	nop
 800215c:	80002400 	.word	0x80002400

08002160 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002160:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8002164:	b2d2      	uxtb	r2, r2
 8002166:	2a20      	cmp	r2, #32
{
 8002168:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800216a:	d11d      	bne.n	80021a8 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800216c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002170:	2b01      	cmp	r3, #1
 8002172:	d019      	beq.n	80021a8 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002174:	2324      	movs	r3, #36	; 0x24
 8002176:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800217a:	6803      	ldr	r3, [r0, #0]
 800217c:	681c      	ldr	r4, [r3, #0]
 800217e:	f024 0401 	bic.w	r4, r4, #1
 8002182:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002184:	681c      	ldr	r4, [r3, #0]
 8002186:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 800218a:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800218c:	681c      	ldr	r4, [r3, #0]
 800218e:	4321      	orrs	r1, r4
 8002190:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002192:	6819      	ldr	r1, [r3, #0]
 8002194:	f041 0101 	orr.w	r1, r1, #1
 8002198:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800219a:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800219c:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80021a0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80021a4:	4618      	mov	r0, r3
 80021a6:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 80021a8:	2002      	movs	r0, #2
  }
}
 80021aa:	bd10      	pop	{r4, pc}

080021ac <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80021ac:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021ae:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 80021b2:	b2e4      	uxtb	r4, r4
 80021b4:	2c20      	cmp	r4, #32
 80021b6:	d11c      	bne.n	80021f2 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021b8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d018      	beq.n	80021f2 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021c0:	2324      	movs	r3, #36	; 0x24
 80021c2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80021c6:	6803      	ldr	r3, [r0, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	f022 0201 	bic.w	r2, r2, #1
 80021ce:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80021d0:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80021d2:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80021d6:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80021da:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	f042 0201 	orr.w	r2, r2, #1
 80021e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021e4:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80021e6:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80021ea:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80021ee:	4618      	mov	r0, r3
 80021f0:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 80021f2:	2002      	movs	r0, #2
  }
}
 80021f4:	bd10      	pop	{r4, pc}
	...

080021f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021f8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021fc:	4605      	mov	r5, r0
 80021fe:	b918      	cbnz	r0, 8002208 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8002200:	2001      	movs	r0, #1
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 8002202:	b002      	add	sp, #8
 8002204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002208:	6803      	ldr	r3, [r0, #0]
 800220a:	07da      	lsls	r2, r3, #31
 800220c:	d411      	bmi.n	8002232 <HAL_RCC_OscConfig+0x3a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800220e:	682b      	ldr	r3, [r5, #0]
 8002210:	079b      	lsls	r3, r3, #30
 8002212:	f100 8085 	bmi.w	8002320 <HAL_RCC_OscConfig+0x128>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002216:	682b      	ldr	r3, [r5, #0]
 8002218:	071c      	lsls	r4, r3, #28
 800221a:	f100 80f6 	bmi.w	800240a <HAL_RCC_OscConfig+0x212>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800221e:	682b      	ldr	r3, [r5, #0]
 8002220:	0758      	lsls	r0, r3, #29
 8002222:	f100 813f 	bmi.w	80024a4 <HAL_RCC_OscConfig+0x2ac>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002226:	69ea      	ldr	r2, [r5, #28]
 8002228:	2a00      	cmp	r2, #0
 800222a:	f040 81d6 	bne.w	80025da <HAL_RCC_OscConfig+0x3e2>
  return HAL_OK;
 800222e:	2000      	movs	r0, #0
 8002230:	e7e7      	b.n	8002202 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002232:	4cba      	ldr	r4, [pc, #744]	; (800251c <HAL_RCC_OscConfig+0x324>)
 8002234:	6863      	ldr	r3, [r4, #4]
 8002236:	f003 030c 	and.w	r3, r3, #12
 800223a:	2b04      	cmp	r3, #4
 800223c:	d007      	beq.n	800224e <HAL_RCC_OscConfig+0x56>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800223e:	6863      	ldr	r3, [r4, #4]
 8002240:	f003 030c 	and.w	r3, r3, #12
 8002244:	2b08      	cmp	r3, #8
 8002246:	d116      	bne.n	8002276 <HAL_RCC_OscConfig+0x7e>
 8002248:	6863      	ldr	r3, [r4, #4]
 800224a:	03df      	lsls	r7, r3, #15
 800224c:	d513      	bpl.n	8002276 <HAL_RCC_OscConfig+0x7e>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002252:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002256:	6821      	ldr	r1, [r4, #0]
 8002258:	fa93 f3a3 	rbit	r3, r3
 800225c:	fab3 f383 	clz	r3, r3
 8002260:	f003 031f 	and.w	r3, r3, #31
 8002264:	2201      	movs	r2, #1
 8002266:	fa02 f303 	lsl.w	r3, r2, r3
 800226a:	420b      	tst	r3, r1
 800226c:	d0cf      	beq.n	800220e <HAL_RCC_OscConfig+0x16>
 800226e:	686b      	ldr	r3, [r5, #4]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d1cc      	bne.n	800220e <HAL_RCC_OscConfig+0x16>
 8002274:	e7c4      	b.n	8002200 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002276:	686a      	ldr	r2, [r5, #4]
 8002278:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800227c:	d125      	bne.n	80022ca <HAL_RCC_OscConfig+0xd2>
 800227e:	6823      	ldr	r3, [r4, #0]
 8002280:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002284:	6023      	str	r3, [r4, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002286:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002288:	68a9      	ldr	r1, [r5, #8]
 800228a:	f023 030f 	bic.w	r3, r3, #15
 800228e:	430b      	orrs	r3, r1
 8002290:	62e3      	str	r3, [r4, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002292:	b352      	cbz	r2, 80022ea <HAL_RCC_OscConfig+0xf2>
        tickstart = HAL_GetTick();
 8002294:	f7fe febe 	bl	8001014 <HAL_GetTick>
 8002298:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 800229c:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800229e:	2701      	movs	r7, #1
 80022a0:	fa96 f3a6 	rbit	r3, r6
 80022a4:	6822      	ldr	r2, [r4, #0]
 80022a6:	fa96 f3a6 	rbit	r3, r6
 80022aa:	fab3 f383 	clz	r3, r3
 80022ae:	f003 031f 	and.w	r3, r3, #31
 80022b2:	fa07 f303 	lsl.w	r3, r7, r3
 80022b6:	4213      	tst	r3, r2
 80022b8:	d1a9      	bne.n	800220e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022ba:	f7fe feab 	bl	8001014 <HAL_GetTick>
 80022be:	eba0 0008 	sub.w	r0, r0, r8
 80022c2:	2864      	cmp	r0, #100	; 0x64
 80022c4:	d9ec      	bls.n	80022a0 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
 80022c6:	2003      	movs	r0, #3
 80022c8:	e79b      	b.n	8002202 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022ca:	6823      	ldr	r3, [r4, #0]
 80022cc:	b932      	cbnz	r2, 80022dc <HAL_RCC_OscConfig+0xe4>
 80022ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022d2:	6023      	str	r3, [r4, #0]
 80022d4:	6823      	ldr	r3, [r4, #0]
 80022d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022da:	e7d3      	b.n	8002284 <HAL_RCC_OscConfig+0x8c>
 80022dc:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 80022e0:	d1f5      	bne.n	80022ce <HAL_RCC_OscConfig+0xd6>
 80022e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022e6:	6023      	str	r3, [r4, #0]
 80022e8:	e7c9      	b.n	800227e <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 80022ea:	f7fe fe93 	bl	8001014 <HAL_GetTick>
 80022ee:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80022f2:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022f4:	2701      	movs	r7, #1
 80022f6:	fa96 f3a6 	rbit	r3, r6
 80022fa:	6822      	ldr	r2, [r4, #0]
 80022fc:	fa96 f3a6 	rbit	r3, r6
 8002300:	fab3 f383 	clz	r3, r3
 8002304:	f003 031f 	and.w	r3, r3, #31
 8002308:	fa07 f303 	lsl.w	r3, r7, r3
 800230c:	4213      	tst	r3, r2
 800230e:	f43f af7e 	beq.w	800220e <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002312:	f7fe fe7f 	bl	8001014 <HAL_GetTick>
 8002316:	eba0 0008 	sub.w	r0, r0, r8
 800231a:	2864      	cmp	r0, #100	; 0x64
 800231c:	d9eb      	bls.n	80022f6 <HAL_RCC_OscConfig+0xfe>
 800231e:	e7d2      	b.n	80022c6 <HAL_RCC_OscConfig+0xce>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002320:	4c7e      	ldr	r4, [pc, #504]	; (800251c <HAL_RCC_OscConfig+0x324>)
 8002322:	6863      	ldr	r3, [r4, #4]
 8002324:	f013 0f0c 	tst.w	r3, #12
 8002328:	d007      	beq.n	800233a <HAL_RCC_OscConfig+0x142>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800232a:	6863      	ldr	r3, [r4, #4]
 800232c:	f003 030c 	and.w	r3, r3, #12
 8002330:	2b08      	cmp	r3, #8
 8002332:	d122      	bne.n	800237a <HAL_RCC_OscConfig+0x182>
 8002334:	6863      	ldr	r3, [r4, #4]
 8002336:	03de      	lsls	r6, r3, #15
 8002338:	d41f      	bmi.n	800237a <HAL_RCC_OscConfig+0x182>
 800233a:	2302      	movs	r3, #2
 800233c:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002340:	6821      	ldr	r1, [r4, #0]
 8002342:	fa93 f3a3 	rbit	r3, r3
 8002346:	fab3 f383 	clz	r3, r3
 800234a:	f003 031f 	and.w	r3, r3, #31
 800234e:	2201      	movs	r2, #1
 8002350:	fa02 f303 	lsl.w	r3, r2, r3
 8002354:	420b      	tst	r3, r1
 8002356:	d003      	beq.n	8002360 <HAL_RCC_OscConfig+0x168>
 8002358:	692b      	ldr	r3, [r5, #16]
 800235a:	4293      	cmp	r3, r2
 800235c:	f47f af50 	bne.w	8002200 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002360:	6821      	ldr	r1, [r4, #0]
 8002362:	23f8      	movs	r3, #248	; 0xf8
 8002364:	fa93 f3a3 	rbit	r3, r3
 8002368:	fab3 f283 	clz	r2, r3
 800236c:	696b      	ldr	r3, [r5, #20]
 800236e:	4093      	lsls	r3, r2
 8002370:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8002374:	4313      	orrs	r3, r2
 8002376:	6023      	str	r3, [r4, #0]
 8002378:	e74d      	b.n	8002216 <HAL_RCC_OscConfig+0x1e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800237a:	692a      	ldr	r2, [r5, #16]
 800237c:	2601      	movs	r6, #1
 800237e:	b30a      	cbz	r2, 80023c4 <HAL_RCC_OscConfig+0x1cc>
 8002380:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 8002384:	fab3 f383 	clz	r3, r3
 8002388:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800238c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	2702      	movs	r7, #2
 8002394:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8002396:	f7fe fe3d 	bl	8001014 <HAL_GetTick>
 800239a:	4680      	mov	r8, r0
 800239c:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023a0:	6822      	ldr	r2, [r4, #0]
 80023a2:	fa97 f3a7 	rbit	r3, r7
 80023a6:	fab3 f383 	clz	r3, r3
 80023aa:	f003 031f 	and.w	r3, r3, #31
 80023ae:	fa06 f303 	lsl.w	r3, r6, r3
 80023b2:	4213      	tst	r3, r2
 80023b4:	d1d4      	bne.n	8002360 <HAL_RCC_OscConfig+0x168>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023b6:	f7fe fe2d 	bl	8001014 <HAL_GetTick>
 80023ba:	eba0 0008 	sub.w	r0, r0, r8
 80023be:	2802      	cmp	r0, #2
 80023c0:	d9ec      	bls.n	800239c <HAL_RCC_OscConfig+0x1a4>
 80023c2:	e780      	b.n	80022c6 <HAL_RCC_OscConfig+0xce>
 80023c4:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 80023c8:	fab3 f383 	clz	r3, r3
 80023cc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80023d0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	2702      	movs	r7, #2
 80023d8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80023da:	f7fe fe1b 	bl	8001014 <HAL_GetTick>
 80023de:	4680      	mov	r8, r0
 80023e0:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023e4:	6822      	ldr	r2, [r4, #0]
 80023e6:	fa97 f3a7 	rbit	r3, r7
 80023ea:	fab3 f383 	clz	r3, r3
 80023ee:	f003 031f 	and.w	r3, r3, #31
 80023f2:	fa06 f303 	lsl.w	r3, r6, r3
 80023f6:	4213      	tst	r3, r2
 80023f8:	f43f af0d 	beq.w	8002216 <HAL_RCC_OscConfig+0x1e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023fc:	f7fe fe0a 	bl	8001014 <HAL_GetTick>
 8002400:	eba0 0008 	sub.w	r0, r0, r8
 8002404:	2802      	cmp	r0, #2
 8002406:	d9eb      	bls.n	80023e0 <HAL_RCC_OscConfig+0x1e8>
 8002408:	e75d      	b.n	80022c6 <HAL_RCC_OscConfig+0xce>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800240a:	69aa      	ldr	r2, [r5, #24]
 800240c:	4e43      	ldr	r6, [pc, #268]	; (800251c <HAL_RCC_OscConfig+0x324>)
 800240e:	4944      	ldr	r1, [pc, #272]	; (8002520 <HAL_RCC_OscConfig+0x328>)
 8002410:	2401      	movs	r4, #1
 8002412:	b31a      	cbz	r2, 800245c <HAL_RCC_OscConfig+0x264>
 8002414:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 8002418:	fab3 f383 	clz	r3, r3
 800241c:	440b      	add	r3, r1
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	2702      	movs	r7, #2
 8002422:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 8002424:	f7fe fdf6 	bl	8001014 <HAL_GetTick>
 8002428:	4680      	mov	r8, r0
 800242a:	fa97 f3a7 	rbit	r3, r7
 800242e:	fa97 f3a7 	rbit	r3, r7
 8002432:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002436:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8002438:	fa97 f3a7 	rbit	r3, r7
 800243c:	fab3 f383 	clz	r3, r3
 8002440:	f003 031f 	and.w	r3, r3, #31
 8002444:	fa04 f303 	lsl.w	r3, r4, r3
 8002448:	4213      	tst	r3, r2
 800244a:	f47f aee8 	bne.w	800221e <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800244e:	f7fe fde1 	bl	8001014 <HAL_GetTick>
 8002452:	eba0 0008 	sub.w	r0, r0, r8
 8002456:	2802      	cmp	r0, #2
 8002458:	d9e7      	bls.n	800242a <HAL_RCC_OscConfig+0x232>
 800245a:	e734      	b.n	80022c6 <HAL_RCC_OscConfig+0xce>
 800245c:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 8002460:	fab3 f383 	clz	r3, r3
 8002464:	440b      	add	r3, r1
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	2702      	movs	r7, #2
 800246a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800246c:	f7fe fdd2 	bl	8001014 <HAL_GetTick>
 8002470:	4680      	mov	r8, r0
 8002472:	fa97 f3a7 	rbit	r3, r7
 8002476:	fa97 f3a7 	rbit	r3, r7
 800247a:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800247e:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8002480:	fa97 f3a7 	rbit	r3, r7
 8002484:	fab3 f383 	clz	r3, r3
 8002488:	f003 031f 	and.w	r3, r3, #31
 800248c:	fa04 f303 	lsl.w	r3, r4, r3
 8002490:	4213      	tst	r3, r2
 8002492:	f43f aec4 	beq.w	800221e <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002496:	f7fe fdbd 	bl	8001014 <HAL_GetTick>
 800249a:	eba0 0008 	sub.w	r0, r0, r8
 800249e:	2802      	cmp	r0, #2
 80024a0:	d9e7      	bls.n	8002472 <HAL_RCC_OscConfig+0x27a>
 80024a2:	e710      	b.n	80022c6 <HAL_RCC_OscConfig+0xce>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024a4:	4c1d      	ldr	r4, [pc, #116]	; (800251c <HAL_RCC_OscConfig+0x324>)
 80024a6:	69e3      	ldr	r3, [r4, #28]
 80024a8:	00d9      	lsls	r1, r3, #3
 80024aa:	d434      	bmi.n	8002516 <HAL_RCC_OscConfig+0x31e>
      __HAL_RCC_PWR_CLK_ENABLE();
 80024ac:	69e3      	ldr	r3, [r4, #28]
 80024ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024b2:	61e3      	str	r3, [r4, #28]
 80024b4:	69e3      	ldr	r3, [r4, #28]
 80024b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ba:	9301      	str	r3, [sp, #4]
 80024bc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80024be:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024c0:	4f18      	ldr	r7, [pc, #96]	; (8002524 <HAL_RCC_OscConfig+0x32c>)
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	05da      	lsls	r2, r3, #23
 80024c6:	d52f      	bpl.n	8002528 <HAL_RCC_OscConfig+0x330>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024c8:	68eb      	ldr	r3, [r5, #12]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d13d      	bne.n	800254a <HAL_RCC_OscConfig+0x352>
 80024ce:	6a23      	ldr	r3, [r4, #32]
 80024d0:	f043 0301 	orr.w	r3, r3, #1
 80024d4:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80024d6:	f7fe fd9d 	bl	8001014 <HAL_GetTick>
 80024da:	2702      	movs	r7, #2
 80024dc:	4682      	mov	sl, r0
 80024de:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024e0:	f04f 0801 	mov.w	r8, #1
 80024e4:	fa97 f3a7 	rbit	r3, r7
 80024e8:	fa97 f3a7 	rbit	r3, r7
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d06c      	beq.n	80025ca <HAL_RCC_OscConfig+0x3d2>
 80024f0:	6a22      	ldr	r2, [r4, #32]
 80024f2:	fa99 f3a9 	rbit	r3, r9
 80024f6:	fab3 f383 	clz	r3, r3
 80024fa:	f003 031f 	and.w	r3, r3, #31
 80024fe:	fa08 f303 	lsl.w	r3, r8, r3
 8002502:	4213      	tst	r3, r2
 8002504:	d058      	beq.n	80025b8 <HAL_RCC_OscConfig+0x3c0>
    if(pwrclkchanged == SET)
 8002506:	2e00      	cmp	r6, #0
 8002508:	f43f ae8d 	beq.w	8002226 <HAL_RCC_OscConfig+0x2e>
      __HAL_RCC_PWR_CLK_DISABLE();
 800250c:	69e3      	ldr	r3, [r4, #28]
 800250e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002512:	61e3      	str	r3, [r4, #28]
 8002514:	e687      	b.n	8002226 <HAL_RCC_OscConfig+0x2e>
    FlagStatus       pwrclkchanged = RESET;
 8002516:	2600      	movs	r6, #0
 8002518:	e7d2      	b.n	80024c0 <HAL_RCC_OscConfig+0x2c8>
 800251a:	bf00      	nop
 800251c:	40021000 	.word	0x40021000
 8002520:	10908120 	.word	0x10908120
 8002524:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800252e:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8002530:	f7fe fd70 	bl	8001014 <HAL_GetTick>
 8002534:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	05db      	lsls	r3, r3, #23
 800253a:	d4c5      	bmi.n	80024c8 <HAL_RCC_OscConfig+0x2d0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800253c:	f7fe fd6a 	bl	8001014 <HAL_GetTick>
 8002540:	eba0 0008 	sub.w	r0, r0, r8
 8002544:	2864      	cmp	r0, #100	; 0x64
 8002546:	d9f6      	bls.n	8002536 <HAL_RCC_OscConfig+0x33e>
 8002548:	e6bd      	b.n	80022c6 <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800254a:	bb3b      	cbnz	r3, 800259c <HAL_RCC_OscConfig+0x3a4>
 800254c:	6a23      	ldr	r3, [r4, #32]
 800254e:	f023 0301 	bic.w	r3, r3, #1
 8002552:	6223      	str	r3, [r4, #32]
 8002554:	6a23      	ldr	r3, [r4, #32]
 8002556:	f023 0304 	bic.w	r3, r3, #4
 800255a:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800255c:	f7fe fd5a 	bl	8001014 <HAL_GetTick>
 8002560:	2702      	movs	r7, #2
 8002562:	4682      	mov	sl, r0
 8002564:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002566:	f04f 0801 	mov.w	r8, #1
 800256a:	fa97 f3a7 	rbit	r3, r7
 800256e:	fa97 f3a7 	rbit	r3, r7
 8002572:	b373      	cbz	r3, 80025d2 <HAL_RCC_OscConfig+0x3da>
 8002574:	6a22      	ldr	r2, [r4, #32]
 8002576:	fa99 f3a9 	rbit	r3, r9
 800257a:	fab3 f383 	clz	r3, r3
 800257e:	f003 031f 	and.w	r3, r3, #31
 8002582:	fa08 f303 	lsl.w	r3, r8, r3
 8002586:	4213      	tst	r3, r2
 8002588:	d0bd      	beq.n	8002506 <HAL_RCC_OscConfig+0x30e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800258a:	f7fe fd43 	bl	8001014 <HAL_GetTick>
 800258e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002592:	eba0 000a 	sub.w	r0, r0, sl
 8002596:	4298      	cmp	r0, r3
 8002598:	d9e7      	bls.n	800256a <HAL_RCC_OscConfig+0x372>
 800259a:	e694      	b.n	80022c6 <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800259c:	2b05      	cmp	r3, #5
 800259e:	6a23      	ldr	r3, [r4, #32]
 80025a0:	d103      	bne.n	80025aa <HAL_RCC_OscConfig+0x3b2>
 80025a2:	f043 0304 	orr.w	r3, r3, #4
 80025a6:	6223      	str	r3, [r4, #32]
 80025a8:	e791      	b.n	80024ce <HAL_RCC_OscConfig+0x2d6>
 80025aa:	f023 0301 	bic.w	r3, r3, #1
 80025ae:	6223      	str	r3, [r4, #32]
 80025b0:	6a23      	ldr	r3, [r4, #32]
 80025b2:	f023 0304 	bic.w	r3, r3, #4
 80025b6:	e78d      	b.n	80024d4 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025b8:	f7fe fd2c 	bl	8001014 <HAL_GetTick>
 80025bc:	f241 3388 	movw	r3, #5000	; 0x1388
 80025c0:	eba0 000a 	sub.w	r0, r0, sl
 80025c4:	4298      	cmp	r0, r3
 80025c6:	d98d      	bls.n	80024e4 <HAL_RCC_OscConfig+0x2ec>
 80025c8:	e67d      	b.n	80022c6 <HAL_RCC_OscConfig+0xce>
 80025ca:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025ce:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80025d0:	e78f      	b.n	80024f2 <HAL_RCC_OscConfig+0x2fa>
 80025d2:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025d6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80025d8:	e7cd      	b.n	8002576 <HAL_RCC_OscConfig+0x37e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025da:	4c41      	ldr	r4, [pc, #260]	; (80026e0 <HAL_RCC_OscConfig+0x4e8>)
 80025dc:	6863      	ldr	r3, [r4, #4]
 80025de:	f003 030c 	and.w	r3, r3, #12
 80025e2:	2b08      	cmp	r3, #8
 80025e4:	f43f ae0c 	beq.w	8002200 <HAL_RCC_OscConfig+0x8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025e8:	2a02      	cmp	r2, #2
 80025ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025ee:	d152      	bne.n	8002696 <HAL_RCC_OscConfig+0x49e>
 80025f0:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80025f4:	fab3 f383 	clz	r3, r3
 80025f8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80025fc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	2200      	movs	r2, #0
 8002604:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002606:	f7fe fd05 	bl	8001014 <HAL_GetTick>
 800260a:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 800260e:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002610:	2601      	movs	r6, #1
 8002612:	fa97 f3a7 	rbit	r3, r7
 8002616:	6822      	ldr	r2, [r4, #0]
 8002618:	fa97 f3a7 	rbit	r3, r7
 800261c:	fab3 f383 	clz	r3, r3
 8002620:	f003 031f 	and.w	r3, r3, #31
 8002624:	fa06 f303 	lsl.w	r3, r6, r3
 8002628:	4213      	tst	r3, r2
 800262a:	d12d      	bne.n	8002688 <HAL_RCC_OscConfig+0x490>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800262c:	6862      	ldr	r2, [r4, #4]
 800262e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002630:	6a29      	ldr	r1, [r5, #32]
 8002632:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8002636:	430b      	orrs	r3, r1
 8002638:	4313      	orrs	r3, r2
 800263a:	6063      	str	r3, [r4, #4]
 800263c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002640:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8002644:	fab3 f383 	clz	r3, r3
 8002648:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800264c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8002656:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8002658:	f7fe fcdc 	bl	8001014 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800265c:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 800265e:	4607      	mov	r7, r0
 8002660:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002664:	6822      	ldr	r2, [r4, #0]
 8002666:	fa95 f3a5 	rbit	r3, r5
 800266a:	fab3 f383 	clz	r3, r3
 800266e:	f003 031f 	and.w	r3, r3, #31
 8002672:	fa06 f303 	lsl.w	r3, r6, r3
 8002676:	4213      	tst	r3, r2
 8002678:	f47f add9 	bne.w	800222e <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800267c:	f7fe fcca 	bl	8001014 <HAL_GetTick>
 8002680:	1bc0      	subs	r0, r0, r7
 8002682:	2802      	cmp	r0, #2
 8002684:	d9ec      	bls.n	8002660 <HAL_RCC_OscConfig+0x468>
 8002686:	e61e      	b.n	80022c6 <HAL_RCC_OscConfig+0xce>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002688:	f7fe fcc4 	bl	8001014 <HAL_GetTick>
 800268c:	eba0 0008 	sub.w	r0, r0, r8
 8002690:	2802      	cmp	r0, #2
 8002692:	d9be      	bls.n	8002612 <HAL_RCC_OscConfig+0x41a>
 8002694:	e617      	b.n	80022c6 <HAL_RCC_OscConfig+0xce>
 8002696:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 800269a:	fab3 f383 	clz	r3, r3
 800269e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80026a2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80026ac:	f7fe fcb2 	bl	8001014 <HAL_GetTick>
 80026b0:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 80026b4:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026b6:	2601      	movs	r6, #1
 80026b8:	fa95 f3a5 	rbit	r3, r5
 80026bc:	6822      	ldr	r2, [r4, #0]
 80026be:	fa95 f3a5 	rbit	r3, r5
 80026c2:	fab3 f383 	clz	r3, r3
 80026c6:	f003 031f 	and.w	r3, r3, #31
 80026ca:	fa06 f303 	lsl.w	r3, r6, r3
 80026ce:	4213      	tst	r3, r2
 80026d0:	f43f adad 	beq.w	800222e <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026d4:	f7fe fc9e 	bl	8001014 <HAL_GetTick>
 80026d8:	1bc0      	subs	r0, r0, r7
 80026da:	2802      	cmp	r0, #2
 80026dc:	d9ec      	bls.n	80026b8 <HAL_RCC_OscConfig+0x4c0>
 80026de:	e5f2      	b.n	80022c6 <HAL_RCC_OscConfig+0xce>
 80026e0:	40021000 	.word	0x40021000

080026e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026e4:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80026e6:	4c13      	ldr	r4, [pc, #76]	; (8002734 <HAL_RCC_GetSysClockFreq+0x50>)
 80026e8:	6861      	ldr	r1, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026ea:	f001 030c 	and.w	r3, r1, #12
 80026ee:	2b08      	cmp	r3, #8
 80026f0:	d11e      	bne.n	8002730 <HAL_RCC_GetSysClockFreq+0x4c>
 80026f2:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 80026f6:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80026fa:	f401 1270 	and.w	r2, r1, #3932160	; 0x3c0000
 80026fe:	fab3 f383 	clz	r3, r3
 8002702:	fa22 f303 	lsr.w	r3, r2, r3
 8002706:	4a0c      	ldr	r2, [pc, #48]	; (8002738 <HAL_RCC_GetSysClockFreq+0x54>)
 8002708:	5cd0      	ldrb	r0, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800270a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800270c:	220f      	movs	r2, #15
 800270e:	fa92 f2a2 	rbit	r2, r2
 8002712:	fab2 f282 	clz	r2, r2
 8002716:	f003 030f 	and.w	r3, r3, #15
 800271a:	40d3      	lsrs	r3, r2
 800271c:	4a07      	ldr	r2, [pc, #28]	; (800273c <HAL_RCC_GetSysClockFreq+0x58>)
 800271e:	5cd2      	ldrb	r2, [r2, r3]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002720:	03cb      	lsls	r3, r1, #15
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8002722:	bf4a      	itet	mi
 8002724:	4b06      	ldrmi	r3, [pc, #24]	; (8002740 <HAL_RCC_GetSysClockFreq+0x5c>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8002726:	4b07      	ldrpl	r3, [pc, #28]	; (8002744 <HAL_RCC_GetSysClockFreq+0x60>)
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8002728:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 800272c:	4358      	muls	r0, r3
 800272e:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 8002730:	4803      	ldr	r0, [pc, #12]	; (8002740 <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002732:	bd10      	pop	{r4, pc}
 8002734:	40021000 	.word	0x40021000
 8002738:	08009b48 	.word	0x08009b48
 800273c:	08009b58 	.word	0x08009b58
 8002740:	007a1200 	.word	0x007a1200
 8002744:	003d0900 	.word	0x003d0900

08002748 <HAL_RCC_ClockConfig>:
{
 8002748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800274c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800274e:	4604      	mov	r4, r0
 8002750:	b910      	cbnz	r0, 8002758 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002752:	2001      	movs	r0, #1
 8002754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002758:	4a4c      	ldr	r2, [pc, #304]	; (800288c <HAL_RCC_ClockConfig+0x144>)
 800275a:	6813      	ldr	r3, [r2, #0]
 800275c:	f003 0307 	and.w	r3, r3, #7
 8002760:	428b      	cmp	r3, r1
 8002762:	d32e      	bcc.n	80027c2 <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002764:	6822      	ldr	r2, [r4, #0]
 8002766:	0791      	lsls	r1, r2, #30
 8002768:	d436      	bmi.n	80027d8 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800276a:	07d2      	lsls	r2, r2, #31
 800276c:	d43c      	bmi.n	80027e8 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800276e:	4a47      	ldr	r2, [pc, #284]	; (800288c <HAL_RCC_ClockConfig+0x144>)
 8002770:	6813      	ldr	r3, [r2, #0]
 8002772:	f003 0307 	and.w	r3, r3, #7
 8002776:	429d      	cmp	r5, r3
 8002778:	d375      	bcc.n	8002866 <HAL_RCC_ClockConfig+0x11e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800277a:	6822      	ldr	r2, [r4, #0]
 800277c:	4d44      	ldr	r5, [pc, #272]	; (8002890 <HAL_RCC_ClockConfig+0x148>)
 800277e:	f012 0f04 	tst.w	r2, #4
 8002782:	d17c      	bne.n	800287e <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002784:	0713      	lsls	r3, r2, #28
 8002786:	d506      	bpl.n	8002796 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002788:	686b      	ldr	r3, [r5, #4]
 800278a:	6922      	ldr	r2, [r4, #16]
 800278c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002790:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002794:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002796:	f7ff ffa5 	bl	80026e4 <HAL_RCC_GetSysClockFreq>
 800279a:	686b      	ldr	r3, [r5, #4]
 800279c:	22f0      	movs	r2, #240	; 0xf0
 800279e:	fa92 f2a2 	rbit	r2, r2
 80027a2:	fab2 f282 	clz	r2, r2
 80027a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027aa:	40d3      	lsrs	r3, r2
 80027ac:	4a39      	ldr	r2, [pc, #228]	; (8002894 <HAL_RCC_ClockConfig+0x14c>)
 80027ae:	5cd3      	ldrb	r3, [r2, r3]
 80027b0:	40d8      	lsrs	r0, r3
 80027b2:	4b39      	ldr	r3, [pc, #228]	; (8002898 <HAL_RCC_ClockConfig+0x150>)
 80027b4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80027b6:	2000      	movs	r0, #0
 80027b8:	f7fe fbea 	bl	8000f90 <HAL_InitTick>
  return HAL_OK;
 80027bc:	2000      	movs	r0, #0
 80027be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027c2:	6813      	ldr	r3, [r2, #0]
 80027c4:	f023 0307 	bic.w	r3, r3, #7
 80027c8:	430b      	orrs	r3, r1
 80027ca:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027cc:	6813      	ldr	r3, [r2, #0]
 80027ce:	f003 0307 	and.w	r3, r3, #7
 80027d2:	4299      	cmp	r1, r3
 80027d4:	d1bd      	bne.n	8002752 <HAL_RCC_ClockConfig+0xa>
 80027d6:	e7c5      	b.n	8002764 <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027d8:	492d      	ldr	r1, [pc, #180]	; (8002890 <HAL_RCC_ClockConfig+0x148>)
 80027da:	68a0      	ldr	r0, [r4, #8]
 80027dc:	684b      	ldr	r3, [r1, #4]
 80027de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027e2:	4303      	orrs	r3, r0
 80027e4:	604b      	str	r3, [r1, #4]
 80027e6:	e7c0      	b.n	800276a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027e8:	6862      	ldr	r2, [r4, #4]
 80027ea:	4e29      	ldr	r6, [pc, #164]	; (8002890 <HAL_RCC_ClockConfig+0x148>)
 80027ec:	2a01      	cmp	r2, #1
 80027ee:	d127      	bne.n	8002840 <HAL_RCC_ClockConfig+0xf8>
 80027f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027f4:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027f8:	6831      	ldr	r1, [r6, #0]
 80027fa:	fa93 f3a3 	rbit	r3, r3
 80027fe:	fab3 f383 	clz	r3, r3
 8002802:	f003 031f 	and.w	r3, r3, #31
 8002806:	fa02 f303 	lsl.w	r3, r2, r3
 800280a:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800280c:	d0a1      	beq.n	8002752 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800280e:	6873      	ldr	r3, [r6, #4]
 8002810:	f023 0303 	bic.w	r3, r3, #3
 8002814:	431a      	orrs	r2, r3
 8002816:	6072      	str	r2, [r6, #4]
    tickstart = HAL_GetTick();
 8002818:	f7fe fbfc 	bl	8001014 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800281c:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002820:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002822:	6873      	ldr	r3, [r6, #4]
 8002824:	6862      	ldr	r2, [r4, #4]
 8002826:	f003 030c 	and.w	r3, r3, #12
 800282a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800282e:	d09e      	beq.n	800276e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002830:	f7fe fbf0 	bl	8001014 <HAL_GetTick>
 8002834:	1bc0      	subs	r0, r0, r7
 8002836:	4540      	cmp	r0, r8
 8002838:	d9f3      	bls.n	8002822 <HAL_RCC_ClockConfig+0xda>
        return HAL_TIMEOUT;
 800283a:	2003      	movs	r0, #3
}
 800283c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002840:	2a02      	cmp	r2, #2
 8002842:	bf0c      	ite	eq
 8002844:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8002848:	2302      	movne	r3, #2
 800284a:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800284e:	6830      	ldr	r0, [r6, #0]
 8002850:	fa93 f3a3 	rbit	r3, r3
 8002854:	fab3 f383 	clz	r3, r3
 8002858:	f003 031f 	and.w	r3, r3, #31
 800285c:	2101      	movs	r1, #1
 800285e:	fa01 f303 	lsl.w	r3, r1, r3
 8002862:	4203      	tst	r3, r0
 8002864:	e7d2      	b.n	800280c <HAL_RCC_ClockConfig+0xc4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002866:	6813      	ldr	r3, [r2, #0]
 8002868:	f023 0307 	bic.w	r3, r3, #7
 800286c:	432b      	orrs	r3, r5
 800286e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002870:	6813      	ldr	r3, [r2, #0]
 8002872:	f003 0307 	and.w	r3, r3, #7
 8002876:	429d      	cmp	r5, r3
 8002878:	f47f af6b 	bne.w	8002752 <HAL_RCC_ClockConfig+0xa>
 800287c:	e77d      	b.n	800277a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800287e:	686b      	ldr	r3, [r5, #4]
 8002880:	68e1      	ldr	r1, [r4, #12]
 8002882:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002886:	430b      	orrs	r3, r1
 8002888:	606b      	str	r3, [r5, #4]
 800288a:	e77b      	b.n	8002784 <HAL_RCC_ClockConfig+0x3c>
 800288c:	40022000 	.word	0x40022000
 8002890:	40021000 	.word	0x40021000
 8002894:	08009be3 	.word	0x08009be3
 8002898:	20000008 	.word	0x20000008

0800289c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800289c:	4b08      	ldr	r3, [pc, #32]	; (80028c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800289e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	fa92 f2a2 	rbit	r2, r2
 80028a8:	fab2 f282 	clz	r2, r2
 80028ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80028b0:	40d3      	lsrs	r3, r2
 80028b2:	4a04      	ldr	r2, [pc, #16]	; (80028c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80028b4:	5cd3      	ldrb	r3, [r2, r3]
 80028b6:	4a04      	ldr	r2, [pc, #16]	; (80028c8 <HAL_RCC_GetPCLK1Freq+0x2c>)
 80028b8:	6810      	ldr	r0, [r2, #0]
}    
 80028ba:	40d8      	lsrs	r0, r3
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	40021000 	.word	0x40021000
 80028c4:	08009bf3 	.word	0x08009bf3
 80028c8:	20000008 	.word	0x20000008

080028cc <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80028cc:	4b08      	ldr	r3, [pc, #32]	; (80028f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028ce:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	fa92 f2a2 	rbit	r2, r2
 80028d8:	fab2 f282 	clz	r2, r2
 80028dc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80028e0:	40d3      	lsrs	r3, r2
 80028e2:	4a04      	ldr	r2, [pc, #16]	; (80028f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80028e4:	5cd3      	ldrb	r3, [r2, r3]
 80028e6:	4a04      	ldr	r2, [pc, #16]	; (80028f8 <HAL_RCC_GetPCLK2Freq+0x2c>)
 80028e8:	6810      	ldr	r0, [r2, #0]
} 
 80028ea:	40d8      	lsrs	r0, r3
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	40021000 	.word	0x40021000
 80028f4:	08009bf3 	.word	0x08009bf3
 80028f8:	20000008 	.word	0x20000008

080028fc <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80028fc:	6803      	ldr	r3, [r0, #0]
{
 80028fe:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002902:	03dc      	lsls	r4, r3, #15
{
 8002904:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002906:	d520      	bpl.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002908:	4c55      	ldr	r4, [pc, #340]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800290a:	69e3      	ldr	r3, [r4, #28]
 800290c:	00d8      	lsls	r0, r3, #3
 800290e:	d44d      	bmi.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0xb0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002910:	69e3      	ldr	r3, [r4, #28]
 8002912:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002916:	61e3      	str	r3, [r4, #28]
 8002918:	69e3      	ldr	r3, [r4, #28]
 800291a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800291e:	9301      	str	r3, [sp, #4]
 8002920:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002922:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002924:	4f4f      	ldr	r7, [pc, #316]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	05d9      	lsls	r1, r3, #23
 800292a:	d541      	bpl.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800292c:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800292e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002932:	d151      	bne.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0xdc>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002934:	6a23      	ldr	r3, [r4, #32]
 8002936:	686a      	ldr	r2, [r5, #4]
 8002938:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800293c:	4313      	orrs	r3, r2
 800293e:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002940:	b11e      	cbz	r6, 800294a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002942:	69e3      	ldr	r3, [r4, #28]
 8002944:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002948:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800294a:	6828      	ldr	r0, [r5, #0]
 800294c:	07c4      	lsls	r4, r0, #31
 800294e:	d506      	bpl.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002950:	4a43      	ldr	r2, [pc, #268]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002952:	68a9      	ldr	r1, [r5, #8]
 8002954:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002956:	f023 0303 	bic.w	r3, r3, #3
 800295a:	430b      	orrs	r3, r1
 800295c:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800295e:	0681      	lsls	r1, r0, #26
 8002960:	d506      	bpl.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002962:	4a3f      	ldr	r2, [pc, #252]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002964:	68e9      	ldr	r1, [r5, #12]
 8002966:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002968:	f023 0310 	bic.w	r3, r3, #16
 800296c:	430b      	orrs	r3, r1
 800296e:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002970:	0602      	lsls	r2, r0, #24
 8002972:	d506      	bpl.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002974:	4a3a      	ldr	r2, [pc, #232]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002976:	6929      	ldr	r1, [r5, #16]
 8002978:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800297a:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 800297e:	430b      	orrs	r3, r1
 8002980:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002982:	04c3      	lsls	r3, r0, #19
 8002984:	d506      	bpl.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002986:	4a36      	ldr	r2, [pc, #216]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002988:	6969      	ldr	r1, [r5, #20]
 800298a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800298c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002990:	430b      	orrs	r3, r1
 8002992:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8002994:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
 8002998:	d01b      	beq.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800299a:	4a31      	ldr	r2, [pc, #196]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800299c:	69a9      	ldr	r1, [r5, #24]
 800299e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80029a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80029a4:	430b      	orrs	r3, r1
 80029a6:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80029a8:	2000      	movs	r0, #0
 80029aa:	e012      	b.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    FlagStatus       pwrclkchanged = RESET;
 80029ac:	2600      	movs	r6, #0
 80029ae:	e7b9      	b.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029b6:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80029b8:	f7fe fb2c 	bl	8001014 <HAL_GetTick>
 80029bc:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	05da      	lsls	r2, r3, #23
 80029c2:	d4b3      	bmi.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x30>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029c4:	f7fe fb26 	bl	8001014 <HAL_GetTick>
 80029c8:	eba0 0008 	sub.w	r0, r0, r8
 80029cc:	2864      	cmp	r0, #100	; 0x64
 80029ce:	d9f6      	bls.n	80029be <HAL_RCCEx_PeriphCLKConfig+0xc2>
          return HAL_TIMEOUT;
 80029d0:	2003      	movs	r0, #3
}
 80029d2:	b002      	add	sp, #8
 80029d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029d8:	686a      	ldr	r2, [r5, #4]
 80029da:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80029de:	4293      	cmp	r3, r2
 80029e0:	d0a8      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x38>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029e2:	6a21      	ldr	r1, [r4, #32]
 80029e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029e8:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 80029ec:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 80029f0:	f8df e074 	ldr.w	lr, [pc, #116]	; 8002a68 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80029f4:	fab2 f282 	clz	r2, r2
 80029f8:	4472      	add	r2, lr
 80029fa:	0092      	lsls	r2, r2, #2
 80029fc:	2701      	movs	r7, #1
 80029fe:	6017      	str	r7, [r2, #0]
 8002a00:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a04:	fab3 f383 	clz	r3, r3
 8002a08:	4473      	add	r3, lr
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002a10:	07cb      	lsls	r3, r1, #31
      RCC->BDCR = temp_reg;
 8002a12:	6220      	str	r0, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002a14:	d58e      	bpl.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8002a16:	f7fe fafd 	bl	8001014 <HAL_GetTick>
 8002a1a:	f04f 0802 	mov.w	r8, #2
 8002a1e:	4682      	mov	sl, r0
 8002a20:	46c1      	mov	r9, r8
 8002a22:	fa98 f3a8 	rbit	r3, r8
 8002a26:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a2a:	b1a3      	cbz	r3, 8002a56 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002a2c:	6a22      	ldr	r2, [r4, #32]
 8002a2e:	fa99 f3a9 	rbit	r3, r9
 8002a32:	fab3 f383 	clz	r3, r3
 8002a36:	f003 031f 	and.w	r3, r3, #31
 8002a3a:	fa07 f303 	lsl.w	r3, r7, r3
 8002a3e:	4213      	tst	r3, r2
 8002a40:	f47f af78 	bne.w	8002934 <HAL_RCCEx_PeriphCLKConfig+0x38>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a44:	f7fe fae6 	bl	8001014 <HAL_GetTick>
 8002a48:	f241 3388 	movw	r3, #5000	; 0x1388
 8002a4c:	eba0 000a 	sub.w	r0, r0, sl
 8002a50:	4298      	cmp	r0, r3
 8002a52:	d9e6      	bls.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x126>
 8002a54:	e7bc      	b.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002a56:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a5a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002a5c:	e7e7      	b.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x132>
 8002a5e:	bf00      	nop
 8002a60:	40021000 	.word	0x40021000
 8002a64:	40007000 	.word	0x40007000
 8002a68:	10908100 	.word	0x10908100

08002a6c <HAL_TIM_PeriodElapsedCallback>:
 8002a6c:	4770      	bx	lr

08002a6e <HAL_TIM_OC_DelayElapsedCallback>:
 8002a6e:	4770      	bx	lr

08002a70 <HAL_TIM_IC_CaptureCallback>:
 8002a70:	4770      	bx	lr

08002a72 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002a72:	4770      	bx	lr

08002a74 <HAL_TIM_TriggerCallback>:
 8002a74:	4770      	bx	lr

08002a76 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a76:	6803      	ldr	r3, [r0, #0]
 8002a78:	691a      	ldr	r2, [r3, #16]
 8002a7a:	0791      	lsls	r1, r2, #30
{
 8002a7c:	b510      	push	{r4, lr}
 8002a7e:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a80:	d50f      	bpl.n	8002aa2 <HAL_TIM_IRQHandler+0x2c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002a82:	68da      	ldr	r2, [r3, #12]
 8002a84:	0792      	lsls	r2, r2, #30
 8002a86:	d50c      	bpl.n	8002aa2 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002a88:	f06f 0202 	mvn.w	r2, #2
 8002a8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a8e:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a90:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a92:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a94:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a96:	f000 8085 	beq.w	8002ba4 <HAL_TIM_IRQHandler+0x12e>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8002a9a:	f7ff ffe9 	bl	8002a70 <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002aa2:	6823      	ldr	r3, [r4, #0]
 8002aa4:	691a      	ldr	r2, [r3, #16]
 8002aa6:	0752      	lsls	r2, r2, #29
 8002aa8:	d510      	bpl.n	8002acc <HAL_TIM_IRQHandler+0x56>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002aaa:	68da      	ldr	r2, [r3, #12]
 8002aac:	0750      	lsls	r0, r2, #29
 8002aae:	d50d      	bpl.n	8002acc <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002ab0:	f06f 0204 	mvn.w	r2, #4
 8002ab4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ab6:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ab8:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002aba:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002abe:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002ac0:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ac2:	d075      	beq.n	8002bb0 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002ac4:	f7ff ffd4 	bl	8002a70 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	7723      	strb	r3, [r4, #28]
    } 
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002acc:	6823      	ldr	r3, [r4, #0]
 8002ace:	691a      	ldr	r2, [r3, #16]
 8002ad0:	0711      	lsls	r1, r2, #28
 8002ad2:	d50f      	bpl.n	8002af4 <HAL_TIM_IRQHandler+0x7e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002ad4:	68da      	ldr	r2, [r3, #12]
 8002ad6:	0712      	lsls	r2, r2, #28
 8002ad8:	d50c      	bpl.n	8002af4 <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002ada:	f06f 0208 	mvn.w	r2, #8
 8002ade:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ae0:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ae2:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ae4:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ae6:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002ae8:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002aea:	d067      	beq.n	8002bbc <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8002aec:	f7ff ffc0 	bl	8002a70 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002af0:	2300      	movs	r3, #0
 8002af2:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002af4:	6823      	ldr	r3, [r4, #0]
 8002af6:	691a      	ldr	r2, [r3, #16]
 8002af8:	06d0      	lsls	r0, r2, #27
 8002afa:	d510      	bpl.n	8002b1e <HAL_TIM_IRQHandler+0xa8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002afc:	68da      	ldr	r2, [r3, #12]
 8002afe:	06d1      	lsls	r1, r2, #27
 8002b00:	d50d      	bpl.n	8002b1e <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002b02:	f06f 0210 	mvn.w	r2, #16
 8002b06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b08:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b0a:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b0c:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b10:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002b12:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b14:	d058      	beq.n	8002bc8 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8002b16:	f7ff ffab 	bl	8002a70 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	7723      	strb	r3, [r4, #28]
    } 
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b1e:	6823      	ldr	r3, [r4, #0]
 8002b20:	691a      	ldr	r2, [r3, #16]
 8002b22:	07d2      	lsls	r2, r2, #31
 8002b24:	d508      	bpl.n	8002b38 <HAL_TIM_IRQHandler+0xc2>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002b26:	68da      	ldr	r2, [r3, #12]
 8002b28:	07d0      	lsls	r0, r2, #31
 8002b2a:	d505      	bpl.n	8002b38 <HAL_TIM_IRQHandler+0xc2>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002b2c:	f06f 0201 	mvn.w	r2, #1
 8002b30:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b32:	4620      	mov	r0, r4
 8002b34:	f7ff ff9a 	bl	8002a6c <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b38:	6823      	ldr	r3, [r4, #0]
 8002b3a:	691a      	ldr	r2, [r3, #16]
 8002b3c:	0611      	lsls	r1, r2, #24
 8002b3e:	d508      	bpl.n	8002b52 <HAL_TIM_IRQHandler+0xdc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002b40:	68da      	ldr	r2, [r3, #12]
 8002b42:	0612      	lsls	r2, r2, #24
 8002b44:	d505      	bpl.n	8002b52 <HAL_TIM_IRQHandler+0xdc>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002b46:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b4a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002b4c:	4620      	mov	r0, r4
 8002b4e:	f000 f98a 	bl	8002e66 <HAL_TIMEx_BreakCallback>
    }
  }

#if defined(TIM_FLAG_BREAK2)
  /* TIM Break input 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002b52:	6823      	ldr	r3, [r4, #0]
 8002b54:	691a      	ldr	r2, [r3, #16]
 8002b56:	05d0      	lsls	r0, r2, #23
 8002b58:	d508      	bpl.n	8002b6c <HAL_TIM_IRQHandler+0xf6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002b5a:	68da      	ldr	r2, [r3, #12]
 8002b5c:	0611      	lsls	r1, r2, #24
 8002b5e:	d505      	bpl.n	8002b6c <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002b60:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002b64:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8002b66:	4620      	mov	r0, r4
 8002b68:	f000 f97e 	bl	8002e68 <HAL_TIMEx_Break2Callback>
    }
  }
#endif

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b6c:	6823      	ldr	r3, [r4, #0]
 8002b6e:	691a      	ldr	r2, [r3, #16]
 8002b70:	0652      	lsls	r2, r2, #25
 8002b72:	d508      	bpl.n	8002b86 <HAL_TIM_IRQHandler+0x110>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002b74:	68da      	ldr	r2, [r3, #12]
 8002b76:	0650      	lsls	r0, r2, #25
 8002b78:	d505      	bpl.n	8002b86 <HAL_TIM_IRQHandler+0x110>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002b7a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b7e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002b80:	4620      	mov	r0, r4
 8002b82:	f7ff ff77 	bl	8002a74 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b86:	6823      	ldr	r3, [r4, #0]
 8002b88:	691a      	ldr	r2, [r3, #16]
 8002b8a:	0691      	lsls	r1, r2, #26
 8002b8c:	d522      	bpl.n	8002bd4 <HAL_TIM_IRQHandler+0x15e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002b8e:	68da      	ldr	r2, [r3, #12]
 8002b90:	0692      	lsls	r2, r2, #26
 8002b92:	d51f      	bpl.n	8002bd4 <HAL_TIM_IRQHandler+0x15e>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002b94:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8002b98:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002b9a:	611a      	str	r2, [r3, #16]
    }
  }
}
 8002b9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8002ba0:	f000 b960 	b.w	8002e64 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ba4:	f7ff ff63 	bl	8002a6e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ba8:	4620      	mov	r0, r4
 8002baa:	f7ff ff62 	bl	8002a72 <HAL_TIM_PWM_PulseFinishedCallback>
 8002bae:	e776      	b.n	8002a9e <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bb0:	f7ff ff5d 	bl	8002a6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bb4:	4620      	mov	r0, r4
 8002bb6:	f7ff ff5c 	bl	8002a72 <HAL_TIM_PWM_PulseFinishedCallback>
 8002bba:	e785      	b.n	8002ac8 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bbc:	f7ff ff57 	bl	8002a6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8002bc0:	4620      	mov	r0, r4
 8002bc2:	f7ff ff56 	bl	8002a72 <HAL_TIM_PWM_PulseFinishedCallback>
 8002bc6:	e793      	b.n	8002af0 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bc8:	f7ff ff51 	bl	8002a6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bcc:	4620      	mov	r0, r4
 8002bce:	f7ff ff50 	bl	8002a72 <HAL_TIM_PWM_PulseFinishedCallback>
 8002bd2:	e7a2      	b.n	8002b1a <HAL_TIM_IRQHandler+0xa4>
 8002bd4:	bd10      	pop	{r4, pc}
	...

08002bd8 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bd8:	4a21      	ldr	r2, [pc, #132]	; (8002c60 <TIM_Base_SetConfig+0x88>)
  tmpcr1 = TIMx->CR1;
 8002bda:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bdc:	4290      	cmp	r0, r2
{
 8002bde:	b510      	push	{r4, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002be0:	d005      	beq.n	8002bee <TIM_Base_SetConfig+0x16>
 8002be2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002be6:	d002      	beq.n	8002bee <TIM_Base_SetConfig+0x16>
 8002be8:	4c1e      	ldr	r4, [pc, #120]	; (8002c64 <TIM_Base_SetConfig+0x8c>)
 8002bea:	42a0      	cmp	r0, r4
 8002bec:	d10c      	bne.n	8002c08 <TIM_Base_SetConfig+0x30>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8002bee:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bf4:	4290      	cmp	r0, r2
    tmpcr1 |= Structure->CounterMode;
 8002bf6:	ea43 0304 	orr.w	r3, r3, r4
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bfa:	d010      	beq.n	8002c1e <TIM_Base_SetConfig+0x46>
 8002bfc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002c00:	d00d      	beq.n	8002c1e <TIM_Base_SetConfig+0x46>
 8002c02:	4a18      	ldr	r2, [pc, #96]	; (8002c64 <TIM_Base_SetConfig+0x8c>)
 8002c04:	4290      	cmp	r0, r2
 8002c06:	d00a      	beq.n	8002c1e <TIM_Base_SetConfig+0x46>
 8002c08:	4a17      	ldr	r2, [pc, #92]	; (8002c68 <TIM_Base_SetConfig+0x90>)
 8002c0a:	4290      	cmp	r0, r2
 8002c0c:	d007      	beq.n	8002c1e <TIM_Base_SetConfig+0x46>
 8002c0e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c12:	4290      	cmp	r0, r2
 8002c14:	d003      	beq.n	8002c1e <TIM_Base_SetConfig+0x46>
 8002c16:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c1a:	4290      	cmp	r0, r2
 8002c1c:	d103      	bne.n	8002c26 <TIM_Base_SetConfig+0x4e>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c1e:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c24:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c26:	694a      	ldr	r2, [r1, #20]
 8002c28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c2c:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8002c2e:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c30:	688b      	ldr	r3, [r1, #8]
 8002c32:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002c34:	680b      	ldr	r3, [r1, #0]
 8002c36:	6283      	str	r3, [r0, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8002c38:	4b09      	ldr	r3, [pc, #36]	; (8002c60 <TIM_Base_SetConfig+0x88>)
 8002c3a:	4298      	cmp	r0, r3
 8002c3c:	d00b      	beq.n	8002c56 <TIM_Base_SetConfig+0x7e>
 8002c3e:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8002c42:	4298      	cmp	r0, r3
 8002c44:	d007      	beq.n	8002c56 <TIM_Base_SetConfig+0x7e>
 8002c46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c4a:	4298      	cmp	r0, r3
 8002c4c:	d003      	beq.n	8002c56 <TIM_Base_SetConfig+0x7e>
 8002c4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c52:	4298      	cmp	r0, r3
 8002c54:	d101      	bne.n	8002c5a <TIM_Base_SetConfig+0x82>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c56:	690b      	ldr	r3, [r1, #16]
 8002c58:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	6143      	str	r3, [r0, #20]
 8002c5e:	bd10      	pop	{r4, pc}
 8002c60:	40012c00 	.word	0x40012c00
 8002c64:	40000400 	.word	0x40000400
 8002c68:	40014000 	.word	0x40014000

08002c6c <HAL_TIM_Base_Init>:
{ 
 8002c6c:	b510      	push	{r4, lr}
  if(htim == NULL)
 8002c6e:	4604      	mov	r4, r0
 8002c70:	b1a0      	cbz	r0, 8002c9c <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002c72:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002c76:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002c7a:	b91b      	cbnz	r3, 8002c84 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002c7c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002c80:	f002 fbbe 	bl	8005400 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002c84:	2302      	movs	r3, #2
 8002c86:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002c8a:	6820      	ldr	r0, [r4, #0]
 8002c8c:	1d21      	adds	r1, r4, #4
 8002c8e:	f7ff ffa3 	bl	8002bd8 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002c92:	2301      	movs	r3, #1
 8002c94:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002c98:	2000      	movs	r0, #0
 8002c9a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002c9c:	2001      	movs	r0, #1
}
 8002c9e:	bd10      	pop	{r4, pc}

08002ca0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ca0:	b510      	push	{r4, lr}
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 8002ca2:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ca4:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ca6:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002caa:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8002cae:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cb0:	6083      	str	r3, [r0, #8]
 8002cb2:	bd10      	pop	{r4, pc}

08002cb4 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002cb4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002cb8:	2b01      	cmp	r3, #1
{
 8002cba:	b570      	push	{r4, r5, r6, lr}
 8002cbc:	4604      	mov	r4, r0
 8002cbe:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8002cc2:	d01a      	beq.n	8002cfa <HAL_TIM_ConfigClockSource+0x46>
  htim->State = HAL_TIM_STATE_BUSY;
 8002cc4:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002cc8:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8002cca:	2301      	movs	r3, #1
 8002ccc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8002cd0:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cd2:	4b52      	ldr	r3, [pc, #328]	; (8002e1c <HAL_TIM_ConfigClockSource+0x168>)
 8002cd4:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8002cd6:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8002cd8:	680b      	ldr	r3, [r1, #0]
 8002cda:	2b40      	cmp	r3, #64	; 0x40
 8002cdc:	d075      	beq.n	8002dca <HAL_TIM_ConfigClockSource+0x116>
 8002cde:	d818      	bhi.n	8002d12 <HAL_TIM_ConfigClockSource+0x5e>
 8002ce0:	2b10      	cmp	r3, #16
 8002ce2:	f000 808f 	beq.w	8002e04 <HAL_TIM_ConfigClockSource+0x150>
 8002ce6:	d809      	bhi.n	8002cfc <HAL_TIM_ConfigClockSource+0x48>
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	f000 8085 	beq.w	8002df8 <HAL_TIM_ConfigClockSource+0x144>
  htim->State = HAL_TIM_STATE_READY;
 8002cee:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002cf0:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002cf2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002cf6:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002cfa:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8002cfc:	2b20      	cmp	r3, #32
 8002cfe:	f000 8087 	beq.w	8002e10 <HAL_TIM_ConfigClockSource+0x15c>
 8002d02:	2b30      	cmp	r3, #48	; 0x30
 8002d04:	d1f3      	bne.n	8002cee <HAL_TIM_ConfigClockSource+0x3a>
   tmpsmcr = TIMx->SMCR;
 8002d06:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002d08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002d0c:	f043 0337 	orr.w	r3, r3, #55	; 0x37
 8002d10:	e033      	b.n	8002d7a <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 8002d12:	2b70      	cmp	r3, #112	; 0x70
 8002d14:	d033      	beq.n	8002d7e <HAL_TIM_ConfigClockSource+0xca>
 8002d16:	d81b      	bhi.n	8002d50 <HAL_TIM_ConfigClockSource+0x9c>
 8002d18:	2b50      	cmp	r3, #80	; 0x50
 8002d1a:	d03f      	beq.n	8002d9c <HAL_TIM_ConfigClockSource+0xe8>
 8002d1c:	2b60      	cmp	r3, #96	; 0x60
 8002d1e:	d1e6      	bne.n	8002cee <HAL_TIM_ConfigClockSource+0x3a>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8002d20:	684d      	ldr	r5, [r1, #4]
 8002d22:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d24:	6a01      	ldr	r1, [r0, #32]
 8002d26:	f021 0110 	bic.w	r1, r1, #16
 8002d2a:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d2c:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8002d2e:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d30:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d34:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d38:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d3c:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8002d40:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002d42:	6203      	str	r3, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8002d44:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002d4a:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8002d4e:	e014      	b.n	8002d7a <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 8002d50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d54:	d00c      	beq.n	8002d70 <HAL_TIM_ConfigClockSource+0xbc>
 8002d56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d5a:	d1c8      	bne.n	8002cee <HAL_TIM_ConfigClockSource+0x3a>
      TIM_ETR_SetConfig(htim->Instance, 
 8002d5c:	68cb      	ldr	r3, [r1, #12]
 8002d5e:	684a      	ldr	r2, [r1, #4]
 8002d60:	6889      	ldr	r1, [r1, #8]
 8002d62:	f7ff ff9d 	bl	8002ca0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d66:	6822      	ldr	r2, [r4, #0]
 8002d68:	6893      	ldr	r3, [r2, #8]
 8002d6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d6e:	e013      	b.n	8002d98 <HAL_TIM_ConfigClockSource+0xe4>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002d70:	6883      	ldr	r3, [r0, #8]
 8002d72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d76:	f023 0307 	bic.w	r3, r3, #7
   TIMx->SMCR = tmpsmcr;
 8002d7a:	6083      	str	r3, [r0, #8]
 8002d7c:	e7b7      	b.n	8002cee <HAL_TIM_ConfigClockSource+0x3a>
      TIM_ETR_SetConfig(htim->Instance, 
 8002d7e:	68cb      	ldr	r3, [r1, #12]
 8002d80:	684a      	ldr	r2, [r1, #4]
 8002d82:	6889      	ldr	r1, [r1, #8]
 8002d84:	f7ff ff8c 	bl	8002ca0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002d88:	6822      	ldr	r2, [r4, #0]
 8002d8a:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d90:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d94:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d98:	6093      	str	r3, [r2, #8]
    break;
 8002d9a:	e7a8      	b.n	8002cee <HAL_TIM_ConfigClockSource+0x3a>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8002d9c:	684a      	ldr	r2, [r1, #4]
 8002d9e:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002da0:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002da2:	6a05      	ldr	r5, [r0, #32]
 8002da4:	f025 0501 	bic.w	r5, r5, #1
 8002da8:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8002daa:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002dac:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002db0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002db4:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8002db8:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8002dba:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002dbc:	6202      	str	r2, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8002dbe:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002dc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002dc4:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 8002dc8:	e7d7      	b.n	8002d7a <HAL_TIM_ConfigClockSource+0xc6>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8002dca:	684a      	ldr	r2, [r1, #4]
 8002dcc:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002dce:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002dd0:	6a05      	ldr	r5, [r0, #32]
 8002dd2:	f025 0501 	bic.w	r5, r5, #1
 8002dd6:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8002dd8:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002dda:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002dde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002de2:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8002de6:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8002de8:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002dea:	6202      	str	r2, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8002dec:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002df2:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8002df6:	e7c0      	b.n	8002d7a <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8002df8:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002dfe:	f043 0307 	orr.w	r3, r3, #7
 8002e02:	e7ba      	b.n	8002d7a <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8002e04:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002e0a:	f043 0317 	orr.w	r3, r3, #23
 8002e0e:	e7b4      	b.n	8002d7a <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8002e10:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002e12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002e16:	f043 0327 	orr.w	r3, r3, #39	; 0x27
 8002e1a:	e7ae      	b.n	8002d7a <HAL_TIM_ConfigClockSource+0xc6>
 8002e1c:	fffe0088 	.word	0xfffe0088

08002e20 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8002e20:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002e24:	2b01      	cmp	r3, #1
{
 8002e26:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8002e28:	d018      	beq.n	8002e5c <HAL_TIMEx_MasterConfigSynchronization+0x3c>

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e2a:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2U */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002e2c:	4d0c      	ldr	r5, [pc, #48]	; (8002e60 <HAL_TIMEx_MasterConfigSynchronization+0x40>)
  tmpcr2 = htim->Instance->CR2;
 8002e2e:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8002e30:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002e32:	42aa      	cmp	r2, r5
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002e34:	bf02      	ittt	eq
 8002e36:	684d      	ldreq	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002e38:	f423 0370 	biceq.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002e3c:	432b      	orreq	r3, r5
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e3e:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e40:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e46:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002e48:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e4c:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e4e:	4321      	orrs	r1, r4
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
 8002e50:	2300      	movs	r3, #0
  htim->Instance->SMCR = tmpsmcr;
 8002e52:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 8002e54:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  return HAL_OK;
 8002e58:	4618      	mov	r0, r3
 8002e5a:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 8002e5c:	2002      	movs	r0, #2
} 
 8002e5e:	bd30      	pop	{r4, r5, pc}
 8002e60:	40012c00 	.word	0x40012c00

08002e64 <HAL_TIMEx_CommutationCallback>:
 8002e64:	4770      	bx	lr

08002e66 <HAL_TIMEx_BreakCallback>:
 8002e66:	4770      	bx	lr

08002e68 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002e68:	4770      	bx	lr

08002e6a <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e6a:	6803      	ldr	r3, [r0, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002e72:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e74:	689a      	ldr	r2, [r3, #8]
 8002e76:	f022 0201 	bic.w	r2, r2, #1
 8002e7a:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e7c:	2320      	movs	r3, #32
 8002e7e:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
 8002e82:	4770      	bx	lr

08002e84 <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 8002e84:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8002e88:	2b20      	cmp	r3, #32
 8002e8a:	d13d      	bne.n	8002f08 <HAL_UART_Receive_IT+0x84>
    if((pData == NULL ) || (Size == 0U))
 8002e8c:	2900      	cmp	r1, #0
 8002e8e:	d039      	beq.n	8002f04 <HAL_UART_Receive_IT+0x80>
 8002e90:	2a00      	cmp	r2, #0
 8002e92:	d037      	beq.n	8002f04 <HAL_UART_Receive_IT+0x80>
    __HAL_LOCK(huart);
 8002e94:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d035      	beq.n	8002f08 <HAL_UART_Receive_IT+0x84>
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    UART_MASK_COMPUTATION(huart);
 8002ea2:	6883      	ldr	r3, [r0, #8]
    huart->pRxBuffPtr = pData;
 8002ea4:	6541      	str	r1, [r0, #84]	; 0x54
    UART_MASK_COMPUTATION(huart);
 8002ea6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferSize = Size;
 8002eaa:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->RxXferCount = Size;
 8002eae:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8002eb2:	d119      	bne.n	8002ee8 <HAL_UART_Receive_IT+0x64>
 8002eb4:	6903      	ldr	r3, [r0, #16]
 8002eb6:	b9ab      	cbnz	r3, 8002ee4 <HAL_UART_Receive_IT+0x60>
 8002eb8:	f240 13ff 	movw	r3, #511	; 0x1ff
 8002ebc:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ec0:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ec2:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ec4:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ec6:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002eca:	6802      	ldr	r2, [r0, #0]
    __HAL_UNLOCK(huart);
 8002ecc:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ed0:	6891      	ldr	r1, [r2, #8]
 8002ed2:	f041 0101 	orr.w	r1, r1, #1
 8002ed6:	6091      	str	r1, [r2, #8]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002ed8:	6811      	ldr	r1, [r2, #0]
 8002eda:	f441 7190 	orr.w	r1, r1, #288	; 0x120
 8002ede:	6011      	str	r1, [r2, #0]
    return HAL_OK;
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 8002ee4:	23ff      	movs	r3, #255	; 0xff
 8002ee6:	e7e9      	b.n	8002ebc <HAL_UART_Receive_IT+0x38>
 8002ee8:	b923      	cbnz	r3, 8002ef4 <HAL_UART_Receive_IT+0x70>
 8002eea:	6903      	ldr	r3, [r0, #16]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d0f9      	beq.n	8002ee4 <HAL_UART_Receive_IT+0x60>
 8002ef0:	237f      	movs	r3, #127	; 0x7f
 8002ef2:	e7e3      	b.n	8002ebc <HAL_UART_Receive_IT+0x38>
 8002ef4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ef8:	d1e2      	bne.n	8002ec0 <HAL_UART_Receive_IT+0x3c>
 8002efa:	6903      	ldr	r3, [r0, #16]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d0f7      	beq.n	8002ef0 <HAL_UART_Receive_IT+0x6c>
 8002f00:	233f      	movs	r3, #63	; 0x3f
 8002f02:	e7db      	b.n	8002ebc <HAL_UART_Receive_IT+0x38>
      return HAL_ERROR;
 8002f04:	2001      	movs	r0, #1
 8002f06:	4770      	bx	lr
    return HAL_BUSY;
 8002f08:	2002      	movs	r0, #2
}
 8002f0a:	4770      	bx	lr

08002f0c <HAL_UART_TxCpltCallback>:
 8002f0c:	4770      	bx	lr

08002f0e <HAL_UART_RxCpltCallback>:
 8002f0e:	4770      	bx	lr

08002f10 <HAL_UART_ErrorCallback>:
 8002f10:	4770      	bx	lr

08002f12 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002f12:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8002f14:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8002f16:	2300      	movs	r3, #0
 8002f18:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8002f1c:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52

  HAL_UART_ErrorCallback(huart);
 8002f20:	f7ff fff6 	bl	8002f10 <HAL_UART_ErrorCallback>
 8002f24:	bd08      	pop	{r3, pc}
	...

08002f28 <UART_SetConfig>:
{
 8002f28:	b538      	push	{r3, r4, r5, lr}
 8002f2a:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002f2c:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f2e:	6921      	ldr	r1, [r4, #16]
 8002f30:	68a3      	ldr	r3, [r4, #8]
 8002f32:	69c2      	ldr	r2, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002f34:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f36:	430b      	orrs	r3, r1
 8002f38:	6961      	ldr	r1, [r4, #20]
 8002f3a:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002f3c:	4949      	ldr	r1, [pc, #292]	; (8003064 <UART_SetConfig+0x13c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f3e:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002f40:	4001      	ands	r1, r0
 8002f42:	430b      	orrs	r3, r1
 8002f44:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f46:	686b      	ldr	r3, [r5, #4]
 8002f48:	68e1      	ldr	r1, [r4, #12]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002f4a:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f4c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f50:	430b      	orrs	r3, r1
 8002f52:	606b      	str	r3, [r5, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002f54:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002f56:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002f58:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002f5c:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002f5e:	430b      	orrs	r3, r1
 8002f60:	60ab      	str	r3, [r5, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f62:	4b41      	ldr	r3, [pc, #260]	; (8003068 <UART_SetConfig+0x140>)
 8002f64:	429d      	cmp	r5, r3
 8002f66:	d112      	bne.n	8002f8e <UART_SetConfig+0x66>
 8002f68:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8002f6c:	493f      	ldr	r1, [pc, #252]	; (800306c <UART_SetConfig+0x144>)
 8002f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f70:	f003 0303 	and.w	r3, r3, #3
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f74:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002f78:	5ccb      	ldrb	r3, [r1, r3]
 8002f7a:	d13b      	bne.n	8002ff4 <UART_SetConfig+0xcc>
    switch (clocksource)
 8002f7c:	2b08      	cmp	r3, #8
 8002f7e:	d836      	bhi.n	8002fee <UART_SetConfig+0xc6>
 8002f80:	e8df f003 	tbb	[pc, r3]
 8002f84:	3524210f 	.word	0x3524210f
 8002f88:	3535352d 	.word	0x3535352d
 8002f8c:	30          	.byte	0x30
 8002f8d:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f8e:	4b38      	ldr	r3, [pc, #224]	; (8003070 <UART_SetConfig+0x148>)
 8002f90:	429d      	cmp	r5, r3
 8002f92:	d003      	beq.n	8002f9c <UART_SetConfig+0x74>
 8002f94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f98:	429d      	cmp	r5, r3
 8002f9a:	d15e      	bne.n	800305a <UART_SetConfig+0x132>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f9c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002fa0:	d131      	bne.n	8003006 <UART_SetConfig+0xde>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002fa2:	f7ff fc7b 	bl	800289c <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002fa6:	6861      	ldr	r1, [r4, #4]
 8002fa8:	084a      	lsrs	r2, r1, #1
 8002faa:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8002fae:	fbb3 f3f1 	udiv	r3, r3, r1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002fb2:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002fb4:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 8002fb6:	f023 020f 	bic.w	r2, r3, #15
    huart->Instance->BRR = brrtemp;
 8002fba:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002fbc:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	60cb      	str	r3, [r1, #12]
 8002fc4:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002fc6:	f7ff fc81 	bl	80028cc <HAL_RCC_GetPCLK2Freq>
 8002fca:	e7ec      	b.n	8002fa6 <UART_SetConfig+0x7e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002fcc:	6860      	ldr	r0, [r4, #4]
 8002fce:	0843      	lsrs	r3, r0, #1
 8002fd0:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002fd4:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002fd8:	fbb3 f3f0 	udiv	r3, r3, r0
 8002fdc:	e7e9      	b.n	8002fb2 <UART_SetConfig+0x8a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002fde:	f7ff fb81 	bl	80026e4 <HAL_RCC_GetSysClockFreq>
 8002fe2:	e7e0      	b.n	8002fa6 <UART_SetConfig+0x7e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002fe4:	6860      	ldr	r0, [r4, #4]
 8002fe6:	0843      	lsrs	r3, r0, #1
 8002fe8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002fec:	e7f4      	b.n	8002fd8 <UART_SetConfig+0xb0>
        ret = HAL_ERROR;
 8002fee:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	e7e0      	b.n	8002fb6 <UART_SetConfig+0x8e>
    switch (clocksource)
 8002ff4:	2b08      	cmp	r3, #8
 8002ff6:	d833      	bhi.n	8003060 <UART_SetConfig+0x138>
 8002ff8:	e8df f003 	tbb	[pc, r3]
 8002ffc:	321b1005 	.word	0x321b1005
 8003000:	32323227 	.word	0x32323227
 8003004:	2a          	.byte	0x2a
 8003005:	00          	.byte	0x00
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003006:	f7ff fc49 	bl	800289c <HAL_RCC_GetPCLK1Freq>
 800300a:	6863      	ldr	r3, [r4, #4]
 800300c:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8003010:	fbb0 f0f3 	udiv	r0, r0, r3
 8003014:	b280      	uxth	r0, r0
 8003016:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003018:	2000      	movs	r0, #0
        break;
 800301a:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800301c:	f7ff fc56 	bl	80028cc <HAL_RCC_GetPCLK2Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003020:	6863      	ldr	r3, [r4, #4]
 8003022:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8003026:	fbb0 f0f3 	udiv	r0, r0, r3
 800302a:	4b0f      	ldr	r3, [pc, #60]	; (8003068 <UART_SetConfig+0x140>)
 800302c:	b280      	uxth	r0, r0
 800302e:	60d8      	str	r0, [r3, #12]
 8003030:	e7f2      	b.n	8003018 <UART_SetConfig+0xf0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003032:	6862      	ldr	r2, [r4, #4]
 8003034:	0853      	lsrs	r3, r2, #1
 8003036:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 800303a:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800303e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003042:	4a09      	ldr	r2, [pc, #36]	; (8003068 <UART_SetConfig+0x140>)
 8003044:	b29b      	uxth	r3, r3
 8003046:	60d3      	str	r3, [r2, #12]
 8003048:	e7e6      	b.n	8003018 <UART_SetConfig+0xf0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800304a:	f7ff fb4b 	bl	80026e4 <HAL_RCC_GetSysClockFreq>
 800304e:	e7e7      	b.n	8003020 <UART_SetConfig+0xf8>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003050:	6862      	ldr	r2, [r4, #4]
 8003052:	0853      	lsrs	r3, r2, #1
 8003054:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003058:	e7f1      	b.n	800303e <UART_SetConfig+0x116>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800305a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800305e:	d0c6      	beq.n	8002fee <UART_SetConfig+0xc6>
        ret = HAL_ERROR;
 8003060:	2001      	movs	r0, #1
  return ret;
 8003062:	bd38      	pop	{r3, r4, r5, pc}
 8003064:	efff69f3 	.word	0xefff69f3
 8003068:	40013800 	.word	0x40013800
 800306c:	08009b68 	.word	0x08009b68
 8003070:	40004400 	.word	0x40004400

08003074 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003074:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003076:	07da      	lsls	r2, r3, #31
{
 8003078:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800307a:	d506      	bpl.n	800308a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800307c:	6801      	ldr	r1, [r0, #0]
 800307e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8003080:	684a      	ldr	r2, [r1, #4]
 8003082:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8003086:	4322      	orrs	r2, r4
 8003088:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800308a:	079c      	lsls	r4, r3, #30
 800308c:	d506      	bpl.n	800309c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800308e:	6801      	ldr	r1, [r0, #0]
 8003090:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8003092:	684a      	ldr	r2, [r1, #4]
 8003094:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003098:	4322      	orrs	r2, r4
 800309a:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800309c:	0759      	lsls	r1, r3, #29
 800309e:	d506      	bpl.n	80030ae <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80030a0:	6801      	ldr	r1, [r0, #0]
 80030a2:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80030a4:	684a      	ldr	r2, [r1, #4]
 80030a6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80030aa:	4322      	orrs	r2, r4
 80030ac:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80030ae:	071a      	lsls	r2, r3, #28
 80030b0:	d506      	bpl.n	80030c0 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80030b2:	6801      	ldr	r1, [r0, #0]
 80030b4:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80030b6:	684a      	ldr	r2, [r1, #4]
 80030b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030bc:	4322      	orrs	r2, r4
 80030be:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80030c0:	06dc      	lsls	r4, r3, #27
 80030c2:	d506      	bpl.n	80030d2 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80030c4:	6801      	ldr	r1, [r0, #0]
 80030c6:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80030c8:	688a      	ldr	r2, [r1, #8]
 80030ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80030ce:	4322      	orrs	r2, r4
 80030d0:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80030d2:	0699      	lsls	r1, r3, #26
 80030d4:	d506      	bpl.n	80030e4 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80030d6:	6801      	ldr	r1, [r0, #0]
 80030d8:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80030da:	688a      	ldr	r2, [r1, #8]
 80030dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030e0:	4322      	orrs	r2, r4
 80030e2:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80030e4:	065a      	lsls	r2, r3, #25
 80030e6:	d50f      	bpl.n	8003108 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80030e8:	6801      	ldr	r1, [r0, #0]
 80030ea:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80030ec:	684a      	ldr	r2, [r1, #4]
 80030ee:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80030f2:	4322      	orrs	r2, r4
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80030f4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80030f8:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80030fa:	d105      	bne.n	8003108 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80030fc:	684a      	ldr	r2, [r1, #4]
 80030fe:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003100:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8003104:	4322      	orrs	r2, r4
 8003106:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003108:	061b      	lsls	r3, r3, #24
 800310a:	d506      	bpl.n	800311a <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800310c:	6802      	ldr	r2, [r0, #0]
 800310e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003110:	6853      	ldr	r3, [r2, #4]
 8003112:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003116:	430b      	orrs	r3, r1
 8003118:	6053      	str	r3, [r2, #4]
 800311a:	bd10      	pop	{r4, pc}

0800311c <UART_WaitOnFlagUntilTimeout>:
{
 800311c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003120:	9d06      	ldr	r5, [sp, #24]
 8003122:	4604      	mov	r4, r0
 8003124:	460f      	mov	r7, r1
 8003126:	4616      	mov	r6, r2
 8003128:	4698      	mov	r8, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800312a:	6821      	ldr	r1, [r4, #0]
 800312c:	69ca      	ldr	r2, [r1, #28]
 800312e:	ea37 0302 	bics.w	r3, r7, r2
 8003132:	bf0c      	ite	eq
 8003134:	2201      	moveq	r2, #1
 8003136:	2200      	movne	r2, #0
 8003138:	42b2      	cmp	r2, r6
 800313a:	d002      	beq.n	8003142 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 800313c:	2000      	movs	r0, #0
}
 800313e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8003142:	1c6b      	adds	r3, r5, #1
 8003144:	d0f2      	beq.n	800312c <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8003146:	b99d      	cbnz	r5, 8003170 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003148:	6823      	ldr	r3, [r4, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003150:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003152:	689a      	ldr	r2, [r3, #8]
 8003154:	f022 0201 	bic.w	r2, r2, #1
 8003158:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 800315a:	2320      	movs	r3, #32
 800315c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8003160:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8003164:	2300      	movs	r3, #0
 8003166:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 800316a:	2003      	movs	r0, #3
 800316c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8003170:	f7fd ff50 	bl	8001014 <HAL_GetTick>
 8003174:	eba0 0008 	sub.w	r0, r0, r8
 8003178:	4285      	cmp	r5, r0
 800317a:	d2d6      	bcs.n	800312a <UART_WaitOnFlagUntilTimeout+0xe>
 800317c:	e7e4      	b.n	8003148 <UART_WaitOnFlagUntilTimeout+0x2c>

0800317e <HAL_UART_Transmit>:
{
 800317e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003182:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8003184:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8003188:	2b20      	cmp	r3, #32
{
 800318a:	4604      	mov	r4, r0
 800318c:	460d      	mov	r5, r1
 800318e:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8003190:	d14c      	bne.n	800322c <HAL_UART_Transmit+0xae>
    if((pData == NULL ) || (Size == 0U))
 8003192:	2900      	cmp	r1, #0
 8003194:	d048      	beq.n	8003228 <HAL_UART_Transmit+0xaa>
 8003196:	2a00      	cmp	r2, #0
 8003198:	d046      	beq.n	8003228 <HAL_UART_Transmit+0xaa>
    __HAL_LOCK(huart);
 800319a:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d044      	beq.n	800322c <HAL_UART_Transmit+0xae>
 80031a2:	2301      	movs	r3, #1
 80031a4:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031a8:	2300      	movs	r3, #0
 80031aa:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031ac:	2321      	movs	r3, #33	; 0x21
 80031ae:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    tickstart = HAL_GetTick();
 80031b2:	f7fd ff2f 	bl	8001014 <HAL_GetTick>
    huart->TxXferSize = Size;
 80031b6:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 80031ba:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 80031bc:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 80031c0:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 80031c4:	b292      	uxth	r2, r2
 80031c6:	b962      	cbnz	r2, 80031e2 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031c8:	9700      	str	r7, [sp, #0]
 80031ca:	4633      	mov	r3, r6
 80031cc:	2140      	movs	r1, #64	; 0x40
 80031ce:	4620      	mov	r0, r4
 80031d0:	f7ff ffa4 	bl	800311c <UART_WaitOnFlagUntilTimeout>
 80031d4:	b998      	cbnz	r0, 80031fe <HAL_UART_Transmit+0x80>
    huart->gState = HAL_UART_STATE_READY;
 80031d6:	2320      	movs	r3, #32
 80031d8:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    __HAL_UNLOCK(huart);
 80031dc:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    return HAL_OK;
 80031e0:	e00e      	b.n	8003200 <HAL_UART_Transmit+0x82>
      huart->TxXferCount--;
 80031e2:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031e6:	9700      	str	r7, [sp, #0]
      huart->TxXferCount--;
 80031e8:	3b01      	subs	r3, #1
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031f0:	2200      	movs	r2, #0
 80031f2:	4633      	mov	r3, r6
 80031f4:	2180      	movs	r1, #128	; 0x80
 80031f6:	4620      	mov	r0, r4
 80031f8:	f7ff ff90 	bl	800311c <UART_WaitOnFlagUntilTimeout>
 80031fc:	b118      	cbz	r0, 8003206 <HAL_UART_Transmit+0x88>
        return HAL_TIMEOUT;
 80031fe:	2003      	movs	r0, #3
}
 8003200:	b002      	add	sp, #8
 8003202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003206:	68a3      	ldr	r3, [r4, #8]
 8003208:	6822      	ldr	r2, [r4, #0]
 800320a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800320e:	d107      	bne.n	8003220 <HAL_UART_Transmit+0xa2>
 8003210:	6923      	ldr	r3, [r4, #16]
 8003212:	b92b      	cbnz	r3, 8003220 <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8003214:	f835 3b02 	ldrh.w	r3, [r5], #2
 8003218:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800321c:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2U;
 800321e:	e7cf      	b.n	80031c0 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8003220:	782b      	ldrb	r3, [r5, #0]
 8003222:	8513      	strh	r3, [r2, #40]	; 0x28
 8003224:	3501      	adds	r5, #1
 8003226:	e7cb      	b.n	80031c0 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8003228:	2001      	movs	r0, #1
 800322a:	e7e9      	b.n	8003200 <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 800322c:	2002      	movs	r0, #2
 800322e:	e7e7      	b.n	8003200 <HAL_UART_Transmit+0x82>

08003230 <UART_CheckIdleState>:
{
 8003230:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003232:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003234:	2600      	movs	r6, #0
 8003236:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8003238:	f7fd feec 	bl	8001014 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800323c:	6823      	ldr	r3, [r4, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8003242:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003244:	d417      	bmi.n	8003276 <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003246:	6823      	ldr	r3, [r4, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	075b      	lsls	r3, r3, #29
 800324c:	d50a      	bpl.n	8003264 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800324e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003252:	9300      	str	r3, [sp, #0]
 8003254:	2200      	movs	r2, #0
 8003256:	462b      	mov	r3, r5
 8003258:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800325c:	4620      	mov	r0, r4
 800325e:	f7ff ff5d 	bl	800311c <UART_WaitOnFlagUntilTimeout>
 8003262:	b9a0      	cbnz	r0, 800328e <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 8003264:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8003266:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 8003268:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 800326c:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 8003270:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 8003274:	e00c      	b.n	8003290 <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003276:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800327a:	9300      	str	r3, [sp, #0]
 800327c:	4632      	mov	r2, r6
 800327e:	4603      	mov	r3, r0
 8003280:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003284:	4620      	mov	r0, r4
 8003286:	f7ff ff49 	bl	800311c <UART_WaitOnFlagUntilTimeout>
 800328a:	2800      	cmp	r0, #0
 800328c:	d0db      	beq.n	8003246 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 800328e:	2003      	movs	r0, #3
}
 8003290:	b002      	add	sp, #8
 8003292:	bd70      	pop	{r4, r5, r6, pc}

08003294 <HAL_UART_Init>:
{
 8003294:	b510      	push	{r4, lr}
  if(huart == NULL)
 8003296:	4604      	mov	r4, r0
 8003298:	b360      	cbz	r0, 80032f4 <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 800329a:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 800329e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80032a2:	b91b      	cbnz	r3, 80032ac <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80032a4:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 80032a8:	f002 f8de 	bl	8005468 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80032ac:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80032ae:	2324      	movs	r3, #36	; 0x24
 80032b0:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 80032b4:	6813      	ldr	r3, [r2, #0]
 80032b6:	f023 0301 	bic.w	r3, r3, #1
 80032ba:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80032bc:	4620      	mov	r0, r4
 80032be:	f7ff fe33 	bl	8002f28 <UART_SetConfig>
 80032c2:	2801      	cmp	r0, #1
 80032c4:	d016      	beq.n	80032f4 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80032c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80032c8:	b113      	cbz	r3, 80032d0 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 80032ca:	4620      	mov	r0, r4
 80032cc:	f7ff fed2 	bl	8003074 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032d0:	6823      	ldr	r3, [r4, #0]
 80032d2:	685a      	ldr	r2, [r3, #4]
 80032d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032d8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032da:	689a      	ldr	r2, [r3, #8]
 80032dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032e0:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80032e8:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80032ea:	601a      	str	r2, [r3, #0]
}
 80032ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80032f0:	f7ff bf9e 	b.w	8003230 <UART_CheckIdleState>
}
 80032f4:	2001      	movs	r0, #1
 80032f6:	bd10      	pop	{r4, pc}

080032f8 <UART_Transmit_IT>:
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80032f8:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80032fc:	2b21      	cmp	r3, #33	; 0x21
 80032fe:	d127      	bne.n	8003350 <UART_Transmit_IT+0x58>
  {
    if(huart->TxXferCount == 0U)
 8003300:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8003304:	6802      	ldr	r2, [r0, #0]
 8003306:	b29b      	uxth	r3, r3
 8003308:	b94b      	cbnz	r3, 800331e <UART_Transmit_IT+0x26>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800330a:	6811      	ldr	r1, [r2, #0]
 800330c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8003310:	6011      	str	r1, [r2, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003312:	6811      	ldr	r1, [r2, #0]
 8003314:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8003318:	6011      	str	r1, [r2, #0]
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
      }
      huart->TxXferCount--;

      return HAL_OK;
 800331a:	2000      	movs	r0, #0
 800331c:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800331e:	6883      	ldr	r3, [r0, #8]
 8003320:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003324:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8003326:	d10e      	bne.n	8003346 <UART_Transmit_IT+0x4e>
 8003328:	6901      	ldr	r1, [r0, #16]
 800332a:	b961      	cbnz	r1, 8003346 <UART_Transmit_IT+0x4e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800332c:	f833 1b02 	ldrh.w	r1, [r3], #2
 8003330:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8003334:	8511      	strh	r1, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8003336:	64c3      	str	r3, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 8003338:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 800333c:	3b01      	subs	r3, #1
 800333e:	b29b      	uxth	r3, r3
 8003340:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 8003344:	e7e9      	b.n	800331a <UART_Transmit_IT+0x22>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8003346:	1c59      	adds	r1, r3, #1
 8003348:	64c1      	str	r1, [r0, #76]	; 0x4c
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	8513      	strh	r3, [r2, #40]	; 0x28
 800334e:	e7f3      	b.n	8003338 <UART_Transmit_IT+0x40>
    }
  }
  else
  {
    return HAL_BUSY;
 8003350:	2002      	movs	r0, #2
  }
}
 8003352:	4770      	bx	lr

08003354 <UART_EndTransmit_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003354:	6801      	ldr	r1, [r0, #0]
{
 8003356:	b508      	push	{r3, lr}
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003358:	680b      	ldr	r3, [r1, #0]
 800335a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800335e:	600b      	str	r3, [r1, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003360:	2320      	movs	r3, #32
 8003362:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

  HAL_UART_TxCpltCallback(huart);
 8003366:	f7ff fdd1 	bl	8002f0c <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 800336a:	2000      	movs	r0, #0
 800336c:	bd08      	pop	{r3, pc}

0800336e <UART_Receive_IT>:
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 800336e:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8003372:	2b22      	cmp	r3, #34	; 0x22
{
 8003374:	b510      	push	{r4, lr}
 8003376:	6803      	ldr	r3, [r0, #0]
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003378:	d129      	bne.n	80033ce <UART_Receive_IT+0x60>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800337a:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800337c:	6883      	ldr	r3, [r0, #8]
  uint16_t  uhMask = huart->Mask;
 800337e:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003382:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003386:	ea02 0201 	and.w	r2, r2, r1
 800338a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800338c:	d11b      	bne.n	80033c6 <UART_Receive_IT+0x58>
 800338e:	6901      	ldr	r1, [r0, #16]
 8003390:	b9c9      	cbnz	r1, 80033c6 <UART_Receive_IT+0x58>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
      *tmp = (uint16_t)(uhdata & uhMask);
 8003392:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr +=2U;
 8003396:	6543      	str	r3, [r0, #84]	; 0x54
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
    }

    if(--huart->RxXferCount == 0U)
 8003398:	f8b0 405a 	ldrh.w	r4, [r0, #90]	; 0x5a
 800339c:	3c01      	subs	r4, #1
 800339e:	b2a4      	uxth	r4, r4
 80033a0:	f8a0 405a 	strh.w	r4, [r0, #90]	; 0x5a
 80033a4:	b96c      	cbnz	r4, 80033c2 <UART_Receive_IT+0x54>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033a6:	6803      	ldr	r3, [r0, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80033ae:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033b0:	689a      	ldr	r2, [r3, #8]
 80033b2:	f022 0201 	bic.w	r2, r2, #1
 80033b6:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80033b8:	2320      	movs	r3, #32
 80033ba:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a

      HAL_UART_RxCpltCallback(huart);
 80033be:	f7ff fda6 	bl	8002f0e <HAL_UART_RxCpltCallback>

      return HAL_OK;
    }

    return HAL_OK;
 80033c2:	2000      	movs	r0, #0
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);

    return HAL_BUSY;
  }
}
 80033c4:	bd10      	pop	{r4, pc}
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 80033c6:	1c59      	adds	r1, r3, #1
 80033c8:	6541      	str	r1, [r0, #84]	; 0x54
 80033ca:	701a      	strb	r2, [r3, #0]
 80033cc:	e7e4      	b.n	8003398 <UART_Receive_IT+0x2a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80033ce:	699a      	ldr	r2, [r3, #24]
 80033d0:	f042 0208 	orr.w	r2, r2, #8
 80033d4:	619a      	str	r2, [r3, #24]
    return HAL_BUSY;
 80033d6:	2002      	movs	r0, #2
 80033d8:	bd10      	pop	{r4, pc}
	...

080033dc <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80033dc:	6802      	ldr	r2, [r0, #0]
 80033de:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80033e0:	6811      	ldr	r1, [r2, #0]
{
 80033e2:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 80033e4:	f013 050f 	ands.w	r5, r3, #15
{
 80033e8:	4604      	mov	r4, r0
  if (errorflags == RESET)
 80033ea:	d107      	bne.n	80033fc <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80033ec:	069e      	lsls	r6, r3, #26
 80033ee:	d505      	bpl.n	80033fc <HAL_UART_IRQHandler+0x20>
 80033f0:	068e      	lsls	r6, r1, #26
 80033f2:	d503      	bpl.n	80033fc <HAL_UART_IRQHandler+0x20>
}
 80033f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 80033f8:	f7ff bfb9 	b.w	800336e <UART_Receive_IT>
  cr3its = READ_REG(huart->Instance->CR3);
 80033fc:	6890      	ldr	r0, [r2, #8]
  if(   (errorflags != RESET)
 80033fe:	2d00      	cmp	r5, #0
 8003400:	d05c      	beq.n	80034bc <HAL_UART_IRQHandler+0xe0>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8003402:	f010 0501 	ands.w	r5, r0, #1
 8003406:	d102      	bne.n	800340e <HAL_UART_IRQHandler+0x32>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8003408:	f411 7f90 	tst.w	r1, #288	; 0x120
 800340c:	d056      	beq.n	80034bc <HAL_UART_IRQHandler+0xe0>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800340e:	07d8      	lsls	r0, r3, #31
 8003410:	d507      	bpl.n	8003422 <HAL_UART_IRQHandler+0x46>
 8003412:	05ce      	lsls	r6, r1, #23
 8003414:	d505      	bpl.n	8003422 <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8003416:	2001      	movs	r0, #1
 8003418:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800341a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800341c:	f040 0001 	orr.w	r0, r0, #1
 8003420:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003422:	0798      	lsls	r0, r3, #30
 8003424:	d506      	bpl.n	8003434 <HAL_UART_IRQHandler+0x58>
 8003426:	b12d      	cbz	r5, 8003434 <HAL_UART_IRQHandler+0x58>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8003428:	2002      	movs	r0, #2
 800342a:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800342c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800342e:	f040 0004 	orr.w	r0, r0, #4
 8003432:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003434:	075e      	lsls	r6, r3, #29
 8003436:	d506      	bpl.n	8003446 <HAL_UART_IRQHandler+0x6a>
 8003438:	b12d      	cbz	r5, 8003446 <HAL_UART_IRQHandler+0x6a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 800343a:	2004      	movs	r0, #4
 800343c:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800343e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8003440:	f040 0002 	orr.w	r0, r0, #2
 8003444:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8003446:	0718      	lsls	r0, r3, #28
 8003448:	d507      	bpl.n	800345a <HAL_UART_IRQHandler+0x7e>
 800344a:	068e      	lsls	r6, r1, #26
 800344c:	d400      	bmi.n	8003450 <HAL_UART_IRQHandler+0x74>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800344e:	b125      	cbz	r5, 800345a <HAL_UART_IRQHandler+0x7e>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8003450:	2008      	movs	r0, #8
 8003452:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003454:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8003456:	4302      	orrs	r2, r0
 8003458:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800345a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800345c:	2a00      	cmp	r2, #0
 800345e:	d050      	beq.n	8003502 <HAL_UART_IRQHandler+0x126>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003460:	0698      	lsls	r0, r3, #26
 8003462:	d504      	bpl.n	800346e <HAL_UART_IRQHandler+0x92>
 8003464:	068a      	lsls	r2, r1, #26
 8003466:	d502      	bpl.n	800346e <HAL_UART_IRQHandler+0x92>
        UART_Receive_IT(huart);
 8003468:	4620      	mov	r0, r4
 800346a:	f7ff ff80 	bl	800336e <UART_Receive_IT>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800346e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8003470:	071b      	lsls	r3, r3, #28
        UART_EndRxTransfer(huart);
 8003472:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8003474:	d404      	bmi.n	8003480 <HAL_UART_IRQHandler+0xa4>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8003476:	6823      	ldr	r3, [r4, #0]
 8003478:	689d      	ldr	r5, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800347a:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 800347e:	d019      	beq.n	80034b4 <HAL_UART_IRQHandler+0xd8>
        UART_EndRxTransfer(huart);
 8003480:	f7ff fcf3 	bl	8002e6a <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003484:	6823      	ldr	r3, [r4, #0]
 8003486:	689a      	ldr	r2, [r3, #8]
 8003488:	0656      	lsls	r6, r2, #25
 800348a:	d50f      	bpl.n	80034ac <HAL_UART_IRQHandler+0xd0>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800348c:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 800348e:	6e60      	ldr	r0, [r4, #100]	; 0x64
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003490:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003494:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8003496:	b148      	cbz	r0, 80034ac <HAL_UART_IRQHandler+0xd0>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003498:	4b1a      	ldr	r3, [pc, #104]	; (8003504 <HAL_UART_IRQHandler+0x128>)
 800349a:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800349c:	f7fe fa70 	bl	8001980 <HAL_DMA_Abort_IT>
 80034a0:	b378      	cbz	r0, 8003502 <HAL_UART_IRQHandler+0x126>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80034a2:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
 80034a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80034a8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80034aa:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 80034ac:	4620      	mov	r0, r4
 80034ae:	f7ff fd2f 	bl	8002f10 <HAL_UART_ErrorCallback>
 80034b2:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 80034b4:	f7ff fd2c 	bl	8002f10 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034b8:	66e5      	str	r5, [r4, #108]	; 0x6c
 80034ba:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 80034bc:	02dd      	lsls	r5, r3, #11
 80034be:	d50e      	bpl.n	80034de <HAL_UART_IRQHandler+0x102>
 80034c0:	0246      	lsls	r6, r0, #9
 80034c2:	d50c      	bpl.n	80034de <HAL_UART_IRQHandler+0x102>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 80034c4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80034c8:	6213      	str	r3, [r2, #32]
    huart->gState  = HAL_UART_STATE_READY;
 80034ca:	2320      	movs	r3, #32
 80034cc:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    HAL_UARTEx_WakeupCallback(huart);
 80034d0:	4620      	mov	r0, r4
    huart->RxState = HAL_UART_STATE_READY;
 80034d2:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
}
 80034d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 80034da:	f000 b815 	b.w	8003508 <HAL_UARTEx_WakeupCallback>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80034de:	061d      	lsls	r5, r3, #24
 80034e0:	d506      	bpl.n	80034f0 <HAL_UART_IRQHandler+0x114>
 80034e2:	0608      	lsls	r0, r1, #24
 80034e4:	d504      	bpl.n	80034f0 <HAL_UART_IRQHandler+0x114>
    UART_Transmit_IT(huart);
 80034e6:	4620      	mov	r0, r4
}
 80034e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    UART_Transmit_IT(huart);
 80034ec:	f7ff bf04 	b.w	80032f8 <UART_Transmit_IT>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80034f0:	065a      	lsls	r2, r3, #25
 80034f2:	d506      	bpl.n	8003502 <HAL_UART_IRQHandler+0x126>
 80034f4:	064b      	lsls	r3, r1, #25
 80034f6:	d504      	bpl.n	8003502 <HAL_UART_IRQHandler+0x126>
    UART_EndTransmit_IT(huart);
 80034f8:	4620      	mov	r0, r4
}
 80034fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    UART_EndTransmit_IT(huart);
 80034fe:	f7ff bf29 	b.w	8003354 <UART_EndTransmit_IT>
 8003502:	bd70      	pop	{r4, r5, r6, pc}
 8003504:	08002f13 	.word	0x08002f13

08003508 <HAL_UARTEx_WakeupCallback>:
  * @brief  UART wakeup from Stop mode callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003508:	4770      	bx	lr

0800350a <null_ptr_check>:
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 800350a:	b148      	cbz	r0, 8003520 <null_ptr_check+0x16>
 800350c:	6843      	ldr	r3, [r0, #4]
 800350e:	b13b      	cbz	r3, 8003520 <null_ptr_check+0x16>
 8003510:	6883      	ldr	r3, [r0, #8]
 8003512:	b12b      	cbz	r3, 8003520 <null_ptr_check+0x16>
 8003514:	68c0      	ldr	r0, [r0, #12]
 8003516:	fab0 f080 	clz	r0, r0
 800351a:	0940      	lsrs	r0, r0, #5
 800351c:	4240      	negs	r0, r0
 800351e:	4770      	bx	lr
    {
        /* Device structure pointer is not valid */
        rslt = BME280_E_NULL_PTR;
 8003520:	f04f 30ff 	mov.w	r0, #4294967295
        /* Device structure is fine */
        rslt = BME280_OK;
    }

    return rslt;
}
 8003524:	4770      	bx	lr

08003526 <bme280_get_regs>:
{
 8003526:	b570      	push	{r4, r5, r6, lr}
 8003528:	4605      	mov	r5, r0
    rslt = null_ptr_check(dev);
 800352a:	4618      	mov	r0, r3
{
 800352c:	461c      	mov	r4, r3
    rslt = null_ptr_check(dev);
 800352e:	f7ff ffec 	bl	800350a <null_ptr_check>
    if (rslt == BME280_OK)
 8003532:	b970      	cbnz	r0, 8003552 <bme280_get_regs+0x2c>
        if (dev->intf != BME280_I2C_INTF)
 8003534:	78a3      	ldrb	r3, [r4, #2]
        rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8003536:	6866      	ldr	r6, [r4, #4]
 8003538:	7860      	ldrb	r0, [r4, #1]
        if (dev->intf != BME280_I2C_INTF)
 800353a:	2b01      	cmp	r3, #1
            reg_addr = reg_addr | 0x80;
 800353c:	bf18      	it	ne
 800353e:	f045 0580 	orrne.w	r5, r5, #128	; 0x80
        rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8003542:	4613      	mov	r3, r2
 8003544:	460a      	mov	r2, r1
 8003546:	4629      	mov	r1, r5
 8003548:	47b0      	blx	r6
            rslt = BME280_E_COMM_FAIL;
 800354a:	2800      	cmp	r0, #0
 800354c:	bf18      	it	ne
 800354e:	f06f 0003 	mvnne.w	r0, #3
}
 8003552:	bd70      	pop	{r4, r5, r6, pc}

08003554 <bme280_set_regs>:
{
 8003554:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003556:	2a0a      	cmp	r2, #10
 8003558:	bf28      	it	cs
 800355a:	220a      	movcs	r2, #10
 800355c:	b087      	sub	sp, #28
 800355e:	4605      	mov	r5, r0
    rslt = null_ptr_check(dev);
 8003560:	4618      	mov	r0, r3
{
 8003562:	461e      	mov	r6, r3
 8003564:	4614      	mov	r4, r2
    rslt = null_ptr_check(dev);
 8003566:	f7ff ffd0 	bl	800350a <null_ptr_check>
    if ((rslt == BME280_OK) && (reg_addr != NULL) && (reg_data != NULL))
 800356a:	2800      	cmp	r0, #0
 800356c:	d136      	bne.n	80035dc <bme280_set_regs+0x88>
 800356e:	2d00      	cmp	r5, #0
 8003570:	d034      	beq.n	80035dc <bme280_set_regs+0x88>
 8003572:	2900      	cmp	r1, #0
 8003574:	d032      	beq.n	80035dc <bme280_set_regs+0x88>
        if (len != 0)
 8003576:	2a00      	cmp	r2, #0
 8003578:	d033      	beq.n	80035e2 <bme280_set_regs+0x8e>
            temp_buff[0] = reg_data[0];
 800357a:	780b      	ldrb	r3, [r1, #0]
 800357c:	f88d 3004 	strb.w	r3, [sp, #4]
            if (dev->intf != BME280_I2C_INTF)
 8003580:	78b3      	ldrb	r3, [r6, #2]
 8003582:	2b01      	cmp	r3, #1
 8003584:	d10d      	bne.n	80035a2 <bme280_set_regs+0x4e>
            if (len > 1)
 8003586:	2c01      	cmp	r4, #1
 8003588:	aa01      	add	r2, sp, #4
 800358a:	d116      	bne.n	80035ba <bme280_set_regs+0x66>
                temp_len = len;
 800358c:	4623      	mov	r3, r4
            rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 800358e:	68b4      	ldr	r4, [r6, #8]
 8003590:	7829      	ldrb	r1, [r5, #0]
 8003592:	7870      	ldrb	r0, [r6, #1]
 8003594:	47a0      	blx	r4
                rslt = BME280_E_COMM_FAIL;
 8003596:	2800      	cmp	r0, #0
 8003598:	bf18      	it	ne
 800359a:	f06f 0003 	mvnne.w	r0, #3
}
 800359e:	b007      	add	sp, #28
 80035a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035a2:	3a01      	subs	r2, #1
 80035a4:	1e6b      	subs	r3, r5, #1
 80035a6:	fa55 f282 	uxtab	r2, r5, r2
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 80035aa:	7858      	ldrb	r0, [r3, #1]
 80035ac:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80035b0:	f803 0f01 	strb.w	r0, [r3, #1]!
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d1f8      	bne.n	80035aa <bme280_set_regs+0x56>
 80035b8:	e7e5      	b.n	8003586 <bme280_set_regs+0x32>
 80035ba:	2301      	movs	r3, #1
        temp_buff[(index * 2) - 1] = reg_addr[index];
 80035bc:	eb02 0043 	add.w	r0, r2, r3, lsl #1
 80035c0:	5cef      	ldrb	r7, [r5, r3]
 80035c2:	f800 7c01 	strb.w	r7, [r0, #-1]
        temp_buff[index * 2] = reg_data[index];
 80035c6:	5cc8      	ldrb	r0, [r1, r3]
 80035c8:	f802 0013 	strb.w	r0, [r2, r3, lsl #1]
 80035cc:	3301      	adds	r3, #1
    for (index = 1; index < len; index++)
 80035ce:	b2d8      	uxtb	r0, r3
 80035d0:	42a0      	cmp	r0, r4
 80035d2:	d3f3      	bcc.n	80035bc <bme280_set_regs+0x68>
                temp_len = ((len * 2) - 1);
 80035d4:	0064      	lsls	r4, r4, #1
 80035d6:	3c01      	subs	r4, #1
 80035d8:	b2a3      	uxth	r3, r4
 80035da:	e7d8      	b.n	800358e <bme280_set_regs+0x3a>
        rslt = BME280_E_NULL_PTR;
 80035dc:	f04f 30ff 	mov.w	r0, #4294967295
 80035e0:	e7dd      	b.n	800359e <bme280_set_regs+0x4a>
            rslt = BME280_E_INVALID_LEN;
 80035e2:	f06f 0002 	mvn.w	r0, #2
 80035e6:	e7da      	b.n	800359e <bme280_set_regs+0x4a>

080035e8 <set_osr_humidity_settings.isra.8>:
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
 80035e8:	b513      	push	{r0, r1, r4, lr}
 80035ea:	460c      	mov	r4, r1
    ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 80035ec:	a902      	add	r1, sp, #8
    uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 80035ee:	23f2      	movs	r3, #242	; 0xf2
    ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 80035f0:	f000 0007 	and.w	r0, r0, #7
    uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 80035f4:	f88d 3007 	strb.w	r3, [sp, #7]
    ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 80035f8:	f801 0d03 	strb.w	r0, [r1, #-3]!
    rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 80035fc:	4623      	mov	r3, r4
 80035fe:	2201      	movs	r2, #1
 8003600:	f10d 0007 	add.w	r0, sp, #7
 8003604:	f7ff ffa6 	bl	8003554 <bme280_set_regs>
    if (rslt == BME280_OK)
 8003608:	b988      	cbnz	r0, 800362e <set_osr_humidity_settings.isra.8+0x46>
        reg_addr = BME280_CTRL_MEAS_ADDR;
 800360a:	20f4      	movs	r0, #244	; 0xf4
        rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 800360c:	4623      	mov	r3, r4
 800360e:	2201      	movs	r2, #1
 8003610:	f10d 0106 	add.w	r1, sp, #6
        reg_addr = BME280_CTRL_MEAS_ADDR;
 8003614:	f88d 0007 	strb.w	r0, [sp, #7]
        rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 8003618:	f7ff ff85 	bl	8003526 <bme280_get_regs>
        if (rslt == BME280_OK)
 800361c:	b938      	cbnz	r0, 800362e <set_osr_humidity_settings.isra.8+0x46>
            rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 800361e:	4623      	mov	r3, r4
 8003620:	2201      	movs	r2, #1
 8003622:	f10d 0106 	add.w	r1, sp, #6
 8003626:	f10d 0007 	add.w	r0, sp, #7
 800362a:	f7ff ff93 	bl	8003554 <bme280_set_regs>
}
 800362e:	b002      	add	sp, #8
 8003630:	bd10      	pop	{r4, pc}

08003632 <set_osr_press_temp_settings>:
{
 8003632:	b573      	push	{r0, r1, r4, r5, r6, lr}
    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8003634:	4613      	mov	r3, r2
{
 8003636:	4606      	mov	r6, r0
 8003638:	460d      	mov	r5, r1
 800363a:	4614      	mov	r4, r2
    uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 800363c:	20f4      	movs	r0, #244	; 0xf4
    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 800363e:	2201      	movs	r2, #1
 8003640:	f10d 0107 	add.w	r1, sp, #7
    uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 8003644:	f88d 0006 	strb.w	r0, [sp, #6]
    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8003648:	f7ff ff6d 	bl	8003526 <bme280_get_regs>
    if (rslt == BME280_OK)
 800364c:	b9f8      	cbnz	r0, 800368e <set_osr_press_temp_settings+0x5c>
        if (desired_settings & BME280_OSR_PRESS_SEL)
 800364e:	07f2      	lsls	r2, r6, #31
 8003650:	d50a      	bpl.n	8003668 <set_osr_press_temp_settings+0x36>
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 8003652:	782b      	ldrb	r3, [r5, #0]
 8003654:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	f003 031c 	and.w	r3, r3, #28
 800365e:	f022 021c 	bic.w	r2, r2, #28
 8003662:	4313      	orrs	r3, r2
 8003664:	f88d 3007 	strb.w	r3, [sp, #7]
        if (desired_settings & BME280_OSR_TEMP_SEL)
 8003668:	07b3      	lsls	r3, r6, #30
 800366a:	d508      	bpl.n	800367e <set_osr_press_temp_settings+0x4c>
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 800366c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003670:	786a      	ldrb	r2, [r5, #1]
 8003672:	f003 031f 	and.w	r3, r3, #31
 8003676:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800367a:	f88d 3007 	strb.w	r3, [sp, #7]
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 800367e:	4623      	mov	r3, r4
 8003680:	2201      	movs	r2, #1
 8003682:	f10d 0107 	add.w	r1, sp, #7
 8003686:	f10d 0006 	add.w	r0, sp, #6
 800368a:	f7ff ff63 	bl	8003554 <bme280_set_regs>
}
 800368e:	b002      	add	sp, #8
 8003690:	bd70      	pop	{r4, r5, r6, pc}

08003692 <set_filter_standby_settings>:
{
 8003692:	b573      	push	{r0, r1, r4, r5, r6, lr}
    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8003694:	4613      	mov	r3, r2
{
 8003696:	4606      	mov	r6, r0
 8003698:	460d      	mov	r5, r1
 800369a:	4614      	mov	r4, r2
    uint8_t reg_addr = BME280_CONFIG_ADDR;
 800369c:	20f5      	movs	r0, #245	; 0xf5
    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 800369e:	2201      	movs	r2, #1
 80036a0:	f10d 0107 	add.w	r1, sp, #7
    uint8_t reg_addr = BME280_CONFIG_ADDR;
 80036a4:	f88d 0006 	strb.w	r0, [sp, #6]
    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 80036a8:	f7ff ff3d 	bl	8003526 <bme280_get_regs>
    if (rslt == BME280_OK)
 80036ac:	b9f8      	cbnz	r0, 80036ee <set_filter_standby_settings+0x5c>
        if (desired_settings & BME280_FILTER_SEL)
 80036ae:	0732      	lsls	r2, r6, #28
 80036b0:	d50a      	bpl.n	80036c8 <set_filter_standby_settings+0x36>
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 80036b2:	78eb      	ldrb	r3, [r5, #3]
 80036b4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	f003 031c 	and.w	r3, r3, #28
 80036be:	f022 021c 	bic.w	r2, r2, #28
 80036c2:	4313      	orrs	r3, r2
 80036c4:	f88d 3007 	strb.w	r3, [sp, #7]
        if (desired_settings & BME280_STANDBY_SEL)
 80036c8:	06f3      	lsls	r3, r6, #27
 80036ca:	d508      	bpl.n	80036de <set_filter_standby_settings+0x4c>
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 80036cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80036d0:	792a      	ldrb	r2, [r5, #4]
 80036d2:	f003 031f 	and.w	r3, r3, #31
 80036d6:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 80036da:	f88d 3007 	strb.w	r3, [sp, #7]
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 80036de:	4623      	mov	r3, r4
 80036e0:	2201      	movs	r2, #1
 80036e2:	f10d 0107 	add.w	r1, sp, #7
 80036e6:	f10d 0006 	add.w	r0, sp, #6
 80036ea:	f7ff ff33 	bl	8003554 <bme280_set_regs>
}
 80036ee:	b002      	add	sp, #8
 80036f0:	bd70      	pop	{r4, r5, r6, pc}

080036f2 <bme280_get_sensor_mode>:
{
 80036f2:	b510      	push	{r4, lr}
 80036f4:	4604      	mov	r4, r0
    rslt = null_ptr_check(dev);
 80036f6:	4608      	mov	r0, r1
 80036f8:	f7ff ff07 	bl	800350a <null_ptr_check>
    if (rslt == BME280_OK)
 80036fc:	b948      	cbnz	r0, 8003712 <bme280_get_sensor_mode+0x20>
        rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 80036fe:	460b      	mov	r3, r1
 8003700:	2201      	movs	r2, #1
 8003702:	4621      	mov	r1, r4
 8003704:	20f4      	movs	r0, #244	; 0xf4
 8003706:	f7ff ff0e 	bl	8003526 <bme280_get_regs>
        *sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 800370a:	7823      	ldrb	r3, [r4, #0]
 800370c:	f003 0303 	and.w	r3, r3, #3
 8003710:	7023      	strb	r3, [r4, #0]
}
 8003712:	bd10      	pop	{r4, pc}

08003714 <bme280_soft_reset>:
{
 8003714:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t reg_addr = BME280_RESET_ADDR;
 8003716:	23e0      	movs	r3, #224	; 0xe0
 8003718:	f88d 3006 	strb.w	r3, [sp, #6]
    uint8_t soft_rst_cmd = 0xB6;
 800371c:	23b6      	movs	r3, #182	; 0xb6
{
 800371e:	4605      	mov	r5, r0
    uint8_t soft_rst_cmd = 0xB6;
 8003720:	f88d 3007 	strb.w	r3, [sp, #7]
    rslt = null_ptr_check(dev);
 8003724:	f7ff fef1 	bl	800350a <null_ptr_check>
    if (rslt == BME280_OK)
 8003728:	4604      	mov	r4, r0
 800372a:	b958      	cbnz	r0, 8003744 <bme280_soft_reset+0x30>
        rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 800372c:	462b      	mov	r3, r5
 800372e:	2201      	movs	r2, #1
 8003730:	f10d 0107 	add.w	r1, sp, #7
 8003734:	f10d 0006 	add.w	r0, sp, #6
 8003738:	f7ff ff0c 	bl	8003554 <bme280_set_regs>
        dev->delay_ms(2);
 800373c:	68eb      	ldr	r3, [r5, #12]
        rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 800373e:	4604      	mov	r4, r0
        dev->delay_ms(2);
 8003740:	2002      	movs	r0, #2
 8003742:	4798      	blx	r3
}
 8003744:	4620      	mov	r0, r4
 8003746:	b003      	add	sp, #12
 8003748:	bd30      	pop	{r4, r5, pc}

0800374a <bme280_init>:
{
 800374a:	b530      	push	{r4, r5, lr}
 800374c:	b089      	sub	sp, #36	; 0x24
    uint8_t chip_id = 0;
 800374e:	2300      	movs	r3, #0
{
 8003750:	4604      	mov	r4, r0
    uint8_t chip_id = 0;
 8003752:	f88d 3003 	strb.w	r3, [sp, #3]
    rslt = null_ptr_check(dev);
 8003756:	f7ff fed8 	bl	800350a <null_ptr_check>
    if (rslt == BME280_OK)
 800375a:	2800      	cmp	r0, #0
 800375c:	f040 80a1 	bne.w	80038a2 <bme280_init+0x158>
 8003760:	2505      	movs	r5, #5
            rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 8003762:	4623      	mov	r3, r4
 8003764:	2201      	movs	r2, #1
 8003766:	f10d 0103 	add.w	r1, sp, #3
 800376a:	20d0      	movs	r0, #208	; 0xd0
 800376c:	f7ff fedb 	bl	8003526 <bme280_get_regs>
            if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID))
 8003770:	2800      	cmp	r0, #0
 8003772:	f040 8098 	bne.w	80038a6 <bme280_init+0x15c>
 8003776:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800377a:	2b60      	cmp	r3, #96	; 0x60
 800377c:	f040 8093 	bne.w	80038a6 <bme280_init+0x15c>
                dev->chip_id = chip_id;
 8003780:	7023      	strb	r3, [r4, #0]
                rslt = bme280_soft_reset(dev);
 8003782:	4620      	mov	r0, r4
 8003784:	f7ff ffc6 	bl	8003714 <bme280_soft_reset>
                if (rslt == BME280_OK)
 8003788:	2800      	cmp	r0, #0
 800378a:	f040 808a 	bne.w	80038a2 <bme280_init+0x158>
    uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = { 0 };
 800378e:	4601      	mov	r1, r0
 8003790:	221a      	movs	r2, #26
 8003792:	a801      	add	r0, sp, #4
 8003794:	f001 ffc9 	bl	800572a <memset>
    rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 8003798:	4623      	mov	r3, r4
 800379a:	221a      	movs	r2, #26
 800379c:	a901      	add	r1, sp, #4
 800379e:	2088      	movs	r0, #136	; 0x88
 80037a0:	f7ff fec1 	bl	8003526 <bme280_get_regs>
    if (rslt == BME280_OK)
 80037a4:	2800      	cmp	r0, #0
 80037a6:	d17c      	bne.n	80038a2 <bme280_init+0x158>
    calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 80037a8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80037ac:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80037b0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80037b4:	8223      	strh	r3, [r4, #16]
    calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 80037b6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80037ba:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80037be:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80037c2:	8263      	strh	r3, [r4, #18]
    calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 80037c4:	f89d 2009 	ldrb.w	r2, [sp, #9]
 80037c8:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80037cc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80037d0:	82a3      	strh	r3, [r4, #20]
    calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 80037d2:	f89d 200b 	ldrb.w	r2, [sp, #11]
 80037d6:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80037da:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80037de:	82e3      	strh	r3, [r4, #22]
    calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 80037e0:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80037e4:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80037e8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80037ec:	8323      	strh	r3, [r4, #24]
    calib_data->dig_P3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 80037ee:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80037f2:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80037f6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80037fa:	8363      	strh	r3, [r4, #26]
    calib_data->dig_P4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 80037fc:	f89d 2011 	ldrb.w	r2, [sp, #17]
 8003800:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8003804:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003808:	83a3      	strh	r3, [r4, #28]
    calib_data->dig_P5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 800380a:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800380e:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8003812:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003816:	83e3      	strh	r3, [r4, #30]
    calib_data->dig_P6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 8003818:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800381c:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8003820:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003824:	8423      	strh	r3, [r4, #32]
    calib_data->dig_P7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 8003826:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800382a:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800382e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003832:	8463      	strh	r3, [r4, #34]	; 0x22
    calib_data->dig_P8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 8003834:	f89d 2019 	ldrb.w	r2, [sp, #25]
 8003838:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800383c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003840:	84a3      	strh	r3, [r4, #36]	; 0x24
    calib_data->dig_P9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 8003842:	f89d 201b 	ldrb.w	r2, [sp, #27]
 8003846:	f89d 301a 	ldrb.w	r3, [sp, #26]
 800384a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800384e:	84e3      	strh	r3, [r4, #38]	; 0x26
    calib_data->dig_H1 = reg_data[25];
 8003850:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8003854:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 8003858:	2207      	movs	r2, #7
 800385a:	4623      	mov	r3, r4
 800385c:	a901      	add	r1, sp, #4
 800385e:	20e1      	movs	r0, #225	; 0xe1
 8003860:	f7ff fe61 	bl	8003526 <bme280_get_regs>
        if (rslt == BME280_OK)
 8003864:	b9e8      	cbnz	r0, 80038a2 <bme280_init+0x158>
    calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8003866:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800386a:	f89d 3004 	ldrb.w	r3, [sp, #4]
    dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 800386e:	f99d 1007 	ldrsb.w	r1, [sp, #7]
    calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8003872:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003876:	8563      	strh	r3, [r4, #42]	; 0x2a
    calib_data->dig_H3 = reg_data[2];
 8003878:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800387c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
 8003880:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8003884:	f003 020f 	and.w	r2, r3, #15
    calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
 8003888:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 800388c:	85e2      	strh	r2, [r4, #46]	; 0x2e
    dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 800388e:	f99d 2009 	ldrsb.w	r2, [sp, #9]
    dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
 8003892:	091b      	lsrs	r3, r3, #4
    calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
 8003894:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8003898:	8623      	strh	r3, [r4, #48]	; 0x30
    calib_data->dig_H6 = (int8_t)reg_data[6];
 800389a:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800389e:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
}
 80038a2:	b009      	add	sp, #36	; 0x24
 80038a4:	bd30      	pop	{r4, r5, pc}
            dev->delay_ms(1);
 80038a6:	68e3      	ldr	r3, [r4, #12]
 80038a8:	2001      	movs	r0, #1
 80038aa:	3d01      	subs	r5, #1
 80038ac:	4798      	blx	r3
        while (try_count)
 80038ae:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 80038b2:	f47f af56 	bne.w	8003762 <bme280_init+0x18>
            rslt = BME280_E_DEV_NOT_FOUND;
 80038b6:	f06f 0001 	mvn.w	r0, #1
 80038ba:	e7f2      	b.n	80038a2 <bme280_init+0x158>

080038bc <put_device_to_sleep>:
{
 80038bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 80038be:	2204      	movs	r2, #4
{
 80038c0:	4604      	mov	r4, r0
    rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 80038c2:	4603      	mov	r3, r0
 80038c4:	eb0d 0102 	add.w	r1, sp, r2
 80038c8:	20f2      	movs	r0, #242	; 0xf2
 80038ca:	f7ff fe2c 	bl	8003526 <bme280_get_regs>
    if (rslt == BME280_OK)
 80038ce:	bb58      	cbnz	r0, 8003928 <put_device_to_sleep+0x6c>
    settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 80038d0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80038d4:	f003 0307 	and.w	r3, r3, #7
 80038d8:	f88d 300a 	strb.w	r3, [sp, #10]
    settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 80038dc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80038e0:	f3c3 0282 	ubfx	r2, r3, #2, #3
    settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 80038e4:	095b      	lsrs	r3, r3, #5
 80038e6:	f88d 3009 	strb.w	r3, [sp, #9]
    settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 80038ea:	f89d 3007 	ldrb.w	r3, [sp, #7]
    settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 80038ee:	f88d 2008 	strb.w	r2, [sp, #8]
        rslt = bme280_soft_reset(dev);
 80038f2:	4620      	mov	r0, r4
    settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 80038f4:	f3c3 0282 	ubfx	r2, r3, #2, #3
    settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 80038f8:	095b      	lsrs	r3, r3, #5
    settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 80038fa:	f88d 200b 	strb.w	r2, [sp, #11]
    settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 80038fe:	f88d 300c 	strb.w	r3, [sp, #12]
        rslt = bme280_soft_reset(dev);
 8003902:	f7ff ff07 	bl	8003714 <bme280_soft_reset>
        if (rslt == BME280_OK)
 8003906:	b978      	cbnz	r0, 8003928 <put_device_to_sleep+0x6c>
        rslt = set_osr_humidity_settings(settings, dev);
 8003908:	4621      	mov	r1, r4
 800390a:	f89d 000a 	ldrb.w	r0, [sp, #10]
 800390e:	f7ff fe6b 	bl	80035e8 <set_osr_humidity_settings.isra.8>
        rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 8003912:	4622      	mov	r2, r4
 8003914:	a902      	add	r1, sp, #8
 8003916:	201f      	movs	r0, #31
 8003918:	f7ff fe8b 	bl	8003632 <set_osr_press_temp_settings>
    if (rslt == BME280_OK)
 800391c:	b920      	cbnz	r0, 8003928 <put_device_to_sleep+0x6c>
        rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 800391e:	4622      	mov	r2, r4
 8003920:	a902      	add	r1, sp, #8
 8003922:	201f      	movs	r0, #31
 8003924:	f7ff feb5 	bl	8003692 <set_filter_standby_settings>
}
 8003928:	b004      	add	sp, #16
 800392a:	bd10      	pop	{r4, pc}

0800392c <bme280_set_sensor_settings>:
{
 800392c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800392e:	4606      	mov	r6, r0
    rslt = null_ptr_check(dev);
 8003930:	4608      	mov	r0, r1
{
 8003932:	460c      	mov	r4, r1
    rslt = null_ptr_check(dev);
 8003934:	f7ff fde9 	bl	800350a <null_ptr_check>
    if (rslt == BME280_OK)
 8003938:	4605      	mov	r5, r0
 800393a:	b968      	cbnz	r0, 8003958 <bme280_set_sensor_settings+0x2c>
        rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 800393c:	f10d 0007 	add.w	r0, sp, #7
 8003940:	f7ff fed7 	bl	80036f2 <bme280_get_sensor_mode>
        if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 8003944:	4605      	mov	r5, r0
 8003946:	b938      	cbnz	r0, 8003958 <bme280_set_sensor_settings+0x2c>
 8003948:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800394c:	b93b      	cbnz	r3, 800395e <bme280_set_sensor_settings+0x32>
    if (sub_settings & desired_settings)
 800394e:	0771      	lsls	r1, r6, #29
 8003950:	d11c      	bne.n	800398c <bme280_set_sensor_settings+0x60>
 8003952:	f016 0f18 	tst.w	r6, #24
 8003956:	d11d      	bne.n	8003994 <bme280_set_sensor_settings+0x68>
}
 8003958:	4628      	mov	r0, r5
 800395a:	b002      	add	sp, #8
 800395c:	bd70      	pop	{r4, r5, r6, pc}
            rslt = put_device_to_sleep(dev);
 800395e:	4620      	mov	r0, r4
 8003960:	f7ff ffac 	bl	80038bc <put_device_to_sleep>
        if (rslt == BME280_OK)
 8003964:	2800      	cmp	r0, #0
 8003966:	d0f2      	beq.n	800394e <bme280_set_sensor_settings+0x22>
                rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 8003968:	4605      	mov	r5, r0
    return rslt;
 800396a:	e7f5      	b.n	8003958 <bme280_set_sensor_settings+0x2c>
        rslt = set_osr_humidity_settings(settings, dev);
 800396c:	4621      	mov	r1, r4
 800396e:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
 8003972:	f7ff fe39 	bl	80035e8 <set_osr_humidity_settings.isra.8>
    if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 8003976:	07b2      	lsls	r2, r6, #30
 8003978:	d005      	beq.n	8003986 <bme280_set_sensor_settings+0x5a>
        rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 800397a:	4622      	mov	r2, r4
 800397c:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8003980:	4630      	mov	r0, r6
 8003982:	f7ff fe56 	bl	8003632 <set_osr_press_temp_settings>
            if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 8003986:	2800      	cmp	r0, #0
 8003988:	d1ee      	bne.n	8003968 <bme280_set_sensor_settings+0x3c>
 800398a:	e7e2      	b.n	8003952 <bme280_set_sensor_settings+0x26>
    if (desired_settings & BME280_OSR_HUM_SEL)
 800398c:	0773      	lsls	r3, r6, #29
 800398e:	d4ed      	bmi.n	800396c <bme280_set_sensor_settings+0x40>
    int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 8003990:	2001      	movs	r0, #1
 8003992:	e7f0      	b.n	8003976 <bme280_set_sensor_settings+0x4a>
                rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 8003994:	4622      	mov	r2, r4
 8003996:	f104 0138 	add.w	r1, r4, #56	; 0x38
 800399a:	4630      	mov	r0, r6
 800399c:	f7ff fe79 	bl	8003692 <set_filter_standby_settings>
 80039a0:	e7e2      	b.n	8003968 <bme280_set_sensor_settings+0x3c>

080039a2 <bme280_set_sensor_mode>:
{
 80039a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80039a4:	4605      	mov	r5, r0
    rslt = null_ptr_check(dev);
 80039a6:	4608      	mov	r0, r1
{
 80039a8:	460c      	mov	r4, r1
    rslt = null_ptr_check(dev);
 80039aa:	f7ff fdae 	bl	800350a <null_ptr_check>
    if (rslt == BME280_OK)
 80039ae:	bb40      	cbnz	r0, 8003a02 <bme280_set_sensor_mode+0x60>
        rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 80039b0:	f10d 0005 	add.w	r0, sp, #5
 80039b4:	f7ff fe9d 	bl	80036f2 <bme280_get_sensor_mode>
        if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 80039b8:	bb18      	cbnz	r0, 8003a02 <bme280_set_sensor_mode+0x60>
 80039ba:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80039be:	b9db      	cbnz	r3, 80039f8 <bme280_set_sensor_mode+0x56>
    uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 80039c0:	20f4      	movs	r0, #244	; 0xf4
    rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 80039c2:	4623      	mov	r3, r4
 80039c4:	2201      	movs	r2, #1
 80039c6:	f10d 0107 	add.w	r1, sp, #7
    uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 80039ca:	f88d 0006 	strb.w	r0, [sp, #6]
    rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 80039ce:	f7ff fdaa 	bl	8003526 <bme280_get_regs>
    if (rslt == BME280_OK)
 80039d2:	b9b0      	cbnz	r0, 8003a02 <bme280_set_sensor_mode+0x60>
        sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 80039d4:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80039d8:	f005 0503 	and.w	r5, r5, #3
 80039dc:	f020 0003 	bic.w	r0, r0, #3
 80039e0:	4328      	orrs	r0, r5
 80039e2:	f88d 0007 	strb.w	r0, [sp, #7]
        rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 80039e6:	4623      	mov	r3, r4
 80039e8:	2201      	movs	r2, #1
 80039ea:	f10d 0107 	add.w	r1, sp, #7
 80039ee:	f10d 0006 	add.w	r0, sp, #6
 80039f2:	f7ff fdaf 	bl	8003554 <bme280_set_regs>
 80039f6:	e004      	b.n	8003a02 <bme280_set_sensor_mode+0x60>
            rslt = put_device_to_sleep(dev);
 80039f8:	4620      	mov	r0, r4
 80039fa:	f7ff ff5f 	bl	80038bc <put_device_to_sleep>
        if (rslt == BME280_OK)
 80039fe:	2800      	cmp	r0, #0
 8003a00:	d0de      	beq.n	80039c0 <bme280_set_sensor_mode+0x1e>
}
 8003a02:	b003      	add	sp, #12
 8003a04:	bd30      	pop	{r4, r5, pc}

08003a06 <bme280_parse_sensor_data>:
    data_lsb = (uint32_t)reg_data[1] << 4;
 8003a06:	7843      	ldrb	r3, [r0, #1]
    data_msb = (uint32_t)reg_data[0] << 12;
 8003a08:	7802      	ldrb	r2, [r0, #0]
    data_lsb = (uint32_t)reg_data[1] << 4;
 8003a0a:	011b      	lsls	r3, r3, #4
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8003a0c:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
    data_xlsb = (uint32_t)reg_data[2] >> 4;
 8003a10:	7882      	ldrb	r2, [r0, #2]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8003a12:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
 8003a16:	600b      	str	r3, [r1, #0]
    data_lsb = (uint32_t)reg_data[4] << 4;
 8003a18:	7903      	ldrb	r3, [r0, #4]
    data_msb = (uint32_t)reg_data[3] << 12;
 8003a1a:	78c2      	ldrb	r2, [r0, #3]
    data_lsb = (uint32_t)reg_data[4] << 4;
 8003a1c:	011b      	lsls	r3, r3, #4
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8003a1e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
    data_xlsb = (uint32_t)reg_data[5] >> 4;
 8003a22:	7942      	ldrb	r2, [r0, #5]
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8003a24:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
 8003a28:	604b      	str	r3, [r1, #4]
    data_lsb = (uint32_t)reg_data[6] << 8;
 8003a2a:	7982      	ldrb	r2, [r0, #6]
    data_msb = (uint32_t)reg_data[7];
 8003a2c:	79c3      	ldrb	r3, [r0, #7]
    uncomp_data->humidity = data_msb | data_lsb;
 8003a2e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003a32:	608b      	str	r3, [r1, #8]
 8003a34:	4770      	bx	lr
	...

08003a38 <bme280_compensate_data>:
{
 8003a38:	b5f0      	push	{r4, r5, r6, r7, lr}
    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 8003a3a:	2900      	cmp	r1, #0
 8003a3c:	f000 80f2 	beq.w	8003c24 <bme280_compensate_data+0x1ec>
 8003a40:	2a00      	cmp	r2, #0
 8003a42:	f000 80ef 	beq.w	8003c24 <bme280_compensate_data+0x1ec>
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	f000 80ec 	beq.w	8003c24 <bme280_compensate_data+0x1ec>
        comp_data->temperature = 0;
 8003a4c:	2400      	movs	r4, #0
        if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM))
 8003a4e:	0745      	lsls	r5, r0, #29
        comp_data->temperature = 0;
 8003a50:	6054      	str	r4, [r2, #4]
        comp_data->pressure = 0;
 8003a52:	6014      	str	r4, [r2, #0]
        comp_data->humidity = 0;
 8003a54:	6094      	str	r4, [r2, #8]
        if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM))
 8003a56:	d029      	beq.n	8003aac <bme280_compensate_data+0x74>
    var1 = (int32_t)((uncomp_data->temperature / 8) - ((int32_t)calib_data->dig_T1 * 2));
 8003a58:	881d      	ldrh	r5, [r3, #0]
 8003a5a:	684f      	ldr	r7, [r1, #4]
 8003a5c:	006c      	lsls	r4, r5, #1
 8003a5e:	ebc4 06d7 	rsb	r6, r4, r7, lsr #3
    var1 = (var1 * ((int32_t)calib_data->dig_T2)) / 2048;
 8003a62:	f9b3 4002 	ldrsh.w	r4, [r3, #2]
    var2 = (int32_t)((uncomp_data->temperature / 16) - ((int32_t)calib_data->dig_T1));
 8003a66:	ebc5 1517 	rsb	r5, r5, r7, lsr #4
    var1 = (var1 * ((int32_t)calib_data->dig_T2)) / 2048;
 8003a6a:	4374      	muls	r4, r6
    var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_T3)) / 16384;
 8003a6c:	436d      	muls	r5, r5
 8003a6e:	f9b3 6004 	ldrsh.w	r6, [r3, #4]
 8003a72:	132d      	asrs	r5, r5, #12
 8003a74:	4375      	muls	r5, r6
    var1 = (var1 * ((int32_t)calib_data->dig_T2)) / 2048;
 8003a76:	f44f 6600 	mov.w	r6, #2048	; 0x800
 8003a7a:	fb94 f4f6 	sdiv	r4, r4, r6
    var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_T3)) / 16384;
 8003a7e:	f44f 4680 	mov.w	r6, #16384	; 0x4000
 8003a82:	fb95 f5f6 	sdiv	r5, r5, r6
    calib_data->t_fine = var1 + var2;
 8003a86:	442c      	add	r4, r5
 8003a88:	625c      	str	r4, [r3, #36]	; 0x24
    temperature = (calib_data->t_fine * 5 + 128) / 256;
 8003a8a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8003a8e:	f44f 7580 	mov.w	r5, #256	; 0x100
 8003a92:	3480      	adds	r4, #128	; 0x80
 8003a94:	fb94 f4f5 	sdiv	r4, r4, r5
 8003a98:	f242 1534 	movw	r5, #8500	; 0x2134
 8003a9c:	42ac      	cmp	r4, r5
 8003a9e:	bfa8      	it	ge
 8003aa0:	462c      	movge	r4, r5
            comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 8003aa2:	4d62      	ldr	r5, [pc, #392]	; (8003c2c <bme280_compensate_data+0x1f4>)
 8003aa4:	42ac      	cmp	r4, r5
 8003aa6:	bfac      	ite	ge
 8003aa8:	6054      	strge	r4, [r2, #4]
 8003aaa:	6055      	strlt	r5, [r2, #4]
        if (sensor_comp & BME280_PRESS)
 8003aac:	07c4      	lsls	r4, r0, #31
 8003aae:	d56e      	bpl.n	8003b8e <bme280_compensate_data+0x156>
    var1 = (((int32_t)calib_data->t_fine) / 2) - (int32_t)64000;
 8003ab0:	f04f 0c02 	mov.w	ip, #2
    var3 = (calib_data->dig_P3 * (((var1 / 4) * (var1 / 4)) / 8192)) / 8;
 8003ab4:	f9b3 e00a 	ldrsh.w	lr, [r3, #10]
    var1 = (((int32_t)calib_data->t_fine) / 2) - (int32_t)64000;
 8003ab8:	6a5f      	ldr	r7, [r3, #36]	; 0x24
 8003aba:	fb97 f7fc 	sdiv	r7, r7, ip
    var2 = (((var1 / 4) * (var1 / 4)) / 2048) * ((int32_t)calib_data->dig_P6);
 8003abe:	2604      	movs	r6, #4
    var1 = (((int32_t)calib_data->t_fine) / 2) - (int32_t)64000;
 8003ac0:	f5a7 477a 	sub.w	r7, r7, #64000	; 0xfa00
    var2 = (((var1 / 4) * (var1 / 4)) / 2048) * ((int32_t)calib_data->dig_P6);
 8003ac4:	fb97 f5f6 	sdiv	r5, r7, r6
 8003ac8:	436d      	muls	r5, r5
    var3 = (calib_data->dig_P3 * (((var1 / 4) * (var1 / 4)) / 8192)) / 8;
 8003aca:	136c      	asrs	r4, r5, #13
 8003acc:	fb04 f40e 	mul.w	r4, r4, lr
 8003ad0:	f04f 0e08 	mov.w	lr, #8
 8003ad4:	fb94 f4fe 	sdiv	r4, r4, lr
    var4 = (((int32_t)calib_data->dig_P2) * var1) / 2;
 8003ad8:	f9b3 e008 	ldrsh.w	lr, [r3, #8]
 8003adc:	fb07 fe0e 	mul.w	lr, r7, lr
 8003ae0:	fb9e fefc 	sdiv	lr, lr, ip
    var1 = (var3 + var4) / 262144;
 8003ae4:	4474      	add	r4, lr
 8003ae6:	f44f 2e80 	mov.w	lr, #262144	; 0x40000
 8003aea:	fb94 f4fe 	sdiv	r4, r4, lr
    var1 = (((32768 + var1)) * ((int32_t)calib_data->dig_P1)) / 32768;
 8003aee:	f8b3 e006 	ldrh.w	lr, [r3, #6]
 8003af2:	f504 4400 	add.w	r4, r4, #32768	; 0x8000
 8003af6:	fb0e f404 	mul.w	r4, lr, r4
    if (var1)
 8003afa:	ea5f 3ee4 	movs.w	lr, r4, asr #15
 8003afe:	f000 808e 	beq.w	8003c1e <bme280_compensate_data+0x1e6>
    var2 = var2 + ((var1 * ((int32_t)calib_data->dig_P5)) * 2);
 8003b02:	f9b3 c00e 	ldrsh.w	ip, [r3, #14]
    var2 = (((var1 / 4) * (var1 / 4)) / 2048) * ((int32_t)calib_data->dig_P6);
 8003b06:	f9b3 4010 	ldrsh.w	r4, [r3, #16]
    var2 = var2 + ((var1 * ((int32_t)calib_data->dig_P5)) * 2);
 8003b0a:	fb07 f70c 	mul.w	r7, r7, ip
 8003b0e:	007f      	lsls	r7, r7, #1
    var2 = (((var1 / 4) * (var1 / 4)) / 2048) * ((int32_t)calib_data->dig_P6);
 8003b10:	12ed      	asrs	r5, r5, #11
    var2 = var2 + ((var1 * ((int32_t)calib_data->dig_P5)) * 2);
 8003b12:	fb04 7505 	mla	r5, r4, r5, r7
        var5 = (uint32_t)((uint32_t)1048576) - uncomp_data->pressure;
 8003b16:	680c      	ldr	r4, [r1, #0]
    var2 = (var2 / 4) + (((int32_t)calib_data->dig_P4) * 65536);
 8003b18:	fb95 f5f6 	sdiv	r5, r5, r6
 8003b1c:	f9b3 600c 	ldrsh.w	r6, [r3, #12]
        var5 = (uint32_t)((uint32_t)1048576) - uncomp_data->pressure;
 8003b20:	f5c4 1480 	rsb	r4, r4, #1048576	; 0x100000
    var2 = (var2 / 4) + (((int32_t)calib_data->dig_P4) * 65536);
 8003b24:	eb05 4506 	add.w	r5, r5, r6, lsl #16
        pressure = ((uint32_t)(var5 - (uint32_t)(var2 / 4096))) * 3125;
 8003b28:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 8003b2c:	fb95 f5f6 	sdiv	r5, r5, r6
 8003b30:	1b64      	subs	r4, r4, r5
 8003b32:	f640 4535 	movw	r5, #3125	; 0xc35
        if (pressure < 0x80000000)
 8003b36:	4365      	muls	r5, r4
            pressure = (pressure << 1) / ((uint32_t)var1);
 8003b38:	bf53      	iteet	pl
 8003b3a:	006d      	lslpl	r5, r5, #1
            pressure = (pressure / (uint32_t)var1) * 2;
 8003b3c:	fbb5 f5fe 	udivmi	r5, r5, lr
 8003b40:	006d      	lslmi	r5, r5, #1
            pressure = (pressure << 1) / ((uint32_t)var1);
 8003b42:	fbb5 f5fe 	udivpl	r5, r5, lr
        var1 = (((int32_t)calib_data->dig_P9) * ((int32_t)(((pressure / 8) * (pressure / 8)) / 8192))) / 4096;
 8003b46:	08ec      	lsrs	r4, r5, #3
 8003b48:	4364      	muls	r4, r4
 8003b4a:	0b66      	lsrs	r6, r4, #13
 8003b4c:	f9b3 4016 	ldrsh.w	r4, [r3, #22]
 8003b50:	4374      	muls	r4, r6
 8003b52:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 8003b56:	fb94 f4f6 	sdiv	r4, r4, r6
        var2 = (((int32_t)(pressure / 4)) * ((int32_t)calib_data->dig_P8)) / 8192;
 8003b5a:	f9b3 6014 	ldrsh.w	r6, [r3, #20]
 8003b5e:	08af      	lsrs	r7, r5, #2
 8003b60:	437e      	muls	r6, r7
 8003b62:	f44f 5700 	mov.w	r7, #8192	; 0x2000
 8003b66:	fb96 f6f7 	sdiv	r6, r6, r7
        pressure = (uint32_t)((int32_t)pressure + ((var1 + var2 + calib_data->dig_P7) / 16));
 8003b6a:	4434      	add	r4, r6
 8003b6c:	f9b3 6012 	ldrsh.w	r6, [r3, #18]
 8003b70:	4434      	add	r4, r6
 8003b72:	2610      	movs	r6, #16
 8003b74:	fb94 f4f6 	sdiv	r4, r4, r6
 8003b78:	442c      	add	r4, r5
 8003b7a:	4d2d      	ldr	r5, [pc, #180]	; (8003c30 <bme280_compensate_data+0x1f8>)
 8003b7c:	42ac      	cmp	r4, r5
 8003b7e:	bf28      	it	cs
 8003b80:	462c      	movcs	r4, r5
 8003b82:	f247 5530 	movw	r5, #30000	; 0x7530
 8003b86:	42ac      	cmp	r4, r5
 8003b88:	bf38      	it	cc
 8003b8a:	462c      	movcc	r4, r5
            comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 8003b8c:	6014      	str	r4, [r2, #0]
        if (sensor_comp & BME280_HUM)
 8003b8e:	f010 0004 	ands.w	r0, r0, #4
 8003b92:	d049      	beq.n	8003c28 <bme280_compensate_data+0x1f0>
    var2 = (int32_t)(uncomp_data->humidity * 16384);
 8003b94:	688c      	ldr	r4, [r1, #8]
    var3 = (int32_t)(((int32_t)calib_data->dig_H4) * 1048576);
 8003b96:	f9b3 101e 	ldrsh.w	r1, [r3, #30]
    var1 = calib_data->t_fine - ((int32_t)76800);
 8003b9a:	6a58      	ldr	r0, [r3, #36]	; 0x24
    var3 = (int32_t)(((int32_t)calib_data->dig_H4) * 1048576);
 8003b9c:	0509      	lsls	r1, r1, #20
    var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32768;
 8003b9e:	ebc1 3484 	rsb	r4, r1, r4, lsl #14
    var4 = ((int32_t)calib_data->dig_H5) * var1;
 8003ba2:	f9b3 1020 	ldrsh.w	r1, [r3, #32]
    var1 = calib_data->t_fine - ((int32_t)76800);
 8003ba6:	f5a0 3096 	sub.w	r0, r0, #76800	; 0x12c00
    var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32768;
 8003baa:	fb00 4111 	mls	r1, r0, r1, r4
 8003bae:	f44f 4500 	mov.w	r5, #32768	; 0x8000
 8003bb2:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 8003bb6:	fb91 f4f5 	sdiv	r4, r1, r5
    var3 = (var1 * ((int32_t)calib_data->dig_H3)) / 2048;
 8003bba:	7f19      	ldrb	r1, [r3, #28]
 8003bbc:	f44f 6600 	mov.w	r6, #2048	; 0x800
 8003bc0:	4341      	muls	r1, r0
 8003bc2:	fb91 f1f6 	sdiv	r1, r1, r6
    var4 = ((var2 * (var3 + (int32_t)32768)) / 1024) + (int32_t)2097152;
 8003bc6:	194e      	adds	r6, r1, r5
    var2 = (var1 * ((int32_t)calib_data->dig_H6)) / 1024;
 8003bc8:	f993 1022 	ldrsb.w	r1, [r3, #34]	; 0x22
 8003bcc:	4341      	muls	r1, r0
 8003bce:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003bd2:	fb91 f1f0 	sdiv	r1, r1, r0
    var4 = ((var2 * (var3 + (int32_t)32768)) / 1024) + (int32_t)2097152;
 8003bd6:	4371      	muls	r1, r6
 8003bd8:	fb91 f1f0 	sdiv	r1, r1, r0
    var2 = ((var4 * ((int32_t)calib_data->dig_H2)) + 8192) / 16384;
 8003bdc:	f9b3 001a 	ldrsh.w	r0, [r3, #26]
    var5 = var3 - ((var4 * ((int32_t)calib_data->dig_H1)) / 16);
 8003be0:	7e1b      	ldrb	r3, [r3, #24]
    var4 = ((var2 * (var3 + (int32_t)32768)) / 1024) + (int32_t)2097152;
 8003be2:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
    var2 = ((var4 * ((int32_t)calib_data->dig_H2)) + 8192) / 16384;
 8003be6:	4341      	muls	r1, r0
 8003be8:	f501 5100 	add.w	r1, r1, #8192	; 0x2000
 8003bec:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003bf0:	fb91 f1f0 	sdiv	r1, r1, r0
    var3 = var5 * var2;
 8003bf4:	4361      	muls	r1, r4
    var4 = ((var3 / 32768) * (var3 / 32768)) / 128;
 8003bf6:	fb91 f0f5 	sdiv	r0, r1, r5
 8003bfa:	4340      	muls	r0, r0
 8003bfc:	11c0      	asrs	r0, r0, #7
    var5 = var3 - ((var4 * ((int32_t)calib_data->dig_H1)) / 16);
 8003bfe:	4358      	muls	r0, r3
 8003c00:	2310      	movs	r3, #16
 8003c02:	fb90 f0f3 	sdiv	r0, r0, r3
 8003c06:	1a09      	subs	r1, r1, r0
    var5 = (var5 < 0 ? 0 : var5);
 8003c08:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    var5 = (var5 > 419430400 ? 419430400 : var5);
 8003c0c:	f1b1 5fc8 	cmp.w	r1, #419430400	; 0x19000000
 8003c10:	bfa8      	it	ge
 8003c12:	f04f 51c8 	movge.w	r1, #419430400	; 0x19000000
    humidity = (uint32_t)(var5 / 4096);
 8003c16:	1309      	asrs	r1, r1, #12
            comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 8003c18:	6091      	str	r1, [r2, #8]
 8003c1a:	2000      	movs	r0, #0
 8003c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        pressure = pressure_min;
 8003c1e:	f247 5430 	movw	r4, #30000	; 0x7530
 8003c22:	e7b3      	b.n	8003b8c <bme280_compensate_data+0x154>
        rslt = BME280_E_NULL_PTR;
 8003c24:	f04f 30ff 	mov.w	r0, #4294967295
}
 8003c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	fffff060 	.word	0xfffff060
 8003c30:	0001adb0 	.word	0x0001adb0

08003c34 <bme280_get_sensor_data>:
{
 8003c34:	b570      	push	{r4, r5, r6, lr}
 8003c36:	b086      	sub	sp, #24
    uint8_t reg_data[BME280_P_T_H_DATA_LEN] = { 0 };
 8003c38:	2300      	movs	r3, #0
{
 8003c3a:	4606      	mov	r6, r0
    rslt = null_ptr_check(dev);
 8003c3c:	4610      	mov	r0, r2
{
 8003c3e:	460d      	mov	r5, r1
 8003c40:	4614      	mov	r4, r2
    uint8_t reg_data[BME280_P_T_H_DATA_LEN] = { 0 };
 8003c42:	9301      	str	r3, [sp, #4]
 8003c44:	9302      	str	r3, [sp, #8]
    struct bme280_uncomp_data uncomp_data = { 0 };
 8003c46:	9303      	str	r3, [sp, #12]
 8003c48:	9304      	str	r3, [sp, #16]
 8003c4a:	9305      	str	r3, [sp, #20]
    rslt = null_ptr_check(dev);
 8003c4c:	f7ff fc5d 	bl	800350a <null_ptr_check>
    if ((rslt == BME280_OK) && (comp_data != NULL))
 8003c50:	b9a0      	cbnz	r0, 8003c7c <bme280_get_sensor_data+0x48>
 8003c52:	b199      	cbz	r1, 8003c7c <bme280_get_sensor_data+0x48>
        rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 8003c54:	4613      	mov	r3, r2
 8003c56:	a901      	add	r1, sp, #4
 8003c58:	2208      	movs	r2, #8
 8003c5a:	20f7      	movs	r0, #247	; 0xf7
 8003c5c:	f7ff fc63 	bl	8003526 <bme280_get_regs>
        if (rslt == BME280_OK)
 8003c60:	b950      	cbnz	r0, 8003c78 <bme280_get_sensor_data+0x44>
            bme280_parse_sensor_data(reg_data, &uncomp_data);
 8003c62:	a903      	add	r1, sp, #12
 8003c64:	a801      	add	r0, sp, #4
 8003c66:	f7ff fece 	bl	8003a06 <bme280_parse_sensor_data>
            rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 8003c6a:	f104 0310 	add.w	r3, r4, #16
 8003c6e:	462a      	mov	r2, r5
 8003c70:	a903      	add	r1, sp, #12
 8003c72:	4630      	mov	r0, r6
 8003c74:	f7ff fee0 	bl	8003a38 <bme280_compensate_data>
}
 8003c78:	b006      	add	sp, #24
 8003c7a:	bd70      	pop	{r4, r5, r6, pc}
        rslt = BME280_E_NULL_PTR;
 8003c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c80:	e7fa      	b.n	8003c78 <bme280_get_sensor_data+0x44>

08003c82 <user_delay_ms>:
	}
}

void user_delay_ms(uint32_t period)
{
    HAL_Delay(period);
 8003c82:	f7fd b9cd 	b.w	8001020 <HAL_Delay>
	...

08003c88 <user_i2c_read>:
}

int8_t user_i2c_read(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len)
{
 8003c88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	HAL_I2C_Mem_Read(&hi2c1, (dev_id<<1), reg_addr, 1, reg_data, len, 10000);
 8003c8a:	f242 7410 	movw	r4, #10000	; 0x2710
 8003c8e:	e88d 001c 	stmia.w	sp, {r2, r3, r4}
 8003c92:	2301      	movs	r3, #1
 8003c94:	460a      	mov	r2, r1
 8003c96:	fa00 f103 	lsl.w	r1, r0, r3
 8003c9a:	4803      	ldr	r0, [pc, #12]	; (8003ca8 <user_i2c_read+0x20>)
 8003c9c:	f7fe f9a2 	bl	8001fe4 <HAL_I2C_Mem_Read>

	return 0;
}
 8003ca0:	2000      	movs	r0, #0
 8003ca2:	b004      	add	sp, #16
 8003ca4:	bd10      	pop	{r4, pc}
 8003ca6:	bf00      	nop
 8003ca8:	20000864 	.word	0x20000864

08003cac <platform_read>:
	}

}

int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8003cac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	reg |= 0x80;
	HAL_I2C_Mem_Read(handle, LIS2DH12_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 8003cae:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8003cb2:	e88d 001c 	stmia.w	sp, {r2, r3, r4}
 8003cb6:	f041 0280 	orr.w	r2, r1, #128	; 0x80
 8003cba:	2301      	movs	r3, #1
 8003cbc:	2131      	movs	r1, #49	; 0x31
 8003cbe:	f7fe f991 	bl	8001fe4 <HAL_I2C_Mem_Read>
	return 0;
}
 8003cc2:	2000      	movs	r0, #0
 8003cc4:	b004      	add	sp, #16
 8003cc6:	bd10      	pop	{r4, pc}

08003cc8 <user_i2c_write>:
{
 8003cc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	HAL_I2C_Mem_Write(&hi2c1, (dev_id<<1), reg_addr, 1, reg_data, len, 10000);
 8003cca:	f242 7410 	movw	r4, #10000	; 0x2710
 8003cce:	e88d 001c 	stmia.w	sp, {r2, r3, r4}
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	460a      	mov	r2, r1
 8003cd6:	fa00 f103 	lsl.w	r1, r0, r3
 8003cda:	4803      	ldr	r0, [pc, #12]	; (8003ce8 <user_i2c_write+0x20>)
 8003cdc:	f7fe f8ca 	bl	8001e74 <HAL_I2C_Mem_Write>
}
 8003ce0:	2000      	movs	r0, #0
 8003ce2:	b004      	add	sp, #16
 8003ce4:	bd10      	pop	{r4, pc}
 8003ce6:	bf00      	nop
 8003ce8:	20000864 	.word	0x20000864

08003cec <platform_write>:

int32_t platform_write(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8003cec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	reg |= 0x80;
	HAL_I2C_Mem_Write(handle, LIS2DH12_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 8003cee:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8003cf2:	e88d 001c 	stmia.w	sp, {r2, r3, r4}
 8003cf6:	f041 0280 	orr.w	r2, r1, #128	; 0x80
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	2131      	movs	r1, #49	; 0x31
 8003cfe:	f7fe f8b9 	bl	8001e74 <HAL_I2C_Mem_Write>
	return 0;
}
 8003d02:	2000      	movs	r0, #0
 8003d04:	b004      	add	sp, #16
 8003d06:	bd10      	pop	{r4, pc}

08003d08 <uart_transmit>:
{
 8003d08:	b084      	sub	sp, #16
 8003d0a:	b530      	push	{r4, r5, lr}
 8003d0c:	b095      	sub	sp, #84	; 0x54
 8003d0e:	ac18      	add	r4, sp, #96	; 0x60
 8003d10:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	count_flag = 0;
 8003d14:	4b29      	ldr	r3, [pc, #164]	; (8003dbc <uart_transmit+0xb4>)
	snprintf(out_string, 92, "$20795629,%5d,%2d:%2d:%2d,%3d,%3d,%3d,%4d,%4d,%4d,%10.6f,%11.6f,%7.1f,%3d,%3.1f\n",
 8003d16:	4d2a      	ldr	r5, [pc, #168]	; (8003dc0 <uart_transmit+0xb8>)
	count_flag = 0;
 8003d18:	2200      	movs	r2, #0
 8003d1a:	701a      	strb	r2, [r3, #0]
	runtime++;
 8003d1c:	4a29      	ldr	r2, [pc, #164]	; (8003dc4 <uart_transmit+0xbc>)
 8003d1e:	7813      	ldrb	r3, [r2, #0]
 8003d20:	3301      	adds	r3, #1
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	7013      	strb	r3, [r2, #0]
	snprintf(out_string, 92, "$20795629,%5d,%2d:%2d:%2d,%3d,%3d,%3d,%4d,%4d,%4d,%10.6f,%11.6f,%7.1f,%3d,%3.1f\n",
 8003d26:	4b28      	ldr	r3, [pc, #160]	; (8003dc8 <uart_transmit+0xc0>)
 8003d28:	7814      	ldrb	r4, [r2, #0]
 8003d2a:	6818      	ldr	r0, [r3, #0]
 8003d2c:	f7fc fc0c 	bl	8000548 <__aeabi_f2d>
 8003d30:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8003d34:	4b25      	ldr	r3, [pc, #148]	; (8003dcc <uart_transmit+0xc4>)
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	9310      	str	r3, [sp, #64]	; 0x40
 8003d3a:	4b25      	ldr	r3, [pc, #148]	; (8003dd0 <uart_transmit+0xc8>)
 8003d3c:	6818      	ldr	r0, [r3, #0]
 8003d3e:	f7fc fc03 	bl	8000548 <__aeabi_f2d>
 8003d42:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8003d46:	4b23      	ldr	r3, [pc, #140]	; (8003dd4 <uart_transmit+0xcc>)
 8003d48:	6818      	ldr	r0, [r3, #0]
 8003d4a:	f7fc fbfd 	bl	8000548 <__aeabi_f2d>
 8003d4e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8003d52:	4b21      	ldr	r3, [pc, #132]	; (8003dd8 <uart_transmit+0xd0>)
 8003d54:	6818      	ldr	r0, [r3, #0]
 8003d56:	f7fc fbf7 	bl	8000548 <__aeabi_f2d>
 8003d5a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003d5e:	4b1f      	ldr	r3, [pc, #124]	; (8003ddc <uart_transmit+0xd4>)
 8003d60:	4a1f      	ldr	r2, [pc, #124]	; (8003de0 <uart_transmit+0xd8>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	9308      	str	r3, [sp, #32]
 8003d66:	4b1f      	ldr	r3, [pc, #124]	; (8003de4 <uart_transmit+0xdc>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	9307      	str	r3, [sp, #28]
 8003d6c:	4b1e      	ldr	r3, [pc, #120]	; (8003de8 <uart_transmit+0xe0>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	9306      	str	r3, [sp, #24]
 8003d72:	4b1e      	ldr	r3, [pc, #120]	; (8003dec <uart_transmit+0xe4>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	9305      	str	r3, [sp, #20]
 8003d78:	4b1d      	ldr	r3, [pc, #116]	; (8003df0 <uart_transmit+0xe8>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	9304      	str	r3, [sp, #16]
 8003d7e:	4b1d      	ldr	r3, [pc, #116]	; (8003df4 <uart_transmit+0xec>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	9303      	str	r3, [sp, #12]
 8003d84:	4b1c      	ldr	r3, [pc, #112]	; (8003df8 <uart_transmit+0xf0>)
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	9302      	str	r3, [sp, #8]
 8003d8a:	4b1c      	ldr	r3, [pc, #112]	; (8003dfc <uart_transmit+0xf4>)
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	9301      	str	r3, [sp, #4]
 8003d90:	4b1b      	ldr	r3, [pc, #108]	; (8003e00 <uart_transmit+0xf8>)
 8003d92:	b2e4      	uxtb	r4, r4
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	9300      	str	r3, [sp, #0]
 8003d98:	215c      	movs	r1, #92	; 0x5c
 8003d9a:	4623      	mov	r3, r4
 8003d9c:	4628      	mov	r0, r5
 8003d9e:	f001 fccd 	bl	800573c <snprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)out_string, 91, 0xFFFF);
 8003da2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003da6:	225b      	movs	r2, #91	; 0x5b
 8003da8:	4629      	mov	r1, r5
 8003daa:	a818      	add	r0, sp, #96	; 0x60
 8003dac:	f7ff f9e7 	bl	800317e <HAL_UART_Transmit>
}
 8003db0:	b015      	add	sp, #84	; 0x54
 8003db2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003db6:	b004      	add	sp, #16
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	20000c41 	.word	0x20000c41
 8003dc0:	20000759 	.word	0x20000759
 8003dc4:	20000b30 	.word	0x20000b30
 8003dc8:	200007d4 	.word	0x200007d4
 8003dcc:	200006bd 	.word	0x200006bd
 8003dd0:	200006b0 	.word	0x200006b0
 8003dd4:	20000750 	.word	0x20000750
 8003dd8:	20000730 	.word	0x20000730
 8003ddc:	200006ac 	.word	0x200006ac
 8003de0:	08009b92 	.word	0x08009b92
 8003de4:	200006a8 	.word	0x200006a8
 8003de8:	200006a4 	.word	0x200006a4
 8003dec:	200007c0 	.word	0x200007c0
 8003df0:	200006cc 	.word	0x200006cc
 8003df4:	200007c8 	.word	0x200007c8
 8003df8:	200007c4 	.word	0x200007c4
 8003dfc:	20000758 	.word	0x20000758
 8003e00:	200006ca 	.word	0x200006ca
 8003e04:	00000000 	.word	0x00000000

08003e08 <check_burn>:
	if((alt > 10000) && ((lon < 17.976343 ) || (lon > 18.9354 )) )
 8003e08:	4b1b      	ldr	r3, [pc, #108]	; (8003e78 <check_burn+0x70>)
 8003e0a:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8003e7c <check_burn+0x74>
 8003e0e:	ed93 7a00 	vldr	s14, [r3]
 8003e12:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 8003e1a:	b5d0      	push	{r4, r6, r7, lr}
 8003e1c:	4c18      	ldr	r4, [pc, #96]	; (8003e80 <check_burn+0x78>)
	if((alt > 10000) && ((lon < 17.976343 ) || (lon > 18.9354 )) )
 8003e1e:	dd1f      	ble.n	8003e60 <check_burn+0x58>
 8003e20:	4b18      	ldr	r3, [pc, #96]	; (8003e84 <check_burn+0x7c>)
 8003e22:	6818      	ldr	r0, [r3, #0]
 8003e24:	f7fc fb90 	bl	8000548 <__aeabi_f2d>
 8003e28:	a30f      	add	r3, pc, #60	; (adr r3, 8003e68 <check_burn+0x60>)
 8003e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e2e:	4606      	mov	r6, r0
 8003e30:	460f      	mov	r7, r1
 8003e32:	f7fc fe4f 	bl	8000ad4 <__aeabi_dcmplt>
 8003e36:	b938      	cbnz	r0, 8003e48 <check_burn+0x40>
 8003e38:	a30d      	add	r3, pc, #52	; (adr r3, 8003e70 <check_burn+0x68>)
 8003e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e3e:	4630      	mov	r0, r6
 8003e40:	4639      	mov	r1, r7
 8003e42:	f7fc fe65 	bl	8000b10 <__aeabi_dcmpgt>
 8003e46:	b158      	cbz	r0, 8003e60 <check_burn+0x58>
		burn_up_cnt++;
 8003e48:	7823      	ldrb	r3, [r4, #0]
 8003e4a:	3301      	adds	r3, #1
		burn_up_cnt = 0;
 8003e4c:	7023      	strb	r3, [r4, #0]
	if(burn_up_cnt == 5)
 8003e4e:	7823      	ldrb	r3, [r4, #0]
 8003e50:	2b05      	cmp	r3, #5
 8003e52:	d104      	bne.n	8003e5e <check_burn+0x56>
		burn_flag = 1;
 8003e54:	4a0c      	ldr	r2, [pc, #48]	; (8003e88 <check_burn+0x80>)
 8003e56:	2301      	movs	r3, #1
 8003e58:	7013      	strb	r3, [r2, #0]
		lcd_print_flag = 1;
 8003e5a:	4a0c      	ldr	r2, [pc, #48]	; (8003e8c <check_burn+0x84>)
 8003e5c:	7013      	strb	r3, [r2, #0]
 8003e5e:	bdd0      	pop	{r4, r6, r7, pc}
		burn_up_cnt = 0;
 8003e60:	2300      	movs	r3, #0
 8003e62:	e7f3      	b.n	8003e4c <check_burn+0x44>
 8003e64:	f3af 8000 	nop.w
 8003e68:	9d66adb4 	.word	0x9d66adb4
 8003e6c:	4031f9f1 	.word	0x4031f9f1
 8003e70:	5fd8adac 	.word	0x5fd8adac
 8003e74:	4032ef76 	.word	0x4032ef76
 8003e78:	200006b0 	.word	0x200006b0
 8003e7c:	461c4000 	.word	0x461c4000
 8003e80:	200006bb 	.word	0x200006bb
 8003e84:	20000750 	.word	0x20000750
 8003e88:	20000a68 	.word	0x20000a68
 8003e8c:	2000073c 	.word	0x2000073c

08003e90 <burn_down>:
{
 8003e90:	b538      	push	{r3, r4, r5, lr}
	if(burn_down_cnt == 11)
 8003e92:	4d14      	ldr	r5, [pc, #80]	; (8003ee4 <burn_down+0x54>)
 8003e94:	782b      	ldrb	r3, [r5, #0]
 8003e96:	2b0b      	cmp	r3, #11
 8003e98:	d10c      	bne.n	8003eb4 <burn_down+0x24>
		HAL_GPIO_WritePin (GPIOA, GPIO_PIN_8, 1);
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003ea0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ea4:	f7fd fe4a 	bl	8001b3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (GPIOA, GPIO_PIN_5, 1);
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	2120      	movs	r1, #32
 8003eac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003eb0:	f7fd fe44 	bl	8001b3c <HAL_GPIO_WritePin>
	burn_down_cnt--;
 8003eb4:	782c      	ldrb	r4, [r5, #0]
 8003eb6:	3c01      	subs	r4, #1
 8003eb8:	b2e4      	uxtb	r4, r4
 8003eba:	702c      	strb	r4, [r5, #0]
	if(burn_down_cnt == 0)
 8003ebc:	b98c      	cbnz	r4, 8003ee2 <burn_down+0x52>
		HAL_GPIO_WritePin (GPIOA, GPIO_PIN_8, 0);
 8003ebe:	4622      	mov	r2, r4
 8003ec0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003ec4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ec8:	f7fd fe38 	bl	8001b3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (GPIOA, GPIO_PIN_5, 0);
 8003ecc:	4622      	mov	r2, r4
 8003ece:	2120      	movs	r1, #32
 8003ed0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ed4:	f7fd fe32 	bl	8001b3c <HAL_GPIO_WritePin>
		burn_flag = 0;
 8003ed8:	4b03      	ldr	r3, [pc, #12]	; (8003ee8 <burn_down+0x58>)
 8003eda:	701c      	strb	r4, [r3, #0]
		lcd_print_flag = 1;
 8003edc:	4b03      	ldr	r3, [pc, #12]	; (8003eec <burn_down+0x5c>)
 8003ede:	2201      	movs	r2, #1
 8003ee0:	701a      	strb	r2, [r3, #0]
 8003ee2:	bd38      	pop	{r3, r4, r5, pc}
 8003ee4:	2000000c 	.word	0x2000000c
 8003ee8:	20000a68 	.word	0x20000a68
 8003eec:	2000073c 	.word	0x2000073c

08003ef0 <checksum_generator>:
    	calc_checksum ^= *input++;
 8003ef0:	4904      	ldr	r1, [pc, #16]	; (8003f04 <checksum_generator+0x14>)
 8003ef2:	3801      	subs	r0, #1
    while(*input)
 8003ef4:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8003ef8:	b902      	cbnz	r2, 8003efc <checksum_generator+0xc>
}
 8003efa:	4770      	bx	lr
    	calc_checksum ^= *input++;
 8003efc:	780b      	ldrb	r3, [r1, #0]
 8003efe:	4053      	eors	r3, r2
 8003f00:	700b      	strb	r3, [r1, #0]
 8003f02:	e7f7      	b.n	8003ef4 <checksum_generator+0x4>
 8003f04:	200006bc 	.word	0x200006bc

08003f08 <uart_receive>:
{
 8003f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	message_flag = 0;
 8003f0c:	4ab8      	ldr	r2, [pc, #736]	; (80041f0 <uart_receive+0x2e8>)
	lon_in = 0, lat_in = 0, in_time = 0;
 8003f0e:	f8df b328 	ldr.w	fp, [pc, #808]	; 8004238 <uart_receive+0x330>
 8003f12:	f8df 9328 	ldr.w	r9, [pc, #808]	; 800423c <uart_receive+0x334>
 8003f16:	4db7      	ldr	r5, [pc, #732]	; (80041f4 <uart_receive+0x2ec>)
	if(strncmp((char*) in_string, "$GPGGA", 6) == 0 && (in_len < 92))
 8003f18:	4eb7      	ldr	r6, [pc, #732]	; (80041f8 <uart_receive+0x2f0>)
	calc_checksum = 0, in_checksum = 0;
 8003f1a:	f8df 8324 	ldr.w	r8, [pc, #804]	; 8004240 <uart_receive+0x338>
	delim_ptr = 0, checksum_delim_ptr = 0;
 8003f1e:	4fb7      	ldr	r7, [pc, #732]	; (80041fc <uart_receive+0x2f4>)
 8003f20:	f8df a320 	ldr.w	sl, [pc, #800]	; 8004244 <uart_receive+0x33c>
	if(strncmp((char*) in_string, "$GPGGA", 6) == 0 && (in_len < 92))
 8003f24:	49b6      	ldr	r1, [pc, #728]	; (8004200 <uart_receive+0x2f8>)
	message_flag = 0;
 8003f26:	2300      	movs	r3, #0
 8003f28:	7013      	strb	r3, [r2, #0]
	lon_in = 0, lat_in = 0, in_time = 0;
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f8cb 2000 	str.w	r2, [fp]
 8003f30:	f8c9 2000 	str.w	r2, [r9]
 8003f34:	602a      	str	r2, [r5, #0]
	calc_checksum = 0, in_checksum = 0;
 8003f36:	4ab3      	ldr	r2, [pc, #716]	; (8004204 <uart_receive+0x2fc>)
 8003f38:	f888 3000 	strb.w	r3, [r8]
{
 8003f3c:	b085      	sub	sp, #20
	calc_checksum = 0, in_checksum = 0;
 8003f3e:	7013      	strb	r3, [r2, #0]
	if(strncmp((char*) in_string, "$GPGGA", 6) == 0 && (in_len < 92))
 8003f40:	4630      	mov	r0, r6
 8003f42:	2206      	movs	r2, #6
	delim_ptr = 0, checksum_delim_ptr = 0;
 8003f44:	603b      	str	r3, [r7, #0]
 8003f46:	f8ca 3000 	str.w	r3, [sl]
	if(strncmp((char*) in_string, "$GPGGA", 6) == 0 && (in_len < 92))
 8003f4a:	f001 fc39 	bl	80057c0 <strncmp>
 8003f4e:	f8cd b000 	str.w	fp, [sp]
 8003f52:	4604      	mov	r4, r0
 8003f54:	f8cd 9004 	str.w	r9, [sp, #4]
 8003f58:	9502      	str	r5, [sp, #8]
 8003f5a:	2800      	cmp	r0, #0
 8003f5c:	f040 81b8 	bne.w	80042d0 <uart_receive+0x3c8>
 8003f60:	4ba9      	ldr	r3, [pc, #676]	; (8004208 <uart_receive+0x300>)
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	2b5b      	cmp	r3, #91	; 0x5b
 8003f66:	f200 81b3 	bhi.w	80042d0 <uart_receive+0x3c8>
		curr_ptr = in_string;
 8003f6a:	4ba8      	ldr	r3, [pc, #672]	; (800420c <uart_receive+0x304>)
		checksum_curr_ptr = in_string + 1;
 8003f6c:	f8df b2d8 	ldr.w	fp, [pc, #728]	; 8004248 <uart_receive+0x340>
		curr_ptr = in_string;
 8003f70:	601e      	str	r6, [r3, #0]
		delim_ptr = strchr(curr_ptr, ',');
 8003f72:	212c      	movs	r1, #44	; 0x2c
 8003f74:	4630      	mov	r0, r6
 8003f76:	f001 fc15 	bl	80057a4 <strchr>
		checksum_curr_ptr = in_string + 1;
 8003f7a:	3601      	adds	r6, #1
		delim_ptr = strchr(curr_ptr, ',');
 8003f7c:	6038      	str	r0, [r7, #0]
 8003f7e:	4681      	mov	r9, r0
		checksum_delim_ptr = strchr(checksum_curr_ptr, '*');
 8003f80:	212a      	movs	r1, #42	; 0x2a
 8003f82:	4630      	mov	r0, r6
		checksum_curr_ptr = in_string + 1;
 8003f84:	f8cb 6000 	str.w	r6, [fp]
		checksum_delim_ptr = strchr(checksum_curr_ptr, '*');
 8003f88:	f001 fc0c 	bl	80057a4 <strchr>
 8003f8c:	4605      	mov	r5, r0
 8003f8e:	f8ca 0000 	str.w	r0, [sl]
		if( (checksum_delim_ptr != 0) && (delim_ptr != 0) && ( *(checksum_delim_ptr+3)=='\r' ) )
 8003f92:	2800      	cmp	r0, #0
 8003f94:	f000 819c 	beq.w	80042d0 <uart_receive+0x3c8>
 8003f98:	f1b9 0f00 	cmp.w	r9, #0
 8003f9c:	f000 8198 	beq.w	80042d0 <uart_receive+0x3c8>
 8003fa0:	78c3      	ldrb	r3, [r0, #3]
 8003fa2:	2b0d      	cmp	r3, #13
 8003fa4:	f040 8194 	bne.w	80042d0 <uart_receive+0x3c8>
			memcpy(str_data, checksum_curr_ptr, checksum_delim_ptr - checksum_curr_ptr);
 8003fa8:	f8df 92a0 	ldr.w	r9, [pc, #672]	; 800424c <uart_receive+0x344>
 8003fac:	1b83      	subs	r3, r0, r6
 8003fae:	461a      	mov	r2, r3
 8003fb0:	4631      	mov	r1, r6
 8003fb2:	4648      	mov	r0, r9
			checksum_curr_ptr = checksum_delim_ptr + 1;
 8003fb4:	3501      	adds	r5, #1
			memcpy(str_data, checksum_curr_ptr, checksum_delim_ptr - checksum_curr_ptr);
 8003fb6:	9303      	str	r3, [sp, #12]
 8003fb8:	f001 fbac 	bl	8005714 <memcpy>
			str_data[checksum_delim_ptr - checksum_curr_ptr] = '\0';
 8003fbc:	9b03      	ldr	r3, [sp, #12]
			checksum_curr_ptr = checksum_delim_ptr + 1;
 8003fbe:	f8cb 5000 	str.w	r5, [fp]
			checksum_delim_ptr = strchr(checksum_curr_ptr, '\0');
 8003fc2:	4621      	mov	r1, r4
 8003fc4:	4628      	mov	r0, r5
			str_data[checksum_delim_ptr - checksum_curr_ptr] = '\0';
 8003fc6:	f809 4003 	strb.w	r4, [r9, r3]
			checksum_delim_ptr = strchr(checksum_curr_ptr, '\0');
 8003fca:	f001 fbeb 	bl	80057a4 <strchr>
			memcpy(str_checksum, checksum_curr_ptr, checksum_delim_ptr - checksum_curr_ptr);
 8003fce:	4b90      	ldr	r3, [pc, #576]	; (8004210 <uart_receive+0x308>)
			checksum_delim_ptr = strchr(checksum_curr_ptr, '\0');
 8003fd0:	f8ca 0000 	str.w	r0, [sl]
			memcpy(str_checksum, checksum_curr_ptr, checksum_delim_ptr - checksum_curr_ptr);
 8003fd4:	1b46      	subs	r6, r0, r5
 8003fd6:	4632      	mov	r2, r6
 8003fd8:	4618      	mov	r0, r3
 8003fda:	4629      	mov	r1, r5
 8003fdc:	f001 fb9a 	bl	8005714 <memcpy>
			in_checksum = (int)strtol(str_checksum, NULL, 16);
 8003fe0:	2210      	movs	r2, #16
 8003fe2:	4621      	mov	r1, r4
			str_checksum[checksum_delim_ptr - checksum_curr_ptr] = '\0';
 8003fe4:	5584      	strb	r4, [r0, r6]
			in_checksum = (int)strtol(str_checksum, NULL, 16);
 8003fe6:	f002 fa9b 	bl	8006520 <strtol>
 8003fea:	f888 0000 	strb.w	r0, [r8]
			checksum_generator(str_data);
 8003fee:	4648      	mov	r0, r9
 8003ff0:	f7ff ff7e 	bl	8003ef0 <checksum_generator>
			if(in_checksum == calc_checksum)
 8003ff4:	4b83      	ldr	r3, [pc, #524]	; (8004204 <uart_receive+0x2fc>)
 8003ff6:	f998 2000 	ldrsb.w	r2, [r8]
 8003ffa:	f993 3000 	ldrsb.w	r3, [r3]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	f040 8166 	bne.w	80042d0 <uart_receive+0x3c8>
					if((curr_ptr != delim_ptr) && (gps_cnt == 1))
 8004004:	46b8      	mov	r8, r7
 8004006:	463e      	mov	r6, r7
 8004008:	4f80      	ldr	r7, [pc, #512]	; (800420c <uart_receive+0x304>)
 800400a:	f8d8 5000 	ldr.w	r5, [r8]
 800400e:	6839      	ldr	r1, [r7, #0]
 8004010:	42a9      	cmp	r1, r5
 8004012:	46b9      	mov	r9, r7
 8004014:	d032      	beq.n	800407c <uart_receive+0x174>
 8004016:	2c01      	cmp	r4, #1
 8004018:	d130      	bne.n	800407c <uart_receive+0x174>
						memcpy(gps_data, curr_ptr, delim_ptr - curr_ptr);
 800401a:	4b7e      	ldr	r3, [pc, #504]	; (8004214 <uart_receive+0x30c>)
 800401c:	1a6d      	subs	r5, r5, r1
 800401e:	4618      	mov	r0, r3
 8004020:	462a      	mov	r2, r5
 8004022:	f001 fb77 	bl	8005714 <memcpy>
						gps_data[delim_ptr - curr_ptr] = '\0';
 8004026:	2200      	movs	r2, #0
 8004028:	5542      	strb	r2, [r0, r5]
						in_time = atoi(gps_data);
 800402a:	f001 fb45 	bl	80056b8 <atoi>
 800402e:	ee07 0a90 	vmov	s15, r0
 8004032:	9b02      	ldr	r3, [sp, #8]
						mins = (((int) in_time) - (hrs * 10000))/ 100;
 8004034:	4978      	ldr	r1, [pc, #480]	; (8004218 <uart_receive+0x310>)
						in_time = atoi(gps_data);
 8004036:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						hrs = ((int) in_time) / 10000;
 800403a:	f242 7210 	movw	r2, #10000	; 0x2710
						in_time = atoi(gps_data);
 800403e:	edc3 7a00 	vstr	s15, [r3]
						hrs = ((int) in_time) / 10000;
 8004042:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004046:	4b75      	ldr	r3, [pc, #468]	; (800421c <uart_receive+0x314>)
 8004048:	ee17 0a90 	vmov	r0, s15
 800404c:	fb90 f2f2 	sdiv	r2, r0, r2
 8004050:	b2d2      	uxtb	r2, r2
 8004052:	701a      	strb	r2, [r3, #0]
						mins = (((int) in_time) - (hrs * 10000))/ 100;
 8004054:	fb01 0102 	mla	r1, r1, r2, r0
 8004058:	2364      	movs	r3, #100	; 0x64
 800405a:	fb91 f1f3 	sdiv	r1, r1, r3
 800405e:	b2cb      	uxtb	r3, r1
 8004060:	496f      	ldr	r1, [pc, #444]	; (8004220 <uart_receive+0x318>)
						secs = (((int) in_time) - (hrs * 10000)  - (mins * 100));
 8004062:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
						mins = (((int) in_time) - (hrs * 10000))/ 100;
 8004066:	700b      	strb	r3, [r1, #0]
						secs = (((int) in_time) - (hrs * 10000)  - (mins * 100));
 8004068:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800406c:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 8004070:	ebc3 03c1 	rsb	r3, r3, r1, lsl #3
 8004074:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004078:	4a6a      	ldr	r2, [pc, #424]	; (8004224 <uart_receive+0x31c>)
 800407a:	7013      	strb	r3, [r2, #0]
					if((curr_ptr != delim_ptr) && (gps_cnt == 2))
 800407c:	6839      	ldr	r1, [r7, #0]
 800407e:	6835      	ldr	r5, [r6, #0]
 8004080:	42a9      	cmp	r1, r5
 8004082:	d02e      	beq.n	80040e2 <uart_receive+0x1da>
 8004084:	2c02      	cmp	r4, #2
 8004086:	d12c      	bne.n	80040e2 <uart_receive+0x1da>
						memcpy(gps_data, curr_ptr, delim_ptr - curr_ptr);
 8004088:	4b62      	ldr	r3, [pc, #392]	; (8004214 <uart_receive+0x30c>)
 800408a:	1a6d      	subs	r5, r5, r1
 800408c:	4618      	mov	r0, r3
 800408e:	462a      	mov	r2, r5
 8004090:	f001 fb40 	bl	8005714 <memcpy>
						gps_data[delim_ptr - curr_ptr] = '\0';
 8004094:	2200      	movs	r2, #0
 8004096:	5542      	strb	r2, [r0, r5]
						lat_in = atof(gps_data);
 8004098:	f001 fb0b 	bl	80056b2 <atof>
 800409c:	ec51 0b10 	vmov	r0, r1, d0
 80040a0:	f7fc fd9e 	bl	8000be0 <__aeabi_d2f>
 80040a4:	ee07 0a10 	vmov	s14, r0
 80040a8:	9b01      	ldr	r3, [sp, #4]
						lat = ((int)lat_in/100) + (lat_in - ((int)lat_in/100)*100)/60;
 80040aa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004228 <uart_receive+0x320>
						lat_in = atof(gps_data);
 80040ae:	6018      	str	r0, [r3, #0]
						lat = ((int)lat_in/100) + (lat_in - ((int)lat_in/100)*100)/60;
 80040b0:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80040b4:	2264      	movs	r2, #100	; 0x64
 80040b6:	ee17 3a90 	vmov	r3, s15
 80040ba:	fb93 f3f2 	sdiv	r3, r3, r2
 80040be:	435a      	muls	r2, r3
 80040c0:	ee07 2a90 	vmov	s15, r2
 80040c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040cc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80040d0:	ee07 3a90 	vmov	s15, r3
 80040d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040d8:	4b54      	ldr	r3, [pc, #336]	; (800422c <uart_receive+0x324>)
 80040da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040de:	edc3 7a00 	vstr	s15, [r3]
					if((curr_ptr != delim_ptr) && (gps_cnt == 3))
 80040e2:	6839      	ldr	r1, [r7, #0]
 80040e4:	f8d6 a000 	ldr.w	sl, [r6]
 80040e8:	4551      	cmp	r1, sl
 80040ea:	d015      	beq.n	8004118 <uart_receive+0x210>
 80040ec:	2c03      	cmp	r4, #3
 80040ee:	d130      	bne.n	8004152 <uart_receive+0x24a>
						memcpy(gps_data, curr_ptr, delim_ptr - curr_ptr);
 80040f0:	4b48      	ldr	r3, [pc, #288]	; (8004214 <uart_receive+0x30c>)
 80040f2:	ebaa 0a01 	sub.w	sl, sl, r1
 80040f6:	4652      	mov	r2, sl
 80040f8:	4618      	mov	r0, r3
 80040fa:	f001 fb0b 	bl	8005714 <memcpy>
						gps_data[delim_ptr - curr_ptr] = '\0';
 80040fe:	2200      	movs	r2, #0
 8004100:	f800 200a 	strb.w	r2, [r0, sl]
						if(gps_data[0] == 'S')
 8004104:	7803      	ldrb	r3, [r0, #0]
 8004106:	2b53      	cmp	r3, #83	; 0x53
 8004108:	d106      	bne.n	8004118 <uart_receive+0x210>
							lat = lat*-1;
 800410a:	4b48      	ldr	r3, [pc, #288]	; (800422c <uart_receive+0x324>)
 800410c:	edd3 7a00 	vldr	s15, [r3]
 8004110:	eef1 7a67 	vneg.f32	s15, s15
						lon = ((int)lon_in/100) + (lon_in - ((int)lon_in/100)*100)/60;
 8004114:	edc3 7a00 	vstr	s15, [r3]
					if((curr_ptr != delim_ptr) && (gps_cnt == 5))
 8004118:	6839      	ldr	r1, [r7, #0]
 800411a:	f8d6 a000 	ldr.w	sl, [r6]
 800411e:	4551      	cmp	r1, sl
 8004120:	d064      	beq.n	80041ec <uart_receive+0x2e4>
 8004122:	2c05      	cmp	r4, #5
 8004124:	d145      	bne.n	80041b2 <uart_receive+0x2aa>
						memcpy(gps_data, curr_ptr, delim_ptr - curr_ptr);
 8004126:	4b3b      	ldr	r3, [pc, #236]	; (8004214 <uart_receive+0x30c>)
 8004128:	ebaa 0a01 	sub.w	sl, sl, r1
 800412c:	4652      	mov	r2, sl
 800412e:	4618      	mov	r0, r3
 8004130:	f001 faf0 	bl	8005714 <memcpy>
						gps_data[delim_ptr - curr_ptr] = '\0';
 8004134:	2200      	movs	r2, #0
 8004136:	f800 200a 	strb.w	r2, [r0, sl]
						if(gps_data[0] == 'W')
 800413a:	7803      	ldrb	r3, [r0, #0]
 800413c:	2b57      	cmp	r3, #87	; 0x57
 800413e:	d106      	bne.n	800414e <uart_receive+0x246>
							lon = lon*-1;
 8004140:	4b3b      	ldr	r3, [pc, #236]	; (8004230 <uart_receive+0x328>)
 8004142:	edd3 7a00 	vldr	s15, [r3]
 8004146:	eef1 7a67 	vneg.f32	s15, s15
 800414a:	edc3 7a00 	vstr	s15, [r3]
					if((curr_ptr != delim_ptr) && (gps_cnt == 10))
 800414e:	6835      	ldr	r5, [r6, #0]
 8004150:	e09e      	b.n	8004290 <uart_receive+0x388>
					if((curr_ptr != delim_ptr) && (gps_cnt == 4))
 8004152:	2c04      	cmp	r4, #4
 8004154:	d1e5      	bne.n	8004122 <uart_receive+0x21a>
						memcpy(gps_data, curr_ptr, delim_ptr - curr_ptr);
 8004156:	4b2f      	ldr	r3, [pc, #188]	; (8004214 <uart_receive+0x30c>)
 8004158:	ebaa 0a01 	sub.w	sl, sl, r1
 800415c:	4618      	mov	r0, r3
 800415e:	4652      	mov	r2, sl
 8004160:	f001 fad8 	bl	8005714 <memcpy>
						gps_data[delim_ptr - curr_ptr] = '\0';
 8004164:	2200      	movs	r2, #0
 8004166:	f800 200a 	strb.w	r2, [r0, sl]
						lon_in = atof(gps_data);
 800416a:	f001 faa2 	bl	80056b2 <atof>
 800416e:	ec51 0b10 	vmov	r0, r1, d0
 8004172:	f7fc fd35 	bl	8000be0 <__aeabi_d2f>
 8004176:	ee07 0a10 	vmov	s14, r0
 800417a:	9b00      	ldr	r3, [sp, #0]
						lon = ((int)lon_in/100) + (lon_in - ((int)lon_in/100)*100)/60;
 800417c:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8004228 <uart_receive+0x320>
						lon_in = atof(gps_data);
 8004180:	6018      	str	r0, [r3, #0]
						lon = ((int)lon_in/100) + (lon_in - ((int)lon_in/100)*100)/60;
 8004182:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8004186:	2264      	movs	r2, #100	; 0x64
 8004188:	ee17 3a90 	vmov	r3, s15
 800418c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004190:	435a      	muls	r2, r3
 8004192:	ee07 2a90 	vmov	s15, r2
 8004196:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800419a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800419e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80041a2:	ee07 3a90 	vmov	s15, r3
 80041a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041aa:	4b21      	ldr	r3, [pc, #132]	; (8004230 <uart_receive+0x328>)
 80041ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041b0:	e7b0      	b.n	8004114 <uart_receive+0x20c>
					if((curr_ptr != delim_ptr) && (gps_cnt == 9))
 80041b2:	2c09      	cmp	r4, #9
 80041b4:	d14c      	bne.n	8004250 <uart_receive+0x348>
						memcpy(gps_data, curr_ptr, delim_ptr - curr_ptr);
 80041b6:	4b17      	ldr	r3, [pc, #92]	; (8004214 <uart_receive+0x30c>)
 80041b8:	ebaa 0a01 	sub.w	sl, sl, r1
 80041bc:	4618      	mov	r0, r3
 80041be:	4652      	mov	r2, sl
 80041c0:	f001 faa8 	bl	8005714 <memcpy>
						gps_data[delim_ptr - curr_ptr] = '\0';
 80041c4:	2200      	movs	r2, #0
 80041c6:	f800 200a 	strb.w	r2, [r0, sl]
						alt = atof(gps_data);
 80041ca:	f001 fa72 	bl	80056b2 <atof>
 80041ce:	ec51 0b10 	vmov	r0, r1, d0
 80041d2:	f7fc fd05 	bl	8000be0 <__aeabi_d2f>
 80041d6:	4b17      	ldr	r3, [pc, #92]	; (8004234 <uart_receive+0x32c>)
 80041d8:	6018      	str	r0, [r3, #0]
 80041da:	e7b8      	b.n	800414e <uart_receive+0x246>
					curr_ptr = delim_ptr + 1;
 80041dc:	1c68      	adds	r0, r5, #1
					delim_ptr = strchr(curr_ptr, ',');
 80041de:	212c      	movs	r1, #44	; 0x2c
					curr_ptr = delim_ptr + 1;
 80041e0:	f8c9 0000 	str.w	r0, [r9]
					delim_ptr = strchr(curr_ptr, ',');
 80041e4:	f001 fade 	bl	80057a4 <strchr>
 80041e8:	6030      	str	r0, [r6, #0]
 80041ea:	e05b      	b.n	80042a4 <uart_receive+0x39c>
					if((curr_ptr != delim_ptr) && (gps_cnt == 10))
 80041ec:	460d      	mov	r5, r1
 80041ee:	e04f      	b.n	8004290 <uart_receive+0x388>
 80041f0:	20000b22 	.word	0x20000b22
 80041f4:	20000a6c 	.word	0x20000a6c
 80041f8:	200006d1 	.word	0x200006d1
 80041fc:	20000be0 	.word	0x20000be0
 8004200:	08009b8b 	.word	0x08009b8b
 8004204:	200006bc 	.word	0x200006bc
 8004208:	20000b23 	.word	0x20000b23
 800420c:	20000b78 	.word	0x20000b78
 8004210:	20000b20 	.word	0x20000b20
 8004214:	20000b44 	.word	0x20000b44
 8004218:	ffffd8f0 	.word	0xffffd8f0
 800421c:	200006ca 	.word	0x200006ca
 8004220:	20000758 	.word	0x20000758
 8004224:	200007c4 	.word	0x200007c4
 8004228:	42700000 	.word	0x42700000
 800422c:	20000730 	.word	0x20000730
 8004230:	20000750 	.word	0x20000750
 8004234:	200006b0 	.word	0x200006b0
 8004238:	20000b7c 	.word	0x20000b7c
 800423c:	20000b2c 	.word	0x20000b2c
 8004240:	200006d0 	.word	0x200006d0
 8004244:	20000b28 	.word	0x20000b28
 8004248:	20000be4 	.word	0x20000be4
 800424c:	20000be8 	.word	0x20000be8
 8004250:	2c0a      	cmp	r4, #10
 8004252:	6839      	ldr	r1, [r7, #0]
 8004254:	6835      	ldr	r5, [r6, #0]
 8004256:	d11b      	bne.n	8004290 <uart_receive+0x388>
						memcpy(gps_data, curr_ptr, delim_ptr - curr_ptr);
 8004258:	4b25      	ldr	r3, [pc, #148]	; (80042f0 <uart_receive+0x3e8>)
 800425a:	eba5 0a01 	sub.w	sl, r5, r1
 800425e:	4652      	mov	r2, sl
 8004260:	4618      	mov	r0, r3
 8004262:	f001 fa57 	bl	8005714 <memcpy>
						gps_data[delim_ptr - curr_ptr] = '\0';
 8004266:	2200      	movs	r2, #0
 8004268:	f800 200a 	strb.w	r2, [r0, sl]
						if(gps_data[0] == 'F')
 800426c:	7803      	ldrb	r3, [r0, #0]
 800426e:	2b46      	cmp	r3, #70	; 0x46
 8004270:	d1b4      	bne.n	80041dc <uart_receive+0x2d4>
							alt = alt*3.28084;
 8004272:	f8df 9084 	ldr.w	r9, [pc, #132]	; 80042f8 <uart_receive+0x3f0>
 8004276:	f8d9 0000 	ldr.w	r0, [r9]
 800427a:	f7fc f965 	bl	8000548 <__aeabi_f2d>
 800427e:	a31a      	add	r3, pc, #104	; (adr r3, 80042e8 <uart_receive+0x3e0>)
 8004280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004284:	f7fc f9b4 	bl	80005f0 <__aeabi_dmul>
 8004288:	f7fc fcaa 	bl	8000be0 <__aeabi_d2f>
 800428c:	f8c9 0000 	str.w	r0, [r9]
					curr_ptr = delim_ptr + 1;
 8004290:	1c68      	adds	r0, r5, #1
					delim_ptr = strchr(curr_ptr, ',');
 8004292:	212c      	movs	r1, #44	; 0x2c
					curr_ptr = delim_ptr + 1;
 8004294:	6038      	str	r0, [r7, #0]
					delim_ptr = strchr(curr_ptr, ',');
 8004296:	f001 fa85 	bl	80057a4 <strchr>
				for(int gps_cnt = 0; gps_cnt < 11; gps_cnt++)
 800429a:	3401      	adds	r4, #1
 800429c:	2c0b      	cmp	r4, #11
					delim_ptr = strchr(curr_ptr, ',');
 800429e:	6030      	str	r0, [r6, #0]
				for(int gps_cnt = 0; gps_cnt < 11; gps_cnt++)
 80042a0:	f47f aeb2 	bne.w	8004008 <uart_receive+0x100>
				if(burn_down_cnt == 11)
 80042a4:	4b13      	ldr	r3, [pc, #76]	; (80042f4 <uart_receive+0x3ec>)
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	2b0b      	cmp	r3, #11
 80042aa:	d101      	bne.n	80042b0 <uart_receive+0x3a8>
					check_burn();
 80042ac:	f7ff fdac 	bl	8003e08 <check_burn>
				if(prev_alt != alt)
 80042b0:	4b11      	ldr	r3, [pc, #68]	; (80042f8 <uart_receive+0x3f0>)
 80042b2:	edd3 7a00 	vldr	s15, [r3]
 80042b6:	4b11      	ldr	r3, [pc, #68]	; (80042fc <uart_receive+0x3f4>)
 80042b8:	ed93 7a00 	vldr	s14, [r3]
 80042bc:	eeb4 7a67 	vcmp.f32	s14, s15
 80042c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
					lcd_print_flag = 1;
 80042c4:	bf1f      	itttt	ne
 80042c6:	4a0e      	ldrne	r2, [pc, #56]	; (8004300 <uart_receive+0x3f8>)
					prev_alt = alt;
 80042c8:	edc3 7a00 	vstrne	s15, [r3]
					lcd_print_flag = 1;
 80042cc:	2101      	movne	r1, #1
 80042ce:	7011      	strbne	r1, [r2, #0]
	memset(in_string, 0, sizeof in_string);
 80042d0:	225c      	movs	r2, #92	; 0x5c
 80042d2:	2100      	movs	r1, #0
 80042d4:	480b      	ldr	r0, [pc, #44]	; (8004304 <uart_receive+0x3fc>)
 80042d6:	f001 fa28 	bl	800572a <memset>
	in_len = 0;
 80042da:	4b0b      	ldr	r3, [pc, #44]	; (8004308 <uart_receive+0x400>)
 80042dc:	2200      	movs	r2, #0
 80042de:	701a      	strb	r2, [r3, #0]
}
 80042e0:	b005      	add	sp, #20
 80042e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042e6:	bf00      	nop
 80042e8:	0abb44e5 	.word	0x0abb44e5
 80042ec:	400a3f29 	.word	0x400a3f29
 80042f0:	20000b44 	.word	0x20000b44
 80042f4:	2000000c 	.word	0x2000000c
 80042f8:	200006b0 	.word	0x200006b0
 80042fc:	200007b4 	.word	0x200007b4
 8004300:	2000073c 	.word	0x2000073c
 8004304:	200006d1 	.word	0x200006d1
 8004308:	20000b23 	.word	0x20000b23
 800430c:	00000000 	.word	0x00000000

08004310 <read_adc>:
{
 8004310:	b084      	sub	sp, #16
 8004312:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004314:	ed2d 8b02 	vpush	{d8}
 8004318:	ac08      	add	r4, sp, #32
 800431a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	adc_flag = 0;
 800431e:	4b2e      	ldr	r3, [pc, #184]	; (80043d8 <read_adc+0xc8>)
	adc_voltage = 0;
 8004320:	4f2e      	ldr	r7, [pc, #184]	; (80043dc <read_adc+0xcc>)
	adc_current = 0;
 8004322:	4d2f      	ldr	r5, [pc, #188]	; (80043e0 <read_adc+0xd0>)
	voltage_readings[cnt_readings] = (adc_voltage / 4095) * 16.4;
 8004324:	ed9f 8a2f 	vldr	s16, [pc, #188]	; 80043e4 <read_adc+0xd4>
	adc_flag = 0;
 8004328:	2200      	movs	r2, #0
 800432a:	701a      	strb	r2, [r3, #0]
	adc_voltage = HAL_ADC_GetValue(&hadc1);
 800432c:	4620      	mov	r0, r4
	adc_voltage = 0;
 800432e:	2300      	movs	r3, #0
 8004330:	603b      	str	r3, [r7, #0]
	adc_current = 0;
 8004332:	602b      	str	r3, [r5, #0]
	adc_voltage = HAL_ADC_GetValue(&hadc1);
 8004334:	f7fd f8c4 	bl	80014c0 <HAL_ADC_GetValue>
 8004338:	ee07 0a90 	vmov	s15, r0
 800433c:	eef8 7a67 	vcvt.f32.u32	s15, s15
	adc_current = HAL_ADC_GetValue(&hadc2);
 8004340:	a81d      	add	r0, sp, #116	; 0x74
	adc_voltage = HAL_ADC_GetValue(&hadc1);
 8004342:	edc7 7a00 	vstr	s15, [r7]
	adc_current = HAL_ADC_GetValue(&hadc2);
 8004346:	f7fd f8bb 	bl	80014c0 <HAL_ADC_GetValue>
 800434a:	ee07 0a90 	vmov	s15, r0
 800434e:	eef8 7a67 	vcvt.f32.u32	s15, s15
	HAL_ADC_Start(&hadc1);
 8004352:	a808      	add	r0, sp, #32
	adc_current = HAL_ADC_GetValue(&hadc2);
 8004354:	edc5 7a00 	vstr	s15, [r5]
	HAL_ADC_Start(&hadc1);
 8004358:	f7fc ffd4 	bl	8001304 <HAL_ADC_Start>
	HAL_ADC_Start(&hadc2);
 800435c:	a81d      	add	r0, sp, #116	; 0x74
 800435e:	f7fc ffd1 	bl	8001304 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1);
 8004362:	2101      	movs	r1, #1
 8004364:	a808      	add	r0, sp, #32
 8004366:	f7fd f833 	bl	80013d0 <HAL_ADC_PollForConversion>
	HAL_ADC_PollForConversion(&hadc2, 1);
 800436a:	2101      	movs	r1, #1
 800436c:	a81d      	add	r0, sp, #116	; 0x74
 800436e:	f7fd f82f 	bl	80013d0 <HAL_ADC_PollForConversion>
	voltage_readings[cnt_readings] = (adc_voltage / 4095) * 16.4;
 8004372:	edd7 7a00 	vldr	s15, [r7]
 8004376:	4c1c      	ldr	r4, [pc, #112]	; (80043e8 <read_adc+0xd8>)
 8004378:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800437c:	7823      	ldrb	r3, [r4, #0]
 800437e:	b2de      	uxtb	r6, r3
 8004380:	ee17 0a10 	vmov	r0, s14
 8004384:	f7fc f8e0 	bl	8000548 <__aeabi_f2d>
 8004388:	a311      	add	r3, pc, #68	; (adr r3, 80043d0 <read_adc+0xc0>)
 800438a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800438e:	f7fc f92f 	bl	80005f0 <__aeabi_dmul>
 8004392:	f7fc fc25 	bl	8000be0 <__aeabi_d2f>
	current_readings[cnt_readings] = (adc_current/ 4095) * 346;
 8004396:	ed95 7a00 	vldr	s14, [r5]
	voltage_readings[cnt_readings] = (adc_voltage / 4095) * 16.4;
 800439a:	4b14      	ldr	r3, [pc, #80]	; (80043ec <read_adc+0xdc>)
	current_readings[cnt_readings] = (adc_current/ 4095) * 346;
 800439c:	eec7 7a08 	vdiv.f32	s15, s14, s16
	voltage_readings[cnt_readings] = (adc_voltage / 4095) * 16.4;
 80043a0:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 80043a4:	6018      	str	r0, [r3, #0]
	current_readings[cnt_readings] = (adc_current/ 4095) * 346;
 80043a6:	7822      	ldrb	r2, [r4, #0]
 80043a8:	4b11      	ldr	r3, [pc, #68]	; (80043f0 <read_adc+0xe0>)
 80043aa:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80043ae:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80043f4 <read_adc+0xe4>
 80043b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80043b6:	edc3 7a00 	vstr	s15, [r3]
	cnt_readings++;
 80043ba:	7823      	ldrb	r3, [r4, #0]
 80043bc:	3301      	adds	r3, #1
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	7023      	strb	r3, [r4, #0]
}
 80043c2:	ecbd 8b02 	vpop	{d8}
 80043c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80043ca:	b004      	add	sp, #16
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	66666666 	.word	0x66666666
 80043d4:	40306666 	.word	0x40306666
 80043d8:	20000b24 	.word	0x20000b24
 80043dc:	20000b40 	.word	0x20000b40
 80043e0:	20000b34 	.word	0x20000b34
 80043e4:	457ff000 	.word	0x457ff000
 80043e8:	20000a6a 	.word	0x20000a6a
 80043ec:	20000b88 	.word	0x20000b88
 80043f0:	20000ab0 	.word	0x20000ab0
 80043f4:	43ad0000 	.word	0x43ad0000

080043f8 <calc_avg>:
void calc_avg(){
 80043f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	sum_voltage = 0;
 80043fa:	eddf 7a2d 	vldr	s15, [pc, #180]	; 80044b0 <calc_avg+0xb8>
 80043fe:	4b2d      	ldr	r3, [pc, #180]	; (80044b4 <calc_avg+0xbc>)
	sum_current = 0;
 8004400:	4a2d      	ldr	r2, [pc, #180]	; (80044b8 <calc_avg+0xc0>)
	for(int i=0; i<cnt_readings; i++)
 8004402:	4d2e      	ldr	r5, [pc, #184]	; (80044bc <calc_avg+0xc4>)
		sum_voltage += voltage_readings[i];
 8004404:	4f2e      	ldr	r7, [pc, #184]	; (80044c0 <calc_avg+0xc8>)
		sum_current += current_readings[i];
 8004406:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 80044d0 <calc_avg+0xd8>
	for(int i=0; i<cnt_readings; i++)
 800440a:	2000      	movs	r0, #0
void calc_avg(){
 800440c:	ed2d 8b02 	vpush	{d8}
	for(int i=0; i<cnt_readings; i++)
 8004410:	eeb0 7a67 	vmov.f32	s14, s15
	sum_voltage = 0;
 8004414:	edc3 7a00 	vstr	s15, [r3]
	sum_current = 0;
 8004418:	edc2 7a00 	vstr	s15, [r2]
	for(int i=0; i<cnt_readings; i++)
 800441c:	4601      	mov	r1, r0
 800441e:	462c      	mov	r4, r5
 8004420:	782e      	ldrb	r6, [r5, #0]
 8004422:	42b1      	cmp	r1, r6
 8004424:	db2e      	blt.n	8004484 <calc_avg+0x8c>
 8004426:	b118      	cbz	r0, 8004430 <calc_avg+0x38>
 8004428:	ed83 7a00 	vstr	s14, [r3]
 800442c:	edc2 7a00 	vstr	s15, [r2]
	cur = sum_current/cnt_readings;
 8004430:	7821      	ldrb	r1, [r4, #0]
 8004432:	edd2 6a00 	vldr	s13, [r2]
 8004436:	ee07 1a10 	vmov	s14, r1
 800443a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800443e:	4921      	ldr	r1, [pc, #132]	; (80044c4 <calc_avg+0xcc>)
 8004440:	eec6 7a87 	vdiv.f32	s15, s13, s14
	vol = sum_voltage/cnt_readings;
 8004444:	ed93 7a00 	vldr	s14, [r3]
	cur = sum_current/cnt_readings;
 8004448:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800444c:	ee17 2a90 	vmov	r2, s15
 8004450:	700a      	strb	r2, [r1, #0]
	vol = sum_voltage/cnt_readings;
 8004452:	7822      	ldrb	r2, [r4, #0]
 8004454:	ee07 2a90 	vmov	s15, r2
 8004458:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800445c:	ee87 8a27 	vdiv.f32	s16, s14, s15
	if(vol > 9.9){
 8004460:	ee18 0a10 	vmov	r0, s16
 8004464:	f7fc f870 	bl	8000548 <__aeabi_f2d>
 8004468:	a30f      	add	r3, pc, #60	; (adr r3, 80044a8 <calc_avg+0xb0>)
 800446a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800446e:	f7fc fb4f 	bl	8000b10 <__aeabi_dcmpgt>
 8004472:	4b15      	ldr	r3, [pc, #84]	; (80044c8 <calc_avg+0xd0>)
 8004474:	b9a0      	cbnz	r0, 80044a0 <calc_avg+0xa8>
	vol = sum_voltage/cnt_readings;
 8004476:	ed83 8a00 	vstr	s16, [r3]
	cnt_readings = 0;
 800447a:	2300      	movs	r3, #0
 800447c:	7023      	strb	r3, [r4, #0]
}
 800447e:	ecbd 8b02 	vpop	{d8}
 8004482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sum_voltage += voltage_readings[i];
 8004484:	0088      	lsls	r0, r1, #2
 8004486:	183e      	adds	r6, r7, r0
 8004488:	edd6 6a00 	vldr	s13, [r6]
		sum_current += current_readings[i];
 800448c:	4470      	add	r0, lr
		sum_voltage += voltage_readings[i];
 800448e:	ee37 7a26 	vadd.f32	s14, s14, s13
		sum_current += current_readings[i];
 8004492:	edd0 6a00 	vldr	s13, [r0]
	for(int i=0; i<cnt_readings; i++)
 8004496:	3101      	adds	r1, #1
		sum_current += current_readings[i];
 8004498:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800449c:	2001      	movs	r0, #1
 800449e:	e7bf      	b.n	8004420 <calc_avg+0x28>
		vol = 9.9;
 80044a0:	4a0a      	ldr	r2, [pc, #40]	; (80044cc <calc_avg+0xd4>)
 80044a2:	601a      	str	r2, [r3, #0]
 80044a4:	e7e9      	b.n	800447a <calc_avg+0x82>
 80044a6:	bf00      	nop
 80044a8:	cccccccd 	.word	0xcccccccd
 80044ac:	4023cccc 	.word	0x4023cccc
 80044b0:	00000000 	.word	0x00000000
 80044b4:	20000b84 	.word	0x20000b84
 80044b8:	20000c44 	.word	0x20000c44
 80044bc:	20000a6a 	.word	0x20000a6a
 80044c0:	20000b88 	.word	0x20000b88
 80044c4:	200006bd 	.word	0x200006bd
 80044c8:	200007d4 	.word	0x200007d4
 80044cc:	411e6666 	.word	0x411e6666
 80044d0:	20000ab0 	.word	0x20000ab0

080044d4 <lcd_write>:
{
 80044d4:	b538      	push	{r3, r4, r5, lr}
	HAL_GPIO_WritePin (GPIOB, GPIO_PIN_11, 1); 	// E set high
 80044d6:	4c19      	ldr	r4, [pc, #100]	; (800453c <lcd_write+0x68>)
	HAL_GPIO_WritePin (GPIOB, GPIO_PIN_1, data_bits[0]); 	// RS
 80044d8:	4d19      	ldr	r5, [pc, #100]	; (8004540 <lcd_write+0x6c>)
	HAL_GPIO_WritePin (GPIOB, GPIO_PIN_11, 1); 	// E set high
 80044da:	4620      	mov	r0, r4
 80044dc:	2201      	movs	r2, #1
 80044de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80044e2:	f7fd fb2b 	bl	8001b3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOB, GPIO_PIN_1, data_bits[0]); 	// RS
 80044e6:	782a      	ldrb	r2, [r5, #0]
 80044e8:	4620      	mov	r0, r4
 80044ea:	2102      	movs	r1, #2
 80044ec:	f7fd fb26 	bl	8001b3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOB, GPIO_PIN_2, data_bits[1]); 	//RNW
 80044f0:	786a      	ldrb	r2, [r5, #1]
 80044f2:	4620      	mov	r0, r4
 80044f4:	2104      	movs	r1, #4
 80044f6:	f7fd fb21 	bl	8001b3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOB, GPIO_PIN_15, data_bits[2]); 	//DB7
 80044fa:	78aa      	ldrb	r2, [r5, #2]
 80044fc:	4620      	mov	r0, r4
 80044fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004502:	f7fd fb1b 	bl	8001b3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOB, GPIO_PIN_14, data_bits[3]); 	//DB6
 8004506:	78ea      	ldrb	r2, [r5, #3]
 8004508:	4620      	mov	r0, r4
 800450a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800450e:	f7fd fb15 	bl	8001b3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOB, GPIO_PIN_13, data_bits[4]); 	//DB5
 8004512:	792a      	ldrb	r2, [r5, #4]
 8004514:	4620      	mov	r0, r4
 8004516:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800451a:	f7fd fb0f 	bl	8001b3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOB, GPIO_PIN_12, data_bits[5]); 	//DB4
 800451e:	796a      	ldrb	r2, [r5, #5]
 8004520:	4620      	mov	r0, r4
 8004522:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004526:	f7fd fb09 	bl	8001b3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOB, GPIO_PIN_11, 0); 	// E set low
 800452a:	4620      	mov	r0, r4
 800452c:	2200      	movs	r2, #0
 800452e:	f44f 6100 	mov.w	r1, #2048	; 0x800
}
 8004532:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_GPIO_WritePin (GPIOB, GPIO_PIN_11, 0); 	// E set low
 8004536:	f7fd bb01 	b.w	8001b3c <HAL_GPIO_WritePin>
 800453a:	bf00      	nop
 800453c:	48000400 	.word	0x48000400
 8004540:	200006c4 	.word	0x200006c4

08004544 <init_lcd>:
{
 8004544:	b570      	push	{r4, r5, r6, lr}
	data_bits[0] = 0;
 8004546:	4c44      	ldr	r4, [pc, #272]	; (8004658 <init_lcd+0x114>)
 8004548:	2500      	movs	r5, #0
	data_bits[4] = 1;
 800454a:	2601      	movs	r6, #1
	HAL_Delay(100);
 800454c:	2064      	movs	r0, #100	; 0x64
 800454e:	f7fc fd67 	bl	8001020 <HAL_Delay>
	data_bits[0] = 0;
 8004552:	7025      	strb	r5, [r4, #0]
	data_bits[1] = 0;
 8004554:	7065      	strb	r5, [r4, #1]
	data_bits[2] = 0;
 8004556:	70a5      	strb	r5, [r4, #2]
	data_bits[3] = 0;
 8004558:	70e5      	strb	r5, [r4, #3]
	data_bits[4] = 1;
 800455a:	7126      	strb	r6, [r4, #4]
	data_bits[5] = 1;
 800455c:	7166      	strb	r6, [r4, #5]
	lcd_write();
 800455e:	f7ff ffb9 	bl	80044d4 <lcd_write>
	HAL_Delay(4.2);
 8004562:	2004      	movs	r0, #4
 8004564:	f7fc fd5c 	bl	8001020 <HAL_Delay>
	lcd_write();
 8004568:	f7ff ffb4 	bl	80044d4 <lcd_write>
	HAL_Delay(0.2);
 800456c:	4628      	mov	r0, r5
 800456e:	f7fc fd57 	bl	8001020 <HAL_Delay>
	lcd_write();
 8004572:	f7ff ffaf 	bl	80044d4 <lcd_write>
	HAL_Delay(0.2);
 8004576:	4628      	mov	r0, r5
 8004578:	f7fc fd52 	bl	8001020 <HAL_Delay>
	data_bits[0] = 0;
 800457c:	7025      	strb	r5, [r4, #0]
	data_bits[1] = 0;
 800457e:	7065      	strb	r5, [r4, #1]
	data_bits[2] = 0;
 8004580:	70a5      	strb	r5, [r4, #2]
	data_bits[3] = 0;
 8004582:	70e5      	strb	r5, [r4, #3]
	data_bits[4] = 1;
 8004584:	7126      	strb	r6, [r4, #4]
	data_bits[5] = 0;
 8004586:	7165      	strb	r5, [r4, #5]
	lcd_write();
 8004588:	f7ff ffa4 	bl	80044d4 <lcd_write>
	HAL_Delay(0.2);
 800458c:	4628      	mov	r0, r5
 800458e:	f7fc fd47 	bl	8001020 <HAL_Delay>
	data_bits[0] = 0;
 8004592:	7025      	strb	r5, [r4, #0]
	data_bits[1] = 0;
 8004594:	7065      	strb	r5, [r4, #1]
	data_bits[2] = 0;
 8004596:	70a5      	strb	r5, [r4, #2]
	data_bits[3] = 0;
 8004598:	70e5      	strb	r5, [r4, #3]
	data_bits[4] = 1;
 800459a:	7126      	strb	r6, [r4, #4]
	data_bits[5] = 0;
 800459c:	7165      	strb	r5, [r4, #5]
	lcd_write();
 800459e:	f7ff ff99 	bl	80044d4 <lcd_write>
	data_bits[0] = 0;
 80045a2:	7025      	strb	r5, [r4, #0]
	data_bits[1] = 0;
 80045a4:	7065      	strb	r5, [r4, #1]
	data_bits[2] = 1;
 80045a6:	70a6      	strb	r6, [r4, #2]
	data_bits[3] = 0;
 80045a8:	70e5      	strb	r5, [r4, #3]
	data_bits[4] = 0;
 80045aa:	7125      	strb	r5, [r4, #4]
	data_bits[5] = 0;
 80045ac:	7165      	strb	r5, [r4, #5]
	lcd_write();
 80045ae:	f7ff ff91 	bl	80044d4 <lcd_write>
	HAL_Delay(0.1);
 80045b2:	4628      	mov	r0, r5
 80045b4:	f7fc fd34 	bl	8001020 <HAL_Delay>
	data_bits[0] = 0;
 80045b8:	7025      	strb	r5, [r4, #0]
	data_bits[1] = 0;
 80045ba:	7065      	strb	r5, [r4, #1]
	data_bits[2] = 0;
 80045bc:	70a5      	strb	r5, [r4, #2]
	data_bits[3] = 0;
 80045be:	70e5      	strb	r5, [r4, #3]
	data_bits[4] = 0;
 80045c0:	7125      	strb	r5, [r4, #4]
	data_bits[5] = 0;
 80045c2:	7165      	strb	r5, [r4, #5]
	lcd_write();
 80045c4:	f7ff ff86 	bl	80044d4 <lcd_write>
	data_bits[0] = 0;
 80045c8:	7025      	strb	r5, [r4, #0]
	data_bits[1] = 0;
 80045ca:	7065      	strb	r5, [r4, #1]
	data_bits[2] = 1;
 80045cc:	70a6      	strb	r6, [r4, #2]
	data_bits[3] = 0;
 80045ce:	70e5      	strb	r5, [r4, #3]
	data_bits[4] = 0;
 80045d0:	7125      	strb	r5, [r4, #4]
	data_bits[5] = 0;
 80045d2:	7165      	strb	r5, [r4, #5]
	lcd_write();
 80045d4:	f7ff ff7e 	bl	80044d4 <lcd_write>
	HAL_Delay(1);
 80045d8:	4630      	mov	r0, r6
 80045da:	f7fc fd21 	bl	8001020 <HAL_Delay>
	data_bits[0] = 0;
 80045de:	7025      	strb	r5, [r4, #0]
	data_bits[1] = 0;
 80045e0:	7065      	strb	r5, [r4, #1]
	data_bits[2] = 0;
 80045e2:	70a5      	strb	r5, [r4, #2]
	data_bits[3] = 0;
 80045e4:	70e5      	strb	r5, [r4, #3]
	data_bits[4] = 0;
 80045e6:	7125      	strb	r5, [r4, #4]
	data_bits[5] = 0;
 80045e8:	7165      	strb	r5, [r4, #5]
	lcd_write();
 80045ea:	f7ff ff73 	bl	80044d4 <lcd_write>
	data_bits[0] = 0;
 80045ee:	7025      	strb	r5, [r4, #0]
	data_bits[1] = 0;
 80045f0:	7065      	strb	r5, [r4, #1]
	data_bits[2] = 0;
 80045f2:	70a5      	strb	r5, [r4, #2]
	data_bits[3] = 0;
 80045f4:	70e5      	strb	r5, [r4, #3]
	data_bits[4] = 0;
 80045f6:	7125      	strb	r5, [r4, #4]
	data_bits[5] = 1;
 80045f8:	7166      	strb	r6, [r4, #5]
	lcd_write();
 80045fa:	f7ff ff6b 	bl	80044d4 <lcd_write>
	HAL_Delay(4);
 80045fe:	2004      	movs	r0, #4
 8004600:	f7fc fd0e 	bl	8001020 <HAL_Delay>
	data_bits[0] = 0;
 8004604:	7025      	strb	r5, [r4, #0]
	data_bits[1] = 0;
 8004606:	7065      	strb	r5, [r4, #1]
	data_bits[2] = 0;
 8004608:	70a5      	strb	r5, [r4, #2]
	data_bits[3] = 0;
 800460a:	70e5      	strb	r5, [r4, #3]
	data_bits[4] = 0;
 800460c:	7125      	strb	r5, [r4, #4]
	data_bits[5] = 0;
 800460e:	7165      	strb	r5, [r4, #5]
	lcd_write();
 8004610:	f7ff ff60 	bl	80044d4 <lcd_write>
	data_bits[0] = 0;
 8004614:	7025      	strb	r5, [r4, #0]
	data_bits[1] = 0;
 8004616:	7065      	strb	r5, [r4, #1]
	data_bits[2] = 0;
 8004618:	70a5      	strb	r5, [r4, #2]
	data_bits[3] = 1;
 800461a:	70e6      	strb	r6, [r4, #3]
	data_bits[4] = 1;
 800461c:	7126      	strb	r6, [r4, #4]
	data_bits[5] = 0;
 800461e:	7165      	strb	r5, [r4, #5]
	lcd_write();
 8004620:	f7ff ff58 	bl	80044d4 <lcd_write>
	HAL_Delay(1);
 8004624:	4630      	mov	r0, r6
 8004626:	f7fc fcfb 	bl	8001020 <HAL_Delay>
	data_bits[0] = 0;
 800462a:	7025      	strb	r5, [r4, #0]
	data_bits[1] = 0;
 800462c:	7065      	strb	r5, [r4, #1]
	data_bits[2] = 0;
 800462e:	70a5      	strb	r5, [r4, #2]
	data_bits[3] = 0;
 8004630:	70e5      	strb	r5, [r4, #3]
	data_bits[4] = 0;
 8004632:	7125      	strb	r5, [r4, #4]
	data_bits[5] = 0;
 8004634:	7165      	strb	r5, [r4, #5]
	lcd_write();
 8004636:	f7ff ff4d 	bl	80044d4 <lcd_write>
	data_bits[0] = 0;
 800463a:	7025      	strb	r5, [r4, #0]
	data_bits[1] = 0;
 800463c:	7065      	strb	r5, [r4, #1]
	data_bits[2] = 1;
 800463e:	70a6      	strb	r6, [r4, #2]
	data_bits[3] = 1;
 8004640:	70e6      	strb	r6, [r4, #3]
	data_bits[4] = 0;
 8004642:	7125      	strb	r5, [r4, #4]
	data_bits[5] = 0;
 8004644:	7165      	strb	r5, [r4, #5]
	lcd_write();
 8004646:	f7ff ff45 	bl	80044d4 <lcd_write>
	HAL_Delay(10);
 800464a:	200a      	movs	r0, #10
 800464c:	f7fc fce8 	bl	8001020 <HAL_Delay>
	lcd_print_flag = 1;
 8004650:	4b02      	ldr	r3, [pc, #8]	; (800465c <init_lcd+0x118>)
 8004652:	701e      	strb	r6, [r3, #0]
 8004654:	bd70      	pop	{r4, r5, r6, pc}
 8004656:	bf00      	nop
 8004658:	200006c4 	.word	0x200006c4
 800465c:	2000073c 	.word	0x2000073c

08004660 <lcd_clear>:
{
 8004660:	b538      	push	{r3, r4, r5, lr}
	data_bits[0] = 0;
 8004662:	4c0a      	ldr	r4, [pc, #40]	; (800468c <lcd_clear+0x2c>)
 8004664:	2500      	movs	r5, #0
 8004666:	7025      	strb	r5, [r4, #0]
	data_bits[1] = 0;
 8004668:	7065      	strb	r5, [r4, #1]
	data_bits[2] = 0;
 800466a:	70a5      	strb	r5, [r4, #2]
	data_bits[3] = 0;
 800466c:	70e5      	strb	r5, [r4, #3]
	data_bits[4] = 0;
 800466e:	7125      	strb	r5, [r4, #4]
	data_bits[5] = 0;
 8004670:	7165      	strb	r5, [r4, #5]
	lcd_write();
 8004672:	f7ff ff2f 	bl	80044d4 <lcd_write>
	data_bits[5] = 1;
 8004676:	2301      	movs	r3, #1
	data_bits[0] = 0;
 8004678:	7025      	strb	r5, [r4, #0]
	data_bits[1] = 0;
 800467a:	7065      	strb	r5, [r4, #1]
	data_bits[2] = 0;
 800467c:	70a5      	strb	r5, [r4, #2]
	data_bits[3] = 0;
 800467e:	70e5      	strb	r5, [r4, #3]
	data_bits[4] = 0;
 8004680:	7125      	strb	r5, [r4, #4]
	data_bits[5] = 1;
 8004682:	7163      	strb	r3, [r4, #5]
}
 8004684:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lcd_write();
 8004688:	f7ff bf24 	b.w	80044d4 <lcd_write>
 800468c:	200006c4 	.word	0x200006c4

08004690 <increment_address>:
{
 8004690:	b538      	push	{r3, r4, r5, lr}
	data_bits[0] = 0;
 8004692:	4c0a      	ldr	r4, [pc, #40]	; (80046bc <increment_address+0x2c>)
 8004694:	2500      	movs	r5, #0
	data_bits[2] = 1;
 8004696:	2301      	movs	r3, #1
	data_bits[0] = 0;
 8004698:	7025      	strb	r5, [r4, #0]
	data_bits[1] = 0;
 800469a:	7065      	strb	r5, [r4, #1]
	data_bits[2] = 1;
 800469c:	70a3      	strb	r3, [r4, #2]
	data_bits[3] = 1;
 800469e:	70e3      	strb	r3, [r4, #3]
	data_bits[4] = 0;
 80046a0:	7125      	strb	r5, [r4, #4]
	data_bits[5] = 0;
 80046a2:	7165      	strb	r5, [r4, #5]
	lcd_write();
 80046a4:	f7ff ff16 	bl	80044d4 <lcd_write>
	data_bits[0] = 0;
 80046a8:	7025      	strb	r5, [r4, #0]
	data_bits[1] = 0;
 80046aa:	7065      	strb	r5, [r4, #1]
	data_bits[2] = 0;
 80046ac:	70a5      	strb	r5, [r4, #2]
	data_bits[3] = 0;
 80046ae:	70e5      	strb	r5, [r4, #3]
	data_bits[4] = 0;
 80046b0:	7125      	strb	r5, [r4, #4]
	data_bits[5] = 0;
 80046b2:	7165      	strb	r5, [r4, #5]
}
 80046b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lcd_write();
 80046b8:	f7ff bf0c 	b.w	80044d4 <lcd_write>
 80046bc:	200006c4 	.word	0x200006c4

080046c0 <lcd_print_char>:
	switch(c)
 80046c0:	2836      	cmp	r0, #54	; 0x36
{
 80046c2:	b570      	push	{r4, r5, r6, lr}
 80046c4:	4c6d      	ldr	r4, [pc, #436]	; (800487c <lcd_print_char+0x1bc>)
	switch(c)
 80046c6:	f000 809d 	beq.w	8004804 <lcd_print_char+0x144>
 80046ca:	f04f 0501 	mov.w	r5, #1
 80046ce:	d828      	bhi.n	8004722 <lcd_print_char+0x62>
 80046d0:	2832      	cmp	r0, #50	; 0x32
 80046d2:	d068      	beq.n	80047a6 <lcd_print_char+0xe6>
 80046d4:	d813      	bhi.n	80046fe <lcd_print_char+0x3e>
 80046d6:	2830      	cmp	r0, #48	; 0x30
 80046d8:	d047      	beq.n	800476a <lcd_print_char+0xaa>
 80046da:	2831      	cmp	r0, #49	; 0x31
 80046dc:	d053      	beq.n	8004786 <lcd_print_char+0xc6>
		data_bits[1] = 0;
 80046de:	2500      	movs	r5, #0
		data_bits[0] = 1;
 80046e0:	2601      	movs	r6, #1
 80046e2:	7026      	strb	r6, [r4, #0]
		data_bits[1] = 0;
 80046e4:	7065      	strb	r5, [r4, #1]
		data_bits[2] = 0;
 80046e6:	70a5      	strb	r5, [r4, #2]
		data_bits[3] = 0;
 80046e8:	70e5      	strb	r5, [r4, #3]
		data_bits[4] = 1;
 80046ea:	7126      	strb	r6, [r4, #4]
		data_bits[5] = 0;
 80046ec:	7165      	strb	r5, [r4, #5]
		lcd_write();
 80046ee:	f7ff fef1 	bl	80044d4 <lcd_write>
		data_bits[0] = 1;
 80046f2:	7026      	strb	r6, [r4, #0]
		data_bits[1] = 0;
 80046f4:	7065      	strb	r5, [r4, #1]
		data_bits[2] = 0;
 80046f6:	70a5      	strb	r5, [r4, #2]
		data_bits[3] = 1;
 80046f8:	70e5      	strb	r5, [r4, #3]
		data_bits[4] = 1;
 80046fa:	7125      	strb	r5, [r4, #4]
 80046fc:	e051      	b.n	80047a2 <lcd_print_char+0xe2>
	switch(c)
 80046fe:	2834      	cmp	r0, #52	; 0x34
 8004700:	d06d      	beq.n	80047de <lcd_print_char+0x11e>
 8004702:	f04f 0600 	mov.w	r6, #0
 8004706:	d95d      	bls.n	80047c4 <lcd_print_char+0x104>
		data_bits[0] = 1;
 8004708:	7025      	strb	r5, [r4, #0]
		data_bits[1] = 0;
 800470a:	7066      	strb	r6, [r4, #1]
		data_bits[2] = 0;
 800470c:	70a6      	strb	r6, [r4, #2]
		data_bits[3] = 0;
 800470e:	70e6      	strb	r6, [r4, #3]
		data_bits[4] = 1;
 8004710:	7125      	strb	r5, [r4, #4]
		data_bits[5] = 1;
 8004712:	7165      	strb	r5, [r4, #5]
		lcd_write();
 8004714:	f7ff fede 	bl	80044d4 <lcd_write>
		data_bits[0] = 1;
 8004718:	7025      	strb	r5, [r4, #0]
		data_bits[1] = 0;
 800471a:	7066      	strb	r6, [r4, #1]
		data_bits[2] = 0;
 800471c:	70a6      	strb	r6, [r4, #2]
		data_bits[3] = 1;
 800471e:	70e5      	strb	r5, [r4, #3]
 8004720:	e03e      	b.n	80047a0 <lcd_print_char+0xe0>
	switch(c)
 8004722:	2839      	cmp	r0, #57	; 0x39
 8004724:	f000 8089 	beq.w	800483a <lcd_print_char+0x17a>
 8004728:	d810      	bhi.n	800474c <lcd_print_char+0x8c>
 800472a:	2837      	cmp	r0, #55	; 0x37
 800472c:	d078      	beq.n	8004820 <lcd_print_char+0x160>
 800472e:	2838      	cmp	r0, #56	; 0x38
 8004730:	d1d5      	bne.n	80046de <lcd_print_char+0x1e>
		data_bits[1] = 0;
 8004732:	2600      	movs	r6, #0
		data_bits[0] = 1;
 8004734:	7025      	strb	r5, [r4, #0]
		data_bits[1] = 0;
 8004736:	7066      	strb	r6, [r4, #1]
		data_bits[2] = 0;
 8004738:	70a6      	strb	r6, [r4, #2]
		data_bits[3] = 0;
 800473a:	70e6      	strb	r6, [r4, #3]
		data_bits[4] = 1;
 800473c:	7125      	strb	r5, [r4, #4]
		data_bits[5] = 1;
 800473e:	7165      	strb	r5, [r4, #5]
		lcd_write();
 8004740:	f7ff fec8 	bl	80044d4 <lcd_write>
		data_bits[0] = 1;
 8004744:	7025      	strb	r5, [r4, #0]
		data_bits[1] = 0;
 8004746:	7066      	strb	r6, [r4, #1]
		data_bits[2] = 1;
 8004748:	70a5      	strb	r5, [r4, #2]
 800474a:	e01a      	b.n	8004782 <lcd_print_char+0xc2>
	switch(c)
 800474c:	2843      	cmp	r0, #67	; 0x43
 800474e:	f000 808d 	beq.w	800486c <lcd_print_char+0x1ac>
 8004752:	286d      	cmp	r0, #109	; 0x6d
 8004754:	d07d      	beq.n	8004852 <lcd_print_char+0x192>
 8004756:	2842      	cmp	r0, #66	; 0x42
 8004758:	d1c1      	bne.n	80046de <lcd_print_char+0x1e>
		data_bits[1] = 0;
 800475a:	2600      	movs	r6, #0
		data_bits[0] = 1;
 800475c:	7025      	strb	r5, [r4, #0]
		data_bits[1] = 0;
 800475e:	7066      	strb	r6, [r4, #1]
		data_bits[2] = 0;
 8004760:	70a6      	strb	r6, [r4, #2]
		data_bits[3] = 1;
 8004762:	70e5      	strb	r5, [r4, #3]
		data_bits[4] = 0;
 8004764:	7126      	strb	r6, [r4, #4]
		data_bits[5] = 0;
 8004766:	7166      	strb	r6, [r4, #5]
 8004768:	e024      	b.n	80047b4 <lcd_print_char+0xf4>
		data_bits[1] = 0;
 800476a:	2600      	movs	r6, #0
		data_bits[0] = 1;
 800476c:	7025      	strb	r5, [r4, #0]
		data_bits[1] = 0;
 800476e:	7066      	strb	r6, [r4, #1]
		data_bits[2] = 0;
 8004770:	70a6      	strb	r6, [r4, #2]
		data_bits[3] = 0;
 8004772:	70e6      	strb	r6, [r4, #3]
		data_bits[4] = 1;
 8004774:	7125      	strb	r5, [r4, #4]
		data_bits[5] = 1;
 8004776:	7165      	strb	r5, [r4, #5]
		lcd_write();
 8004778:	f7ff feac 	bl	80044d4 <lcd_write>
		data_bits[0] = 1;
 800477c:	7025      	strb	r5, [r4, #0]
		data_bits[1] = 0;
 800477e:	7066      	strb	r6, [r4, #1]
		data_bits[2] = 0;
 8004780:	70a6      	strb	r6, [r4, #2]
		data_bits[3] = 0;
 8004782:	70e6      	strb	r6, [r4, #3]
 8004784:	e038      	b.n	80047f8 <lcd_print_char+0x138>
		data_bits[1] = 0;
 8004786:	2600      	movs	r6, #0
		data_bits[0] = 1;
 8004788:	7025      	strb	r5, [r4, #0]
		data_bits[1] = 0;
 800478a:	7066      	strb	r6, [r4, #1]
		data_bits[2] = 0;
 800478c:	70a6      	strb	r6, [r4, #2]
		data_bits[3] = 0;
 800478e:	70e6      	strb	r6, [r4, #3]
		data_bits[4] = 1;
 8004790:	7125      	strb	r5, [r4, #4]
		data_bits[5] = 1;
 8004792:	7165      	strb	r5, [r4, #5]
		lcd_write();
 8004794:	f7ff fe9e 	bl	80044d4 <lcd_write>
		data_bits[0] = 1;
 8004798:	7025      	strb	r5, [r4, #0]
		data_bits[1] = 0;
 800479a:	7066      	strb	r6, [r4, #1]
		data_bits[2] = 0;
 800479c:	70a6      	strb	r6, [r4, #2]
		data_bits[3] = 0;
 800479e:	70e6      	strb	r6, [r4, #3]
		data_bits[4] = 0;
 80047a0:	7126      	strb	r6, [r4, #4]
		data_bits[5] = 1;
 80047a2:	7165      	strb	r5, [r4, #5]
 80047a4:	e02a      	b.n	80047fc <lcd_print_char+0x13c>
		data_bits[1] = 0;
 80047a6:	2600      	movs	r6, #0
		data_bits[0] = 1;
 80047a8:	7025      	strb	r5, [r4, #0]
		data_bits[1] = 0;
 80047aa:	7066      	strb	r6, [r4, #1]
		data_bits[2] = 0;
 80047ac:	70a6      	strb	r6, [r4, #2]
		data_bits[3] = 0;
 80047ae:	70e6      	strb	r6, [r4, #3]
		data_bits[4] = 1;
 80047b0:	7125      	strb	r5, [r4, #4]
		data_bits[5] = 1;
 80047b2:	7165      	strb	r5, [r4, #5]
		lcd_write();
 80047b4:	f7ff fe8e 	bl	80044d4 <lcd_write>
		data_bits[0] = 1;
 80047b8:	7025      	strb	r5, [r4, #0]
		data_bits[1] = 0;
 80047ba:	7066      	strb	r6, [r4, #1]
		data_bits[2] = 0;
 80047bc:	70a6      	strb	r6, [r4, #2]
		data_bits[3] = 0;
 80047be:	70e6      	strb	r6, [r4, #3]
		data_bits[4] = 1;
 80047c0:	7125      	strb	r5, [r4, #4]
 80047c2:	e01a      	b.n	80047fa <lcd_print_char+0x13a>
		data_bits[0] = 1;
 80047c4:	7025      	strb	r5, [r4, #0]
		data_bits[1] = 0;
 80047c6:	7066      	strb	r6, [r4, #1]
		data_bits[2] = 0;
 80047c8:	70a6      	strb	r6, [r4, #2]
		data_bits[3] = 0;
 80047ca:	70e6      	strb	r6, [r4, #3]
		data_bits[4] = 1;
 80047cc:	7125      	strb	r5, [r4, #4]
		data_bits[5] = 1;
 80047ce:	7165      	strb	r5, [r4, #5]
		lcd_write();
 80047d0:	f7ff fe80 	bl	80044d4 <lcd_write>
		data_bits[0] = 1;
 80047d4:	7025      	strb	r5, [r4, #0]
		data_bits[1] = 0;
 80047d6:	7066      	strb	r6, [r4, #1]
		data_bits[2] = 0;
 80047d8:	70a6      	strb	r6, [r4, #2]
		data_bits[3] = 0;
 80047da:	70e6      	strb	r6, [r4, #3]
 80047dc:	e78d      	b.n	80046fa <lcd_print_char+0x3a>
		data_bits[1] = 0;
 80047de:	2600      	movs	r6, #0
		data_bits[0] = 1;
 80047e0:	7025      	strb	r5, [r4, #0]
		data_bits[1] = 0;
 80047e2:	7066      	strb	r6, [r4, #1]
		data_bits[2] = 0;
 80047e4:	70a6      	strb	r6, [r4, #2]
		data_bits[3] = 0;
 80047e6:	70e6      	strb	r6, [r4, #3]
		data_bits[4] = 1;
 80047e8:	7125      	strb	r5, [r4, #4]
		data_bits[5] = 1;
 80047ea:	7165      	strb	r5, [r4, #5]
		lcd_write();
 80047ec:	f7ff fe72 	bl	80044d4 <lcd_write>
		data_bits[0] = 1;
 80047f0:	7025      	strb	r5, [r4, #0]
		data_bits[1] = 0;
 80047f2:	7066      	strb	r6, [r4, #1]
		data_bits[2] = 0;
 80047f4:	70a6      	strb	r6, [r4, #2]
		data_bits[3] = 1;
 80047f6:	70e5      	strb	r5, [r4, #3]
		data_bits[4] = 0;
 80047f8:	7126      	strb	r6, [r4, #4]
		data_bits[5] = 0;
 80047fa:	7166      	strb	r6, [r4, #5]
}
 80047fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		lcd_write();
 8004800:	f7ff be68 	b.w	80044d4 <lcd_write>
		data_bits[0] = 1;
 8004804:	2601      	movs	r6, #1
		data_bits[1] = 0;
 8004806:	2500      	movs	r5, #0
		data_bits[0] = 1;
 8004808:	7026      	strb	r6, [r4, #0]
		data_bits[1] = 0;
 800480a:	7065      	strb	r5, [r4, #1]
		data_bits[2] = 0;
 800480c:	70a5      	strb	r5, [r4, #2]
		data_bits[3] = 0;
 800480e:	70e5      	strb	r5, [r4, #3]
		data_bits[4] = 1;
 8004810:	7126      	strb	r6, [r4, #4]
		data_bits[5] = 1;
 8004812:	7166      	strb	r6, [r4, #5]
		lcd_write();
 8004814:	f7ff fe5e 	bl	80044d4 <lcd_write>
		data_bits[0] = 1;
 8004818:	7026      	strb	r6, [r4, #0]
		data_bits[1] = 0;
 800481a:	7065      	strb	r5, [r4, #1]
		data_bits[2] = 1;
 800481c:	70a5      	strb	r5, [r4, #2]
 800481e:	e7be      	b.n	800479e <lcd_print_char+0xde>
		data_bits[1] = 0;
 8004820:	2600      	movs	r6, #0
		data_bits[0] = 1;
 8004822:	7025      	strb	r5, [r4, #0]
		data_bits[1] = 0;
 8004824:	7066      	strb	r6, [r4, #1]
		data_bits[2] = 0;
 8004826:	70a6      	strb	r6, [r4, #2]
		data_bits[3] = 0;
 8004828:	70e6      	strb	r6, [r4, #3]
		data_bits[4] = 1;
 800482a:	7125      	strb	r5, [r4, #4]
		data_bits[5] = 1;
 800482c:	7165      	strb	r5, [r4, #5]
		lcd_write();
 800482e:	f7ff fe51 	bl	80044d4 <lcd_write>
		data_bits[0] = 1;
 8004832:	7025      	strb	r5, [r4, #0]
		data_bits[1] = 0;
 8004834:	7066      	strb	r6, [r4, #1]
		data_bits[2] = 0;
 8004836:	70a6      	strb	r6, [r4, #2]
 8004838:	e75e      	b.n	80046f8 <lcd_print_char+0x38>
		data_bits[1] = 0;
 800483a:	2600      	movs	r6, #0
		data_bits[0] = 1;
 800483c:	7025      	strb	r5, [r4, #0]
		data_bits[1] = 0;
 800483e:	7066      	strb	r6, [r4, #1]
		data_bits[2] = 0;
 8004840:	70a6      	strb	r6, [r4, #2]
		data_bits[3] = 0;
 8004842:	70e6      	strb	r6, [r4, #3]
		data_bits[4] = 1;
 8004844:	7125      	strb	r5, [r4, #4]
		data_bits[5] = 1;
 8004846:	7165      	strb	r5, [r4, #5]
		lcd_write();
 8004848:	f7ff fe44 	bl	80044d4 <lcd_write>
		data_bits[0] = 1;
 800484c:	7025      	strb	r5, [r4, #0]
		data_bits[1] = 0;
 800484e:	7066      	strb	r6, [r4, #1]
 8004850:	e7e4      	b.n	800481c <lcd_print_char+0x15c>
		data_bits[1] = 0;
 8004852:	2600      	movs	r6, #0
		data_bits[0] = 1;
 8004854:	7025      	strb	r5, [r4, #0]
		data_bits[1] = 0;
 8004856:	7066      	strb	r6, [r4, #1]
		data_bits[2] = 0;
 8004858:	70a6      	strb	r6, [r4, #2]
		data_bits[3] = 1;
 800485a:	70e5      	strb	r5, [r4, #3]
		data_bits[4] = 1;
 800485c:	7125      	strb	r5, [r4, #4]
		data_bits[5] = 0;
 800485e:	7166      	strb	r6, [r4, #5]
		lcd_write();
 8004860:	f7ff fe38 	bl	80044d4 <lcd_write>
		data_bits[0] = 1;
 8004864:	7025      	strb	r5, [r4, #0]
		data_bits[1] = 0;
 8004866:	7066      	strb	r6, [r4, #1]
		data_bits[2] = 1;
 8004868:	70a5      	strb	r5, [r4, #2]
 800486a:	e758      	b.n	800471e <lcd_print_char+0x5e>
		data_bits[1] = 0;
 800486c:	2600      	movs	r6, #0
		data_bits[0] = 1;
 800486e:	7025      	strb	r5, [r4, #0]
		data_bits[1] = 0;
 8004870:	7066      	strb	r6, [r4, #1]
		data_bits[2] = 0;
 8004872:	70a6      	strb	r6, [r4, #2]
		data_bits[3] = 1;
 8004874:	70e5      	strb	r5, [r4, #3]
		data_bits[4] = 0;
 8004876:	7126      	strb	r6, [r4, #4]
		data_bits[5] = 0;
 8004878:	7166      	strb	r6, [r4, #5]
 800487a:	e7a9      	b.n	80047d0 <lcd_print_char+0x110>
 800487c:	200006c4 	.word	0x200006c4

08004880 <lcd_process_state>:
{
 8004880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	switch(lcd_state)
 8004884:	4c4c      	ldr	r4, [pc, #304]	; (80049b8 <lcd_process_state+0x138>)
 8004886:	7823      	ldrb	r3, [r4, #0]
 8004888:	3b41      	subs	r3, #65	; 0x41
{
 800488a:	b086      	sub	sp, #24
	switch(lcd_state)
 800488c:	2b03      	cmp	r3, #3
 800488e:	f200 808a 	bhi.w	80049a6 <lcd_process_state+0x126>
 8004892:	e8df f003 	tbb	[pc, r3]
 8004896:	6e02      	.short	0x6e02
 8004898:	8b7b      	.short	0x8b7b
		memset(alt_string, 0, sizeof alt_string);
 800489a:	4d48      	ldr	r5, [pc, #288]	; (80049bc <lcd_process_state+0x13c>)
		num_spaces1 = 0;
 800489c:	f8df 9154 	ldr.w	r9, [pc, #340]	; 80049f4 <lcd_process_state+0x174>
		lcd_pos = 0;
 80048a0:	4a47      	ldr	r2, [pc, #284]	; (80049c0 <lcd_process_state+0x140>)
		num_spaces2 = 0;
 80048a2:	f8df a154 	ldr.w	sl, [pc, #340]	; 80049f8 <lcd_process_state+0x178>
		lcd_curr_ptr = 0;
 80048a6:	f8df 8148 	ldr.w	r8, [pc, #328]	; 80049f0 <lcd_process_state+0x170>
		snprintf(tmp_string, 6, "%dC", tmp);
 80048aa:	4f46      	ldr	r7, [pc, #280]	; (80049c4 <lcd_process_state+0x144>)
		memset(alt_string, 0, sizeof alt_string);
 80048ac:	2300      	movs	r3, #0
		lcd_pos = 0;
 80048ae:	7013      	strb	r3, [r2, #0]
		memset(alt_string, 0, sizeof alt_string);
 80048b0:	602b      	str	r3, [r5, #0]
		num_spaces1 = 0;
 80048b2:	f889 3000 	strb.w	r3, [r9]
		memset(alt_string, 0, sizeof alt_string);
 80048b6:	f8c5 3003 	str.w	r3, [r5, #3]
		num_spaces2 = 0;
 80048ba:	f88a 3000 	strb.w	r3, [sl]
		lcd_curr_ptr = 0;
 80048be:	f8c8 3000 	str.w	r3, [r8]
		temp_alt = (int) alt;
 80048c2:	4b41      	ldr	r3, [pc, #260]	; (80049c8 <lcd_process_state+0x148>)
 80048c4:	4a41      	ldr	r2, [pc, #260]	; (80049cc <lcd_process_state+0x14c>)
 80048c6:	edd3 7a00 	vldr	s15, [r3]
 80048ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		snprintf(alt_string, 10, "%dm", temp_alt);
 80048ce:	210a      	movs	r1, #10
		temp_alt = (int) alt;
 80048d0:	ee17 3a90 	vmov	r3, s15
 80048d4:	edc2 7a00 	vstr	s15, [r2]
		snprintf(alt_string, 10, "%dm", temp_alt);
 80048d8:	4628      	mov	r0, r5
 80048da:	4a3d      	ldr	r2, [pc, #244]	; (80049d0 <lcd_process_state+0x150>)
 80048dc:	f000 ff2e 	bl	800573c <snprintf>
		snprintf(tmp_string, 6, "%dC", tmp);
 80048e0:	4b3c      	ldr	r3, [pc, #240]	; (80049d4 <lcd_process_state+0x154>)
 80048e2:	4a3d      	ldr	r2, [pc, #244]	; (80049d8 <lcd_process_state+0x158>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2106      	movs	r1, #6
 80048e8:	4638      	mov	r0, r7
 80048ea:	f000 ff27 	bl	800573c <snprintf>
		num_spaces1 = 10 - strlen(alt_string) - 1;
 80048ee:	4628      	mov	r0, r5
 80048f0:	f7fb fc6e 	bl	80001d0 <strlen>
		if(burn_flag)
 80048f4:	4b39      	ldr	r3, [pc, #228]	; (80049dc <lcd_process_state+0x15c>)
		num_spaces1 = 10 - strlen(alt_string) - 1;
 80048f6:	f1c0 0009 	rsb	r0, r0, #9
		if(burn_flag)
 80048fa:	781b      	ldrb	r3, [r3, #0]
		num_spaces1 = 10 - strlen(alt_string) - 1;
 80048fc:	b2c6      	uxtb	r6, r0
 80048fe:	f889 6000 	strb.w	r6, [r9]
			num_spaces2 = 6 - strlen(tmp_string);
 8004902:	4638      	mov	r0, r7
 8004904:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 80049fc <lcd_process_state+0x17c>
		if(burn_flag)
 8004908:	b31b      	cbz	r3, 8004952 <lcd_process_state+0xd2>
			num_spaces2 = 6 - strlen(tmp_string);
 800490a:	f7fb fc61 	bl	80001d0 <strlen>
			snprintf(lcd_string, 17, "%s%*sB%*s%s", alt_string, num_spaces1, "",  num_spaces2, "", tmp_string);
 800490e:	e88d 0240 	stmia.w	sp, {r6, r9}
			num_spaces2 = 6 - strlen(tmp_string);
 8004912:	f1c0 0006 	rsb	r0, r0, #6
 8004916:	b2c0      	uxtb	r0, r0
			snprintf(lcd_string, 17, "%s%*sB%*s%s", alt_string, num_spaces1, "",  num_spaces2, "", tmp_string);
 8004918:	4a31      	ldr	r2, [pc, #196]	; (80049e0 <lcd_process_state+0x160>)
			num_spaces2 = 6 - strlen(tmp_string);
 800491a:	f88a 0000 	strb.w	r0, [sl]
			snprintf(lcd_string, 17, "%s%*sB%*s%s", alt_string, num_spaces1, "",  num_spaces2, "", tmp_string);
 800491e:	9704      	str	r7, [sp, #16]
 8004920:	f8cd 900c 	str.w	r9, [sp, #12]
 8004924:	9002      	str	r0, [sp, #8]
 8004926:	462b      	mov	r3, r5
			snprintf(lcd_string, 17, "%s%*s%*s%s", alt_string, num_spaces1, "",  num_spaces2, "", tmp_string);
 8004928:	2111      	movs	r1, #17
 800492a:	482e      	ldr	r0, [pc, #184]	; (80049e4 <lcd_process_state+0x164>)
 800492c:	f000 ff06 	bl	800573c <snprintf>
		lcd_curr_ptr = lcd_string;
 8004930:	4b2c      	ldr	r3, [pc, #176]	; (80049e4 <lcd_process_state+0x164>)
 8004932:	f8c8 3000 	str.w	r3, [r8]
		lcd_clear();
 8004936:	f7ff fe93 	bl	8004660 <lcd_clear>
		lcd_state = 'B';
 800493a:	2342      	movs	r3, #66	; 0x42
 800493c:	7023      	strb	r3, [r4, #0]
		prev_lcd_time = HAL_GetTick();
 800493e:	f7fc fb69 	bl	8001014 <HAL_GetTick>
 8004942:	ee07 0a90 	vmov	s15, r0
 8004946:	4b28      	ldr	r3, [pc, #160]	; (80049e8 <lcd_process_state+0x168>)
 8004948:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800494c:	edc3 7a00 	vstr	s15, [r3]
}
 8004950:	e029      	b.n	80049a6 <lcd_process_state+0x126>
			num_spaces2 = 7 - strlen(tmp_string);
 8004952:	f7fb fc3d 	bl	80001d0 <strlen>
 8004956:	f1c0 0007 	rsb	r0, r0, #7
 800495a:	b2c0      	uxtb	r0, r0
 800495c:	f88a 0000 	strb.w	r0, [sl]
			snprintf(lcd_string, 17, "%s%*s%*s%s", alt_string, num_spaces1, "",  num_spaces2, "", tmp_string);
 8004960:	9704      	str	r7, [sp, #16]
 8004962:	f8cd 900c 	str.w	r9, [sp, #12]
 8004966:	9002      	str	r0, [sp, #8]
 8004968:	e88d 0240 	stmia.w	sp, {r6, r9}
 800496c:	462b      	mov	r3, r5
 800496e:	4a1f      	ldr	r2, [pc, #124]	; (80049ec <lcd_process_state+0x16c>)
 8004970:	e7da      	b.n	8004928 <lcd_process_state+0xa8>
		lcd_print_char(*lcd_curr_ptr);
 8004972:	4b1f      	ldr	r3, [pc, #124]	; (80049f0 <lcd_process_state+0x170>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	7818      	ldrb	r0, [r3, #0]
 8004978:	f7ff fea2 	bl	80046c0 <lcd_print_char>
		lcd_state = 'C';
 800497c:	2343      	movs	r3, #67	; 0x43
 800497e:	7023      	strb	r3, [r4, #0]
		if(lcd_pos == 7)
 8004980:	4b0f      	ldr	r3, [pc, #60]	; (80049c0 <lcd_process_state+0x140>)
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	2b07      	cmp	r3, #7
 8004986:	d1da      	bne.n	800493e <lcd_process_state+0xbe>
			lcd_state = 'D';
 8004988:	2344      	movs	r3, #68	; 0x44
 800498a:	e7d7      	b.n	800493c <lcd_process_state+0xbc>
		lcd_curr_ptr++;
 800498c:	4b18      	ldr	r3, [pc, #96]	; (80049f0 <lcd_process_state+0x170>)
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	1c51      	adds	r1, r2, #1
 8004992:	6019      	str	r1, [r3, #0]
		lcd_pos++;
 8004994:	490a      	ldr	r1, [pc, #40]	; (80049c0 <lcd_process_state+0x140>)
 8004996:	780b      	ldrb	r3, [r1, #0]
 8004998:	3301      	adds	r3, #1
 800499a:	700b      	strb	r3, [r1, #0]
		lcd_state = 'B';
 800499c:	2342      	movs	r3, #66	; 0x42
 800499e:	7023      	strb	r3, [r4, #0]
		if(*lcd_curr_ptr == '\0')
 80049a0:	7853      	ldrb	r3, [r2, #1]
 80049a2:	b903      	cbnz	r3, 80049a6 <lcd_process_state+0x126>
			lcd_state = 0; //set state to invalid condition to trigger default
 80049a4:	7023      	strb	r3, [r4, #0]
}
 80049a6:	b006      	add	sp, #24
 80049a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		lcd_state = 'C';
 80049ac:	2343      	movs	r3, #67	; 0x43
 80049ae:	7023      	strb	r3, [r4, #0]
		increment_address();
 80049b0:	f7ff fe6e 	bl	8004690 <increment_address>
 80049b4:	e7c3      	b.n	800493e <lcd_process_state+0xbe>
 80049b6:	bf00      	nop
 80049b8:	2000000d 	.word	0x2000000d
 80049bc:	200006b4 	.word	0x200006b4
 80049c0:	20000c42 	.word	0x20000c42
 80049c4:	200007cc 	.word	0x200007cc
 80049c8:	200006b0 	.word	0x200006b0
 80049cc:	20000b80 	.word	0x20000b80
 80049d0:	08009b6c 	.word	0x08009b6c
 80049d4:	200007c8 	.word	0x200007c8
 80049d8:	08009b70 	.word	0x08009b70
 80049dc:	20000a68 	.word	0x20000a68
 80049e0:	08009b74 	.word	0x08009b74
 80049e4:	2000073d 	.word	0x2000073d
 80049e8:	200007b8 	.word	0x200007b8
 80049ec:	08009b80 	.word	0x08009b80
 80049f0:	20000738 	.word	0x20000738
 80049f4:	20000a69 	.word	0x20000a69
 80049f8:	20000b31 	.word	0x20000b31
 80049fc:	08009be2 	.word	0x08009be2

08004a00 <lcd_run_process>:
{
 8004a00:	b538      	push	{r3, r4, r5, lr}
	if(lcd_print_flag == 1)
 8004a02:	4a14      	ldr	r2, [pc, #80]	; (8004a54 <lcd_run_process+0x54>)
 8004a04:	4d14      	ldr	r5, [pc, #80]	; (8004a58 <lcd_run_process+0x58>)
 8004a06:	7813      	ldrb	r3, [r2, #0]
 8004a08:	4c14      	ldr	r4, [pc, #80]	; (8004a5c <lcd_run_process+0x5c>)
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d109      	bne.n	8004a22 <lcd_run_process+0x22>
	  lcd_state = 'A';
 8004a0e:	4b14      	ldr	r3, [pc, #80]	; (8004a60 <lcd_run_process+0x60>)
 8004a10:	2141      	movs	r1, #65	; 0x41
 8004a12:	7019      	strb	r1, [r3, #0]
	  lcd_print_flag = 0;
 8004a14:	2300      	movs	r3, #0
 8004a16:	7013      	strb	r3, [r2, #0]
	  lcd_count_down = 0;
 8004a18:	4a12      	ldr	r2, [pc, #72]	; (8004a64 <lcd_run_process+0x64>)
 8004a1a:	7013      	strb	r3, [r2, #0]
	  curr_lcd_time = 0;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	602b      	str	r3, [r5, #0]
	  prev_lcd_time = 0;
 8004a20:	6023      	str	r3, [r4, #0]
	curr_lcd_time = HAL_GetTick();
 8004a22:	f7fc faf7 	bl	8001014 <HAL_GetTick>
 8004a26:	ee07 0a90 	vmov	s15, r0
	if( (curr_lcd_time - prev_lcd_time) <= 2 )
 8004a2a:	ed94 7a00 	vldr	s14, [r4]
	curr_lcd_time = HAL_GetTick();
 8004a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a32:	edc5 7a00 	vstr	s15, [r5]
	if( (curr_lcd_time - prev_lcd_time) <= 2 )
 8004a36:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004a3a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8004a3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a46:	d903      	bls.n	8004a50 <lcd_run_process+0x50>
}
 8004a48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lcd_process_state();
 8004a4c:	f7ff bf18 	b.w	8004880 <lcd_process_state>
 8004a50:	bd38      	pop	{r3, r4, r5, pc}
 8004a52:	bf00      	nop
 8004a54:	2000073c 	.word	0x2000073c
 8004a58:	200006c0 	.word	0x200006c0
 8004a5c:	200007b8 	.word	0x200007b8
 8004a60:	2000000d 	.word	0x2000000d
 8004a64:	20000734 	.word	0x20000734

08004a68 <init_temp_sensor>:
{
 8004a68:	b570      	push	{r4, r5, r6, lr}
	rslt = BME280_OK;
 8004a6a:	4d15      	ldr	r5, [pc, #84]	; (8004ac0 <init_temp_sensor+0x58>)
	dev.dev_id = BME280_I2C_ADDR_PRIM;
 8004a6c:	4c15      	ldr	r4, [pc, #84]	; (8004ac4 <init_temp_sensor+0x5c>)
	rslt = BME280_OK;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	702b      	strb	r3, [r5, #0]
	dev.dev_id = BME280_I2C_ADDR_PRIM;
 8004a72:	2376      	movs	r3, #118	; 0x76
 8004a74:	7063      	strb	r3, [r4, #1]
	dev.read = user_i2c_read;
 8004a76:	4b14      	ldr	r3, [pc, #80]	; (8004ac8 <init_temp_sensor+0x60>)
 8004a78:	6063      	str	r3, [r4, #4]
	dev.write = user_i2c_write;
 8004a7a:	4b14      	ldr	r3, [pc, #80]	; (8004acc <init_temp_sensor+0x64>)
 8004a7c:	60a3      	str	r3, [r4, #8]
	dev.intf = BME280_I2C_INTF;
 8004a7e:	2601      	movs	r6, #1
	dev.delay_ms = user_delay_ms;
 8004a80:	4b13      	ldr	r3, [pc, #76]	; (8004ad0 <init_temp_sensor+0x68>)
 8004a82:	60e3      	str	r3, [r4, #12]
	rslt = bme280_init(&dev);
 8004a84:	4620      	mov	r0, r4
	dev.intf = BME280_I2C_INTF;
 8004a86:	70a6      	strb	r6, [r4, #2]
	rslt = bme280_init(&dev);
 8004a88:	f7fe fe5f 	bl	800374a <bme280_init>
	(&dev) -> settings.osr_p = BME280_OVERSAMPLING_16X;
 8004a8c:	2305      	movs	r3, #5
 8004a8e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	(&dev) -> settings.osr_t = BME280_OVERSAMPLING_2X;
 8004a92:	2302      	movs	r3, #2
	rslt = bme280_init(&dev);
 8004a94:	7028      	strb	r0, [r5, #0]
	(&dev) -> settings.osr_t = BME280_OVERSAMPLING_2X;
 8004a96:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	rslt = bme280_set_sensor_settings(settings_sel, &dev);
 8004a9a:	4621      	mov	r1, r4
	(&dev) -> settings.filter = BME280_FILTER_COEFF_16;
 8004a9c:	2304      	movs	r3, #4
	rslt = bme280_set_sensor_settings(settings_sel, &dev);
 8004a9e:	201f      	movs	r0, #31
	(&dev) -> settings.filter = BME280_FILTER_COEFF_16;
 8004aa0:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
	(&dev) -> settings.osr_h = BME280_OVERSAMPLING_1X;
 8004aa4:	f884 603a 	strb.w	r6, [r4, #58]	; 0x3a
	(&dev) -> settings.standby_time = BME280_STANDBY_TIME_62_5_MS;
 8004aa8:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
	rslt = bme280_set_sensor_settings(settings_sel, &dev);
 8004aac:	f7fe ff3e 	bl	800392c <bme280_set_sensor_settings>
	rslt = bme280_set_sensor_mode(BME280_NORMAL_MODE, &dev);
 8004ab0:	4621      	mov	r1, r4
	rslt = bme280_set_sensor_settings(settings_sel, &dev);
 8004ab2:	7028      	strb	r0, [r5, #0]
	rslt = bme280_set_sensor_mode(BME280_NORMAL_MODE, &dev);
 8004ab4:	2003      	movs	r0, #3
 8004ab6:	f7fe ff74 	bl	80039a2 <bme280_set_sensor_mode>
 8004aba:	7028      	strb	r0, [r5, #0]
 8004abc:	bd70      	pop	{r4, r5, r6, pc}
 8004abe:	bf00      	nop
 8004ac0:	20000b0c 	.word	0x20000b0c
 8004ac4:	20000a70 	.word	0x20000a70
 8004ac8:	08003c89 	.word	0x08003c89
 8004acc:	08003cc9 	.word	0x08003cc9
 8004ad0:	08003c83 	.word	0x08003c83

08004ad4 <receive_temp_data>:
{
 8004ad4:	b538      	push	{r3, r4, r5, lr}
	rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);
 8004ad6:	4c1a      	ldr	r4, [pc, #104]	; (8004b40 <receive_temp_data+0x6c>)
 8004ad8:	4a1a      	ldr	r2, [pc, #104]	; (8004b44 <receive_temp_data+0x70>)
	hum = (uint32_t) ((&comp_data) -> humidity) / 1024;
 8004ada:	4d1b      	ldr	r5, [pc, #108]	; (8004b48 <receive_temp_data+0x74>)
	rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);
 8004adc:	4621      	mov	r1, r4
 8004ade:	2007      	movs	r0, #7
 8004ae0:	f7ff f8a8 	bl	8003c34 <bme280_get_sensor_data>
 8004ae4:	4b19      	ldr	r3, [pc, #100]	; (8004b4c <receive_temp_data+0x78>)
	prs = (uint32_t) ((&comp_data) -> pressure) / 1000;
 8004ae6:	6821      	ldr	r1, [r4, #0]
	rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);
 8004ae8:	7018      	strb	r0, [r3, #0]
	tmp = (int32_t)  ((&comp_data) -> temperature) / 100;
 8004aea:	6860      	ldr	r0, [r4, #4]
	hum = (uint32_t) ((&comp_data) -> humidity) / 1024;
 8004aec:	68a4      	ldr	r4, [r4, #8]
	tmp = (int32_t)  ((&comp_data) -> temperature) / 100;
 8004aee:	2364      	movs	r3, #100	; 0x64
 8004af0:	fb90 f0f3 	sdiv	r0, r0, r3
 8004af4:	4b16      	ldr	r3, [pc, #88]	; (8004b50 <receive_temp_data+0x7c>)
	if(tmp > 50)
 8004af6:	2832      	cmp	r0, #50	; 0x32
	tmp = (int32_t)  ((&comp_data) -> temperature) / 100;
 8004af8:	6018      	str	r0, [r3, #0]
		tmp = 50;
 8004afa:	bfc4      	itt	gt
 8004afc:	2032      	movgt	r0, #50	; 0x32
 8004afe:	6018      	strgt	r0, [r3, #0]
	if(tmp < -40)
 8004b00:	6818      	ldr	r0, [r3, #0]
 8004b02:	3028      	adds	r0, #40	; 0x28
		tmp = -40;
 8004b04:	bfb8      	it	lt
 8004b06:	f06f 0027 	mvnlt.w	r0, #39	; 0x27
	prs = (uint32_t) ((&comp_data) -> pressure) / 1000;
 8004b0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004b0e:	fbb1 f1f2 	udiv	r1, r1, r2
 8004b12:	4a10      	ldr	r2, [pc, #64]	; (8004b54 <receive_temp_data+0x80>)
		tmp = -40;
 8004b14:	bfb8      	it	lt
 8004b16:	6018      	strlt	r0, [r3, #0]
	if(prs > 150)
 8004b18:	2996      	cmp	r1, #150	; 0x96
	prs = (uint32_t) ((&comp_data) -> pressure) / 1000;
 8004b1a:	6011      	str	r1, [r2, #0]
		prs = 150;
 8004b1c:	bf84      	itt	hi
 8004b1e:	2196      	movhi	r1, #150	; 0x96
 8004b20:	6011      	strhi	r1, [r2, #0]
	if(prev_tmp != tmp)
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	4b0c      	ldr	r3, [pc, #48]	; (8004b58 <receive_temp_data+0x84>)
 8004b26:	6819      	ldr	r1, [r3, #0]
 8004b28:	4291      	cmp	r1, r2
		lcd_print_flag = 1;
 8004b2a:	bf1e      	ittt	ne
 8004b2c:	490b      	ldrne	r1, [pc, #44]	; (8004b5c <receive_temp_data+0x88>)
		prev_tmp = tmp;
 8004b2e:	601a      	strne	r2, [r3, #0]
		lcd_print_flag = 1;
 8004b30:	2001      	movne	r0, #1
	hum = (uint32_t) ((&comp_data) -> humidity) / 1024;
 8004b32:	ea4f 2494 	mov.w	r4, r4, lsr #10
		lcd_print_flag = 1;
 8004b36:	bf18      	it	ne
 8004b38:	7008      	strbne	r0, [r1, #0]
	hum = (uint32_t) ((&comp_data) -> humidity) / 1024;
 8004b3a:	602c      	str	r4, [r5, #0]
 8004b3c:	bd38      	pop	{r3, r4, r5, pc}
 8004b3e:	bf00      	nop
 8004b40:	20000b10 	.word	0x20000b10
 8004b44:	20000a70 	.word	0x20000a70
 8004b48:	200006cc 	.word	0x200006cc
 8004b4c:	20000b0c 	.word	0x20000b0c
 8004b50:	200007c8 	.word	0x200007c8
 8004b54:	200007c0 	.word	0x200007c0
 8004b58:	200007bc 	.word	0x200007bc
 8004b5c:	2000073c 	.word	0x2000073c

08004b60 <init_accel_sensor>:
{
 8004b60:	b510      	push	{r4, lr}
	dev_ctx.write_reg = platform_write;
 8004b62:	4c0c      	ldr	r4, [pc, #48]	; (8004b94 <init_accel_sensor+0x34>)
 8004b64:	4b0c      	ldr	r3, [pc, #48]	; (8004b98 <init_accel_sensor+0x38>)
 8004b66:	6023      	str	r3, [r4, #0]
	dev_ctx.read_reg = platform_read;
 8004b68:	4b0c      	ldr	r3, [pc, #48]	; (8004b9c <init_accel_sensor+0x3c>)
 8004b6a:	6063      	str	r3, [r4, #4]
	lis2dh12_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 8004b6c:	2101      	movs	r1, #1
	dev_ctx.handle = &hi2c1;
 8004b6e:	4b0c      	ldr	r3, [pc, #48]	; (8004ba0 <init_accel_sensor+0x40>)
 8004b70:	60a3      	str	r3, [r4, #8]
	lis2dh12_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 8004b72:	4620      	mov	r0, r4
 8004b74:	f000 f8f7 	bl	8004d66 <lis2dh12_block_data_update_set>
	lis2dh12_data_rate_set(&dev_ctx, LIS2DH12_ODR_10Hz);
 8004b78:	2102      	movs	r1, #2
 8004b7a:	4620      	mov	r0, r4
 8004b7c:	f000 f8c5 	bl	8004d0a <lis2dh12_data_rate_set>
	lis2dh12_full_scale_set(&dev_ctx, LIS2DH12_2g);
 8004b80:	2100      	movs	r1, #0
 8004b82:	4620      	mov	r0, r4
 8004b84:	f000 f8d8 	bl	8004d38 <lis2dh12_full_scale_set>
	lis2dh12_operating_mode_set(&dev_ctx, LIS2DH12_HR_12bit);
 8004b88:	4620      	mov	r0, r4
 8004b8a:	2100      	movs	r1, #0
}
 8004b8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lis2dh12_operating_mode_set(&dev_ctx, LIS2DH12_HR_12bit);
 8004b90:	f000 b87b 	b.w	8004c8a <lis2dh12_operating_mode_set>
 8004b94:	20000b00 	.word	0x20000b00
 8004b98:	08003ced 	.word	0x08003ced
 8004b9c:	08003cad 	.word	0x08003cad
 8004ba0:	20000864 	.word	0x20000864

08004ba4 <receive_accel_data>:
{
 8004ba4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	lis2dh12_xl_data_ready_get(&dev_ctx, &reg.byte);
 8004ba6:	4829      	ldr	r0, [pc, #164]	; (8004c4c <receive_accel_data+0xa8>)
 8004ba8:	a901      	add	r1, sp, #4
 8004baa:	f000 f8f3 	bl	8004d94 <lis2dh12_xl_data_ready_get>
	if (reg.byte)
 8004bae:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d047      	beq.n	8004c46 <receive_accel_data+0xa2>
	  memset(data_raw_acceleration.u8bit, 0x00, 3*sizeof(int16_t));
 8004bb6:	4e26      	ldr	r6, [pc, #152]	; (8004c50 <receive_accel_data+0xac>)
	  lis2dh12_acceleration_raw_get(&dev_ctx, data_raw_acceleration.u8bit);
 8004bb8:	4824      	ldr	r0, [pc, #144]	; (8004c4c <receive_accel_data+0xa8>)
	  acc1 = (int) lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration.i16bit[0]) * -1;
 8004bba:	4d26      	ldr	r5, [pc, #152]	; (8004c54 <receive_accel_data+0xb0>)
	  acc2 = (int) lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration.i16bit[1]);
 8004bbc:	4c26      	ldr	r4, [pc, #152]	; (8004c58 <receive_accel_data+0xb4>)
	  memset(data_raw_acceleration.u8bit, 0x00, 3*sizeof(int16_t));
 8004bbe:	2300      	movs	r3, #0
	  lis2dh12_acceleration_raw_get(&dev_ctx, data_raw_acceleration.u8bit);
 8004bc0:	4631      	mov	r1, r6
	  memset(data_raw_acceleration.u8bit, 0x00, 3*sizeof(int16_t));
 8004bc2:	6033      	str	r3, [r6, #0]
 8004bc4:	80b3      	strh	r3, [r6, #4]
	  lis2dh12_acceleration_raw_get(&dev_ctx, data_raw_acceleration.u8bit);
 8004bc6:	f000 f8f3 	bl	8004db0 <lis2dh12_acceleration_raw_get>
	  acc1 = (int) lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration.i16bit[0]) * -1;
 8004bca:	f9b6 0000 	ldrsh.w	r0, [r6]
 8004bce:	f000 f857 	bl	8004c80 <lis2dh12_from_fs2_hr_to_mg>
 8004bd2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
	  acc2 = (int) lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration.i16bit[1]);
 8004bd6:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
	  acc1 = (int) lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration.i16bit[0]) * -1;
 8004bda:	ee10 3a10 	vmov	r3, s0
 8004bde:	425b      	negs	r3, r3
 8004be0:	602b      	str	r3, [r5, #0]
	  acc2 = (int) lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration.i16bit[1]);
 8004be2:	f000 f84d 	bl	8004c80 <lis2dh12_from_fs2_hr_to_mg>
 8004be6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
	  acc3 = (int) lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration.i16bit[2]);
 8004bea:	f9b6 0004 	ldrsh.w	r0, [r6, #4]
	  acc2 = (int) lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration.i16bit[1]);
 8004bee:	ed84 0a00 	vstr	s0, [r4]
	  acc3 = (int) lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration.i16bit[2]);
 8004bf2:	f000 f845 	bl	8004c80 <lis2dh12_from_fs2_hr_to_mg>
	  if(acc1 > 999)
 8004bf6:	682a      	ldr	r2, [r5, #0]
	  acc3 = (int) lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration.i16bit[2]);
 8004bf8:	4918      	ldr	r1, [pc, #96]	; (8004c5c <receive_accel_data+0xb8>)
	  if(acc1 > 999)
 8004bfa:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
		  acc1 = 999;
 8004bfe:	bfa4      	itt	ge
 8004c00:	f240 30e7 	movwge	r0, #999	; 0x3e7
 8004c04:	6028      	strge	r0, [r5, #0]
	  acc3 = (int) lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration.i16bit[2]);
 8004c06:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	  if(acc2 > 999)
 8004c0a:	6820      	ldr	r0, [r4, #0]
	  acc3 = (int) lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration.i16bit[2]);
 8004c0c:	edc1 7a00 	vstr	s15, [r1]
 8004c10:	ee17 3a90 	vmov	r3, s15
	  if(acc2 > 999)
 8004c14:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
	  		  acc2 = 999;
 8004c18:	bfa4      	itt	ge
 8004c1a:	f240 30e7 	movwge	r0, #999	; 0x3e7
 8004c1e:	6020      	strge	r0, [r4, #0]
	  if(acc3 > 999)
 8004c20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
	  		  acc3 = 999;
 8004c24:	bfa4      	itt	ge
 8004c26:	f240 33e7 	movwge	r3, #999	; 0x3e7
 8004c2a:	600b      	strge	r3, [r1, #0]
	  if(acc1 < -999)
 8004c2c:	6828      	ldr	r0, [r5, #0]
 8004c2e:	4b0c      	ldr	r3, [pc, #48]	; (8004c60 <receive_accel_data+0xbc>)
	  if(acc3 < -999)
 8004c30:	680a      	ldr	r2, [r1, #0]
	  if(acc1 < -999)
 8004c32:	4298      	cmp	r0, r3
	  if(acc2 < -999)
 8004c34:	6820      	ldr	r0, [r4, #0]
		  acc1 = -999;
 8004c36:	bfb8      	it	lt
 8004c38:	602b      	strlt	r3, [r5, #0]
	  if(acc2 < -999)
 8004c3a:	4298      	cmp	r0, r3
		  acc2 = -999;
 8004c3c:	bfb8      	it	lt
 8004c3e:	6023      	strlt	r3, [r4, #0]
	  if(acc3 < -999)
 8004c40:	429a      	cmp	r2, r3
		  acc3 = -999;
 8004c42:	bfb8      	it	lt
 8004c44:	600b      	strlt	r3, [r1, #0]
}
 8004c46:	b002      	add	sp, #8
 8004c48:	bd70      	pop	{r4, r5, r6, pc}
 8004c4a:	bf00      	nop
 8004c4c:	20000b00 	.word	0x20000b00
 8004c50:	20000b38 	.word	0x20000b38
 8004c54:	200006a4 	.word	0x200006a4
 8004c58:	200006a8 	.word	0x200006a8
 8004c5c:	200006ac 	.word	0x200006ac
 8004c60:	fffffc19 	.word	0xfffffc19

08004c64 <lis2dh12_read_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_read_reg(lis2dh12_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 8004c64:	b410      	push	{r4}
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004c66:	6844      	ldr	r4, [r0, #4]
 8004c68:	6880      	ldr	r0, [r0, #8]
 8004c6a:	46a4      	mov	ip, r4
  return ret;
}
 8004c6c:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004c70:	4760      	bx	ip

08004c72 <lis2dh12_write_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_write_reg(lis2dh12_ctx_t* ctx, uint8_t reg, uint8_t* data,
                           uint16_t len)
{
 8004c72:	b410      	push	{r4}
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004c74:	6804      	ldr	r4, [r0, #0]
 8004c76:	6880      	ldr	r0, [r0, #8]
 8004c78:	46a4      	mov	ip, r4
  return ret;
}
 8004c7a:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004c7e:	4760      	bx	ip

08004c80 <lis2dh12_from_fs2_hr_to_mg>:
  */

float lis2dh12_from_fs2_hr_to_mg(int16_t lsb)
{
  return ( (float)lsb / 16.0f ) * 1.0f;
}
 8004c80:	ee00 0a10 	vmov	s0, r0
 8004c84:	eeba 0ace 	vcvt.f32.s32	s0, s0, #4
 8004c88:	4770      	bx	lr

08004c8a <lis2dh12_operating_mode_set>:
  *                  and HR in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_operating_mode_set(lis2dh12_ctx_t *ctx, lis2dh12_op_md_t val)
{
 8004c8a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lis2dh12_ctrl_reg1_t ctrl_reg1;
  lis2dh12_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG1,
 8004c8c:	2301      	movs	r3, #1
{
 8004c8e:	460c      	mov	r4, r1
  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG1,
 8004c90:	466a      	mov	r2, sp
 8004c92:	2120      	movs	r1, #32
{
 8004c94:	4605      	mov	r5, r0
  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG1,
 8004c96:	f7ff ffe5 	bl	8004c64 <lis2dh12_read_reg>
                          (uint8_t*)&ctrl_reg1, 1);
  if (ret == 0) {
 8004c9a:	bb00      	cbnz	r0, 8004cde <lis2dh12_operating_mode_set+0x54>
    ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG4,
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	aa01      	add	r2, sp, #4
 8004ca0:	2123      	movs	r1, #35	; 0x23
 8004ca2:	4628      	mov	r0, r5
 8004ca4:	f7ff ffde 	bl	8004c64 <lis2dh12_read_reg>
                            (uint8_t*)&ctrl_reg4, 1);
  } 
  if (ret == 0) {
 8004ca8:	b9c8      	cbnz	r0, 8004cde <lis2dh12_operating_mode_set+0x54>
    if ( val == LIS2DH12_HR_12bit ) {
 8004caa:	b9d4      	cbnz	r4, 8004ce2 <lis2dh12_operating_mode_set+0x58>
      ctrl_reg1.lpen = 0;
 8004cac:	f89d 3000 	ldrb.w	r3, [sp]
 8004cb0:	f364 03c3 	bfi	r3, r4, #3, #1
 8004cb4:	f88d 3000 	strb.w	r3, [sp]
      ctrl_reg4.hr   = 1;
 8004cb8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004cbc:	f043 0308 	orr.w	r3, r3, #8
      ctrl_reg1.lpen = 0;
      ctrl_reg4.hr   = 0;
    }
    if (val == LIS2DH12_LP_8bit) {
      ctrl_reg1.lpen = 1;
      ctrl_reg4.hr   = 0;
 8004cc0:	f88d 3004 	strb.w	r3, [sp, #4]
    }
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	466a      	mov	r2, sp
 8004cc8:	2120      	movs	r1, #32
 8004cca:	4628      	mov	r0, r5
 8004ccc:	f7ff ffd1 	bl	8004c72 <lis2dh12_write_reg>
  } 
  if (ret == 0) {
 8004cd0:	b928      	cbnz	r0, 8004cde <lis2dh12_operating_mode_set+0x54>
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	aa01      	add	r2, sp, #4
 8004cd6:	2123      	movs	r1, #35	; 0x23
 8004cd8:	4628      	mov	r0, r5
 8004cda:	f7ff ffca 	bl	8004c72 <lis2dh12_write_reg>
  }
  return ret;
}
 8004cde:	b003      	add	sp, #12
 8004ce0:	bd30      	pop	{r4, r5, pc}
    if (val == LIS2DH12_NM_10bit) {
 8004ce2:	2c01      	cmp	r4, #1
 8004ce4:	d10a      	bne.n	8004cfc <lis2dh12_operating_mode_set+0x72>
      ctrl_reg1.lpen = 0;
 8004ce6:	f89d 3000 	ldrb.w	r3, [sp]
 8004cea:	f360 03c3 	bfi	r3, r0, #3, #1
      ctrl_reg1.lpen = 1;
 8004cee:	f88d 3000 	strb.w	r3, [sp]
      ctrl_reg4.hr   = 0;
 8004cf2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004cf6:	f360 03c3 	bfi	r3, r0, #3, #1
 8004cfa:	e7e1      	b.n	8004cc0 <lis2dh12_operating_mode_set+0x36>
    if (val == LIS2DH12_LP_8bit) {
 8004cfc:	2c02      	cmp	r4, #2
 8004cfe:	d1e1      	bne.n	8004cc4 <lis2dh12_operating_mode_set+0x3a>
      ctrl_reg1.lpen = 1;
 8004d00:	f89d 3000 	ldrb.w	r3, [sp]
 8004d04:	f043 0308 	orr.w	r3, r3, #8
 8004d08:	e7f1      	b.n	8004cee <lis2dh12_operating_mode_set+0x64>

08004d0a <lis2dh12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_data_rate_set(lis2dh12_ctx_t *ctx, lis2dh12_odr_t val)
{
 8004d0a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lis2dh12_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8004d0c:	2301      	movs	r3, #1
{
 8004d0e:	460d      	mov	r5, r1
  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8004d10:	aa01      	add	r2, sp, #4
 8004d12:	2120      	movs	r1, #32
{
 8004d14:	4604      	mov	r4, r0
  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8004d16:	f7ff ffa5 	bl	8004c64 <lis2dh12_read_reg>
  if (ret == 0) {
 8004d1a:	b958      	cbnz	r0, 8004d34 <lis2dh12_data_rate_set+0x2a>
    ctrl_reg1.odr = (uint8_t)val;
 8004d1c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004d20:	f365 1307 	bfi	r3, r5, #4, #4
 8004d24:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8004d28:	aa01      	add	r2, sp, #4
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	2120      	movs	r1, #32
 8004d2e:	4620      	mov	r0, r4
 8004d30:	f7ff ff9f 	bl	8004c72 <lis2dh12_write_reg>
  }
  return ret;
}
 8004d34:	b003      	add	sp, #12
 8004d36:	bd30      	pop	{r4, r5, pc}

08004d38 <lis2dh12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_full_scale_set(lis2dh12_ctx_t *ctx, lis2dh12_fs_t val)
{
 8004d38:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lis2dh12_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
 8004d3a:	2301      	movs	r3, #1
{
 8004d3c:	460d      	mov	r5, r1
  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
 8004d3e:	aa01      	add	r2, sp, #4
 8004d40:	2123      	movs	r1, #35	; 0x23
{
 8004d42:	4604      	mov	r4, r0
  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
 8004d44:	f7ff ff8e 	bl	8004c64 <lis2dh12_read_reg>
  if (ret == 0) {
 8004d48:	b958      	cbnz	r0, 8004d62 <lis2dh12_full_scale_set+0x2a>
    ctrl_reg4.fs = (uint8_t)val;
 8004d4a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004d4e:	f365 1305 	bfi	r3, r5, #4, #2
 8004d52:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
 8004d56:	aa01      	add	r2, sp, #4
 8004d58:	2301      	movs	r3, #1
 8004d5a:	2123      	movs	r1, #35	; 0x23
 8004d5c:	4620      	mov	r0, r4
 8004d5e:	f7ff ff88 	bl	8004c72 <lis2dh12_write_reg>
  }
  return ret;
}
 8004d62:	b003      	add	sp, #12
 8004d64:	bd30      	pop	{r4, r5, pc}

08004d66 <lis2dh12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_block_data_update_set(lis2dh12_ctx_t *ctx, uint8_t val)
{
 8004d66:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lis2dh12_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
 8004d68:	2301      	movs	r3, #1
{
 8004d6a:	460d      	mov	r5, r1
  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
 8004d6c:	aa01      	add	r2, sp, #4
 8004d6e:	2123      	movs	r1, #35	; 0x23
{
 8004d70:	4604      	mov	r4, r0
  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
 8004d72:	f7ff ff77 	bl	8004c64 <lis2dh12_read_reg>
  if (ret == 0) {
 8004d76:	b958      	cbnz	r0, 8004d90 <lis2dh12_block_data_update_set+0x2a>
    ctrl_reg4.bdu = val;
 8004d78:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004d7c:	f365 13c7 	bfi	r3, r5, #7, #1
 8004d80:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
 8004d84:	aa01      	add	r2, sp, #4
 8004d86:	2301      	movs	r3, #1
 8004d88:	2123      	movs	r1, #35	; 0x23
 8004d8a:	4620      	mov	r0, r4
 8004d8c:	f7ff ff71 	bl	8004c72 <lis2dh12_write_reg>
  }
  return ret;
}
 8004d90:	b003      	add	sp, #12
 8004d92:	bd30      	pop	{r4, r5, pc}

08004d94 <lis2dh12_xl_data_ready_get>:
  * @param  val      change the values of zyxda in reg STATUS_REG
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_xl_data_ready_get(lis2dh12_ctx_t *ctx, uint8_t *val)
{
 8004d94:	b513      	push	{r0, r1, r4, lr}
  lis2dh12_status_reg_t status_reg;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_STATUS_REG, (uint8_t*)&status_reg, 1);
 8004d96:	2301      	movs	r3, #1
{
 8004d98:	460c      	mov	r4, r1
  ret = lis2dh12_read_reg(ctx, LIS2DH12_STATUS_REG, (uint8_t*)&status_reg, 1);
 8004d9a:	aa01      	add	r2, sp, #4
 8004d9c:	2127      	movs	r1, #39	; 0x27
 8004d9e:	f7ff ff61 	bl	8004c64 <lis2dh12_read_reg>
  *val = status_reg.zyxda;
 8004da2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004da6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004daa:	7023      	strb	r3, [r4, #0]

  return ret;
}
 8004dac:	b002      	add	sp, #8
 8004dae:	bd10      	pop	{r4, pc}

08004db0 <lis2dh12_acceleration_raw_get>:
  *
  */
int32_t lis2dh12_acceleration_raw_get(lis2dh12_ctx_t *ctx, uint8_t *buff)
{
  int32_t ret;
  ret = lis2dh12_read_reg(ctx, LIS2DH12_OUT_X_L, buff, 6);
 8004db0:	460a      	mov	r2, r1
 8004db2:	2306      	movs	r3, #6
 8004db4:	2128      	movs	r1, #40	; 0x28
 8004db6:	f7ff bf55 	b.w	8004c64 <lis2dh12_read_reg>

08004dba <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004dba:	b530      	push	{r4, r5, lr}
 8004dbc:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004dbe:	2228      	movs	r2, #40	; 0x28
 8004dc0:	2100      	movs	r1, #0
 8004dc2:	a80c      	add	r0, sp, #48	; 0x30
 8004dc4:	f000 fcb1 	bl	800572a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004dc8:	2214      	movs	r2, #20
 8004dca:	2100      	movs	r1, #0
 8004dcc:	4668      	mov	r0, sp
 8004dce:	f000 fcac 	bl	800572a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004dd2:	221c      	movs	r2, #28
 8004dd4:	2100      	movs	r1, #0
 8004dd6:	a805      	add	r0, sp, #20
 8004dd8:	f000 fca7 	bl	800572a <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004de0:	2310      	movs	r3, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004de2:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004de4:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004de6:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8004de8:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8004dec:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004dee:	950c      	str	r5, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004df0:	9513      	str	r5, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004df2:	f7fd fa01 	bl	80021f8 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004df6:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004df8:	2400      	movs	r4, #0
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004dfa:	e88d 0028 	stmia.w	sp, {r3, r5}
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004dfe:	4629      	mov	r1, r5
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004e00:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004e04:	4668      	mov	r0, sp
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004e06:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004e08:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004e0a:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004e0c:	f7fd fc9c 	bl	8002748 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 8004e10:	23a1      	movs	r3, #161	; 0xa1
 8004e12:	9305      	str	r3, [sp, #20]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004e14:	a805      	add	r0, sp, #20
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8004e16:	f44f 7380 	mov.w	r3, #256	; 0x100
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8004e1a:	9407      	str	r4, [sp, #28]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8004e1c:	9309      	str	r3, [sp, #36]	; 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8004e1e:	9408      	str	r4, [sp, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004e20:	f7fd fd6c 	bl	80028fc <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8004e24:	b017      	add	sp, #92	; 0x5c
 8004e26:	bd30      	pop	{r4, r5, pc}

08004e28 <main>:
{
 8004e28:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8004e2c:	b0b9      	sub	sp, #228	; 0xe4
  HAL_Init();
 8004e2e:	f7fc f8d3 	bl	8000fd8 <HAL_Init>
  runtime = 0;
 8004e32:	4bbb      	ldr	r3, [pc, #748]	; (8005120 <main+0x2f8>)
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004e34:	4dbb      	ldr	r5, [pc, #748]	; (8005124 <main+0x2fc>)
  htim2.Instance = TIM2;
 8004e36:	f8df 9344 	ldr.w	r9, [pc, #836]	; 800517c <main+0x354>
  hadc2.Instance = ADC2;
 8004e3a:	4ebb      	ldr	r6, [pc, #748]	; (8005128 <main+0x300>)
  runtime = 0;
 8004e3c:	2700      	movs	r7, #0
 8004e3e:	701f      	strb	r7, [r3, #0]
  in_len = 0;
 8004e40:	4bba      	ldr	r3, [pc, #744]	; (800512c <main+0x304>)
 8004e42:	701f      	strb	r7, [r3, #0]
  cnt_readings = 0;
 8004e44:	4bba      	ldr	r3, [pc, #744]	; (8005130 <main+0x308>)
 8004e46:	701f      	strb	r7, [r3, #0]
  syscounter=0;
 8004e48:	4bba      	ldr	r3, [pc, #744]	; (8005134 <main+0x30c>)
 8004e4a:	701f      	strb	r7, [r3, #0]
  count_flag = 0;
 8004e4c:	4bba      	ldr	r3, [pc, #744]	; (8005138 <main+0x310>)
 8004e4e:	701f      	strb	r7, [r3, #0]
  burn_flag = 0;
 8004e50:	4bba      	ldr	r3, [pc, #744]	; (800513c <main+0x314>)
 8004e52:	701f      	strb	r7, [r3, #0]
  message_flag = 0;
 8004e54:	4bba      	ldr	r3, [pc, #744]	; (8005140 <main+0x318>)
 8004e56:	701f      	strb	r7, [r3, #0]
  adc_flag = 0;
 8004e58:	4bba      	ldr	r3, [pc, #744]	; (8005144 <main+0x31c>)
 8004e5a:	701f      	strb	r7, [r3, #0]
  curr_counter = 0;
 8004e5c:	4bba      	ldr	r3, [pc, #744]	; (8005148 <main+0x320>)
 8004e5e:	601f      	str	r7, [r3, #0]
  prev_counter = 0;
 8004e60:	4bba      	ldr	r3, [pc, #744]	; (800514c <main+0x324>)
 8004e62:	601f      	str	r7, [r3, #0]
  SystemClock_Config();
 8004e64:	f7ff ffa9 	bl	8004dba <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e68:	4639      	mov	r1, r7
 8004e6a:	2214      	movs	r2, #20
 8004e6c:	a832      	add	r0, sp, #200	; 0xc8
 8004e6e:	f000 fc5c 	bl	800572a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e72:	4bb7      	ldr	r3, [pc, #732]	; (8005150 <main+0x328>)
 8004e74:	695a      	ldr	r2, [r3, #20]
 8004e76:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8004e7a:	615a      	str	r2, [r3, #20]
 8004e7c:	695a      	ldr	r2, [r3, #20]
 8004e7e:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8004e82:	922b      	str	r2, [sp, #172]	; 0xac
 8004e84:	9a2b      	ldr	r2, [sp, #172]	; 0xac
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004e86:	695a      	ldr	r2, [r3, #20]
 8004e88:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8004e8c:	615a      	str	r2, [r3, #20]
 8004e8e:	695a      	ldr	r2, [r3, #20]
 8004e90:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8004e94:	922c      	str	r2, [sp, #176]	; 0xb0
 8004e96:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e98:	695a      	ldr	r2, [r3, #20]
 8004e9a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004e9e:	615a      	str	r2, [r3, #20]
 8004ea0:	695a      	ldr	r2, [r3, #20]
 8004ea2:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8004ea6:	922d      	str	r2, [sp, #180]	; 0xb4
 8004ea8:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004eaa:	695a      	ldr	r2, [r3, #20]
 8004eac:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004eb0:	615a      	str	r2, [r3, #20]
 8004eb2:	695b      	ldr	r3, [r3, #20]
 8004eb4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPS_Burn_Pin, GPIO_PIN_RESET);
 8004eb8:	463a      	mov	r2, r7
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004eba:	932e      	str	r3, [sp, #184]	; 0xb8
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPS_Burn_Pin, GPIO_PIN_RESET);
 8004ebc:	f44f 7190 	mov.w	r1, #288	; 0x120
 8004ec0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ec4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPS_Burn_Pin, GPIO_PIN_RESET);
 8004ec6:	f7fc fe39 	bl	8001b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RS_Pin|RNW_Pin|E_Pin|DB4_Pin 
 8004eca:	463a      	mov	r2, r7
 8004ecc:	f64f 0106 	movw	r1, #63494	; 0xf806
 8004ed0:	48a0      	ldr	r0, [pc, #640]	; (8005154 <main+0x32c>)
 8004ed2:	f7fc fe33 	bl	8001b3c <HAL_GPIO_WritePin>
                          |DB5_Pin|DB6_Pin|DB7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004ed6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004eda:	9332      	str	r3, [sp, #200]	; 0xc8
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004edc:	a932      	add	r1, sp, #200	; 0xc8
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004ede:	4b9e      	ldr	r3, [pc, #632]	; (8005158 <main+0x330>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004ee0:	489e      	ldr	r0, [pc, #632]	; (800515c <main+0x334>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004ee2:	9333      	str	r3, [sp, #204]	; 0xcc

  /*Configure GPIO pins : LD2_Pin GPS_Burn_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|GPS_Burn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ee4:	f04f 0801 	mov.w	r8, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ee8:	9734      	str	r7, [sp, #208]	; 0xd0
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004eea:	f7fc fd6d 	bl	80019c8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin|GPS_Burn_Pin;
 8004eee:	f44f 7390 	mov.w	r3, #288	; 0x120
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ef2:	a932      	add	r1, sp, #200	; 0xc8
 8004ef4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = LD2_Pin|GPS_Burn_Pin;
 8004ef8:	9332      	str	r3, [sp, #200]	; 0xc8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004efa:	f8cd 80cc 	str.w	r8, [sp, #204]	; 0xcc
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004efe:	9734      	str	r7, [sp, #208]	; 0xd0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f00:	9735      	str	r7, [sp, #212]	; 0xd4
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f02:	f7fc fd61 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RS_Pin RNW_Pin E_Pin DB4_Pin 
                           DB5_Pin DB6_Pin DB7_Pin */
  GPIO_InitStruct.Pin = RS_Pin|RNW_Pin|E_Pin|DB4_Pin 
 8004f06:	f64f 0306 	movw	r3, #63494	; 0xf806
                          |DB5_Pin|DB6_Pin|DB7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f0a:	a932      	add	r1, sp, #200	; 0xc8
 8004f0c:	4891      	ldr	r0, [pc, #580]	; (8005154 <main+0x32c>)
  GPIO_InitStruct.Pin = RS_Pin|RNW_Pin|E_Pin|DB4_Pin 
 8004f0e:	9332      	str	r3, [sp, #200]	; 0xc8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f10:	f8cd 80cc 	str.w	r8, [sp, #204]	; 0xcc
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f14:	9734      	str	r7, [sp, #208]	; 0xd0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f16:	9735      	str	r7, [sp, #212]	; 0xd4
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f18:	f7fc fd56 	bl	80019c8 <HAL_GPIO_Init>
  huart2.Instance = USART2;
 8004f1c:	4890      	ldr	r0, [pc, #576]	; (8005160 <main+0x338>)
  huart2.Init.BaudRate = 38400;
 8004f1e:	4a91      	ldr	r2, [pc, #580]	; (8005164 <main+0x33c>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004f20:	6087      	str	r7, [r0, #8]
  huart2.Init.BaudRate = 38400;
 8004f22:	f44f 4316 	mov.w	r3, #38400	; 0x9600
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004f26:	240c      	movs	r4, #12
  huart2.Init.BaudRate = 38400;
 8004f28:	e880 000c 	stmia.w	r0, {r2, r3}
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004f2c:	60c7      	str	r7, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004f2e:	6107      	str	r7, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004f30:	6144      	str	r4, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004f32:	6187      	str	r7, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004f34:	61c7      	str	r7, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004f36:	6207      	str	r7, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004f38:	6247      	str	r7, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004f3a:	f7fe f9ab 	bl	8003294 <HAL_UART_Init>
  huart1.Init.BaudRate = 115200;
 8004f3e:	498a      	ldr	r1, [pc, #552]	; (8005168 <main+0x340>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004f40:	60af      	str	r7, [r5, #8]
  huart1.Init.BaudRate = 115200;
 8004f42:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004f46:	4628      	mov	r0, r5
  huart1.Init.BaudRate = 115200;
 8004f48:	e885 000a 	stmia.w	r5, {r1, r3}
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004f4c:	60ef      	str	r7, [r5, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004f4e:	612f      	str	r7, [r5, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004f50:	616c      	str	r4, [r5, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004f52:	61af      	str	r7, [r5, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004f54:	61ef      	str	r7, [r5, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004f56:	622f      	str	r7, [r5, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004f58:	626f      	str	r7, [r5, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004f5a:	f7fe f99b 	bl	8003294 <HAL_UART_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004f5e:	2210      	movs	r2, #16
 8004f60:	4639      	mov	r1, r7
 8004f62:	a832      	add	r0, sp, #200	; 0xc8
 8004f64:	f000 fbe1 	bl	800572a <memset>
  htim2.Init.Prescaler = 4000;
 8004f68:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8004f6c:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8004f70:	e889 0009 	stmia.w	r9, {r0, r3}
  htim2.Init.Period = 15999;
 8004f74:	f643 637f 	movw	r3, #15999	; 0x3e7f
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004f78:	4648      	mov	r0, r9
  htim2.Init.Period = 15999;
 8004f7a:	f8c9 300c 	str.w	r3, [r9, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f7e:	f8c9 7008 	str.w	r7, [r9, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f82:	f8c9 7010 	str.w	r7, [r9, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f86:	f8c9 7018 	str.w	r7, [r9, #24]
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004f8a:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004f8e:	972f      	str	r7, [sp, #188]	; 0xbc
 8004f90:	9730      	str	r7, [sp, #192]	; 0xc0
 8004f92:	9731      	str	r7, [sp, #196]	; 0xc4
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004f94:	f7fd fe6a 	bl	8002c6c <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004f98:	a932      	add	r1, sp, #200	; 0xc8
 8004f9a:	4648      	mov	r0, r9
  hadc1.Instance = ADC1;
 8004f9c:	4c73      	ldr	r4, [pc, #460]	; (800516c <main+0x344>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004f9e:	f8cd a0c8 	str.w	sl, [sp, #200]	; 0xc8
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004fa2:	f7fd fe87 	bl	8002cb4 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004fa6:	a92f      	add	r1, sp, #188	; 0xbc
 8004fa8:	4648      	mov	r0, r9
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004faa:	972f      	str	r7, [sp, #188]	; 0xbc
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004fac:	9731      	str	r7, [sp, #196]	; 0xc4
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004fae:	f7fd ff37 	bl	8002e20 <HAL_TIMEx_MasterConfigSynchronization>
  ADC_ChannelConfTypeDef sConfig = {0};
 8004fb2:	2218      	movs	r2, #24
 8004fb4:	4639      	mov	r1, r7
 8004fb6:	a832      	add	r0, sp, #200	; 0xc8
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004fb8:	f04f 0b04 	mov.w	fp, #4
  ADC_MultiModeTypeDef multimode = {0};
 8004fbc:	972f      	str	r7, [sp, #188]	; 0xbc
 8004fbe:	9730      	str	r7, [sp, #192]	; 0xc0
 8004fc0:	9731      	str	r7, [sp, #196]	; 0xc4
  ADC_ChannelConfTypeDef sConfig = {0};
 8004fc2:	f000 fbb2 	bl	800572a <memset>
  hadc1.Instance = ADC1;
 8004fc6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004fca:	4620      	mov	r0, r4
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8004fcc:	e884 0088 	stmia.w	r4, {r3, r7}
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004fd0:	60a7      	str	r7, [r4, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8004fd2:	6127      	str	r7, [r4, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004fd4:	61e7      	str	r7, [r4, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004fd6:	6267      	str	r7, [r4, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004fd8:	6327      	str	r7, [r4, #48]	; 0x30
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004fda:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004fde:	60e7      	str	r7, [r4, #12]
  hadc1.Init.NbrOfConversion = 1;
 8004fe0:	f8c4 8020 	str.w	r8, [r4, #32]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8004fe4:	6367      	str	r7, [r4, #52]	; 0x34
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004fe6:	f8c4 b014 	str.w	fp, [r4, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004fea:	61a7      	str	r7, [r4, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8004fec:	63a7      	str	r7, [r4, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004fee:	f7fc f891 	bl	8001114 <HAL_ADC_Init>
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8004ff2:	a92f      	add	r1, sp, #188	; 0xbc
 8004ff4:	4620      	mov	r0, r4
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8004ff6:	972f      	str	r7, [sp, #188]	; 0xbc
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8004ff8:	f7fc fbe6 	bl	80017c8 <HAL_ADCEx_MultiModeConfigChannel>
  sConfig.Channel = ADC_CHANNEL_6;
 8004ffc:	2206      	movs	r2, #6
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004ffe:	a932      	add	r1, sp, #200	; 0xc8
 8005000:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_6;
 8005002:	9232      	str	r2, [sp, #200]	; 0xc8
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005004:	f8cd 80cc 	str.w	r8, [sp, #204]	; 0xcc
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8005008:	9735      	str	r7, [sp, #212]	; 0xd4
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800500a:	f8cd 80d0 	str.w	r8, [sp, #208]	; 0xd0
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800500e:	9736      	str	r7, [sp, #216]	; 0xd8
  sConfig.Offset = 0;
 8005010:	9737      	str	r7, [sp, #220]	; 0xdc
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005012:	f7fc fa59 	bl	80014c8 <HAL_ADC_ConfigChannel>
  ADC_ChannelConfTypeDef sConfig = {0};
 8005016:	4639      	mov	r1, r7
 8005018:	2218      	movs	r2, #24
 800501a:	a832      	add	r0, sp, #200	; 0xc8
 800501c:	f000 fb85 	bl	800572a <memset>
  hadc2.Instance = ADC2;
 8005020:	4a53      	ldr	r2, [pc, #332]	; (8005170 <main+0x348>)
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8005022:	60b7      	str	r7, [r6, #8]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8005024:	4630      	mov	r0, r6
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8005026:	e886 0084 	stmia.w	r6, {r2, r7}
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800502a:	6137      	str	r7, [r6, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800502c:	61f7      	str	r7, [r6, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800502e:	6277      	str	r7, [r6, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005030:	6337      	str	r7, [r6, #48]	; 0x30
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005032:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005036:	60f7      	str	r7, [r6, #12]
  hadc2.Init.NbrOfConversion = 1;
 8005038:	f8c6 8020 	str.w	r8, [r6, #32]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800503c:	6377      	str	r7, [r6, #52]	; 0x34
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800503e:	f8c6 b014 	str.w	fp, [r6, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8005042:	61b7      	str	r7, [r6, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8005044:	63b7      	str	r7, [r6, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8005046:	f7fc f865 	bl	8001114 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_7;
 800504a:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800504c:	a932      	add	r1, sp, #200	; 0xc8
 800504e:	4630      	mov	r0, r6
  sConfig.Channel = ADC_CHANNEL_7;
 8005050:	9332      	str	r3, [sp, #200]	; 0xc8
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005052:	f8cd 80cc 	str.w	r8, [sp, #204]	; 0xcc
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8005056:	9735      	str	r7, [sp, #212]	; 0xd4
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8005058:	f8cd 80d0 	str.w	r8, [sp, #208]	; 0xd0
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800505c:	9736      	str	r7, [sp, #216]	; 0xd8
  sConfig.Offset = 0;
 800505e:	9737      	str	r7, [sp, #220]	; 0xdc
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005060:	f7fc fa32 	bl	80014c8 <HAL_ADC_ConfigChannel>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005064:	4639      	mov	r1, r7
 8005066:	2210      	movs	r2, #16
 8005068:	a832      	add	r0, sp, #200	; 0xc8
 800506a:	f000 fb5e 	bl	800572a <memset>
  htim3.Instance = TIM3;
 800506e:	f8df b110 	ldr.w	fp, [pc, #272]	; 8005180 <main+0x358>
  htim3.Init.Prescaler = 4000;
 8005072:	4a40      	ldr	r2, [pc, #256]	; (8005174 <main+0x34c>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005074:	f8cb 7008 	str.w	r7, [fp, #8]
  htim3.Init.Prescaler = 4000;
 8005078:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800507c:	e88b 000c 	stmia.w	fp, {r2, r3}
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005080:	4658      	mov	r0, fp
  htim3.Init.Period = 799;
 8005082:	f240 321f 	movw	r2, #799	; 0x31f
 8005086:	f8cb 200c 	str.w	r2, [fp, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800508a:	f8cb 7010 	str.w	r7, [fp, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800508e:	f8cb 7018 	str.w	r7, [fp, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005092:	972f      	str	r7, [sp, #188]	; 0xbc
 8005094:	9730      	str	r7, [sp, #192]	; 0xc0
 8005096:	9731      	str	r7, [sp, #196]	; 0xc4
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005098:	f7fd fde8 	bl	8002c6c <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800509c:	a932      	add	r1, sp, #200	; 0xc8
 800509e:	4658      	mov	r0, fp
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80050a0:	f8cd a0c8 	str.w	sl, [sp, #200]	; 0xc8
  hi2c1.Instance = I2C1;
 80050a4:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 8005184 <main+0x35c>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80050a8:	f7fd fe04 	bl	8002cb4 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80050ac:	a92f      	add	r1, sp, #188	; 0xbc
 80050ae:	4658      	mov	r0, fp
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80050b0:	972f      	str	r7, [sp, #188]	; 0xbc
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80050b2:	9731      	str	r7, [sp, #196]	; 0xc4
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80050b4:	f7fd feb4 	bl	8002e20 <HAL_TIMEx_MasterConfigSynchronization>
  hi2c1.Init.Timing = 0x2000090E;
 80050b8:	f8df e0cc 	ldr.w	lr, [pc, #204]	; 8005188 <main+0x360>
 80050bc:	4a2e      	ldr	r2, [pc, #184]	; (8005178 <main+0x350>)
  hi2c1.Init.OwnAddress1 = 0;
 80050be:	f8ca 7008 	str.w	r7, [sl, #8]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80050c2:	4650      	mov	r0, sl
  hi2c1.Init.Timing = 0x2000090E;
 80050c4:	e88a 4004 	stmia.w	sl, {r2, lr}
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80050c8:	f8ca 800c 	str.w	r8, [sl, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80050cc:	f8ca 7010 	str.w	r7, [sl, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80050d0:	f8ca 7014 	str.w	r7, [sl, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80050d4:	f8ca 7018 	str.w	r7, [sl, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80050d8:	f8ca 701c 	str.w	r7, [sl, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80050dc:	f8ca 7020 	str.w	r7, [sl, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80050e0:	f7fc fe77 	bl	8001dd2 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80050e4:	4639      	mov	r1, r7
 80050e6:	4650      	mov	r0, sl
 80050e8:	f7fd f83a 	bl	8002160 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80050ec:	4639      	mov	r1, r7
 80050ee:	4650      	mov	r0, sl
 80050f0:	f7fd f85c 	bl	80021ac <HAL_I2CEx_ConfigDigitalFilter>
  __HAL_TIM_ENABLE(&htim2);
 80050f4:	f8d9 2000 	ldr.w	r2, [r9]
  __HAL_TIM_ENABLE(&htim3);
 80050f8:	f8db 3000 	ldr.w	r3, [fp]
  __HAL_TIM_ENABLE(&htim2);
 80050fc:	6811      	ldr	r1, [r2, #0]
 80050fe:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8005144 <main+0x31c>
 8005102:	4f12      	ldr	r7, [pc, #72]	; (800514c <main+0x324>)
 8005104:	ea41 0108 	orr.w	r1, r1, r8
 8005108:	6011      	str	r1, [r2, #0]
  __HAL_TIM_ENABLE(&htim3);
 800510a:	6819      	ldr	r1, [r3, #0]
 800510c:	ea41 0108 	orr.w	r1, r1, r8
 8005110:	6019      	str	r1, [r3, #0]
  __HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);
 8005112:	68d1      	ldr	r1, [r2, #12]
 8005114:	ea41 0108 	orr.w	r1, r1, r8
 8005118:	60d1      	str	r1, [r2, #12]
  __HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE);
 800511a:	68da      	ldr	r2, [r3, #12]
 800511c:	e036      	b.n	800518c <main+0x364>
 800511e:	bf00      	nop
 8005120:	20000b30 	.word	0x20000b30
 8005124:	20000944 	.word	0x20000944
 8005128:	20000810 	.word	0x20000810
 800512c:	20000b23 	.word	0x20000b23
 8005130:	20000a6a 	.word	0x20000a6a
 8005134:	20000bdc 	.word	0x20000bdc
 8005138:	20000c41 	.word	0x20000c41
 800513c:	20000a68 	.word	0x20000a68
 8005140:	20000b22 	.word	0x20000b22
 8005144:	20000b24 	.word	0x20000b24
 8005148:	20000a64 	.word	0x20000a64
 800514c:	20000bd8 	.word	0x20000bd8
 8005150:	40021000 	.word	0x40021000
 8005154:	48000400 	.word	0x48000400
 8005158:	10210000 	.word	0x10210000
 800515c:	48000800 	.word	0x48000800
 8005160:	200009f4 	.word	0x200009f4
 8005164:	40004400 	.word	0x40004400
 8005168:	40013800 	.word	0x40013800
 800516c:	200008f0 	.word	0x200008f0
 8005170:	50000100 	.word	0x50000100
 8005174:	40000400 	.word	0x40000400
 8005178:	40005400 	.word	0x40005400
 800517c:	200009b4 	.word	0x200009b4
 8005180:	200008b0 	.word	0x200008b0
 8005184:	20000864 	.word	0x20000864
 8005188:	2000090e 	.word	0x2000090e
 800518c:	ea42 0208 	orr.w	r2, r2, r8
 8005190:	60da      	str	r2, [r3, #12]
  HAL_ADC_Start(&hadc1);
 8005192:	4620      	mov	r0, r4
 8005194:	f7fc f8b6 	bl	8001304 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 8005198:	4630      	mov	r0, r6
 800519a:	f7fc f8b3 	bl	8001304 <HAL_ADC_Start>
  HAL_UART_Receive_IT(&huart1, in_string, 1);
 800519e:	4642      	mov	r2, r8
 80051a0:	493c      	ldr	r1, [pc, #240]	; (8005294 <main+0x46c>)
 80051a2:	4628      	mov	r0, r5
 80051a4:	f7fd fe6e 	bl	8002e84 <HAL_UART_Receive_IT>
  HAL_ADC_PollForConversion(&hadc1, 1);
 80051a8:	4641      	mov	r1, r8
 80051aa:	4620      	mov	r0, r4
 80051ac:	f7fc f910 	bl	80013d0 <HAL_ADC_PollForConversion>
  HAL_ADC_PollForConversion(&hadc2, 1);
 80051b0:	4641      	mov	r1, r8
 80051b2:	4630      	mov	r0, r6
 80051b4:	f7fc f90c 	bl	80013d0 <HAL_ADC_PollForConversion>
  init_temp_sensor();
 80051b8:	f7ff fc56 	bl	8004a68 <init_temp_sensor>
  init_accel_sensor();
 80051bc:	f7ff fcd0 	bl	8004b60 <init_accel_sensor>
  init_lcd();
 80051c0:	f7ff f9c0 	bl	8004544 <init_lcd>
 80051c4:	4b34      	ldr	r3, [pc, #208]	; (8005298 <main+0x470>)
 80051c6:	9327      	str	r3, [sp, #156]	; 0x9c
 80051c8:	4b34      	ldr	r3, [pc, #208]	; (800529c <main+0x474>)
 80051ca:	9328      	str	r3, [sp, #160]	; 0xa0
 80051cc:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 80052ac <main+0x484>
 80051d0:	4b33      	ldr	r3, [pc, #204]	; (80052a0 <main+0x478>)
 80051d2:	9329      	str	r3, [sp, #164]	; 0xa4
		  read_adc(hadc1, hadc2);
 80051d4:	f104 0b10 	add.w	fp, r4, #16
		  uart_transmit(huart1);
 80051d8:	f105 0a10 	add.w	sl, r5, #16
	  prev_counter = HAL_GetTick();
 80051dc:	f7fb ff1a 	bl	8001014 <HAL_GetTick>
 80051e0:	6038      	str	r0, [r7, #0]
	  lcd_run_process();
 80051e2:	f7ff fc0d 	bl	8004a00 <lcd_run_process>
	  if(message_flag)
 80051e6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	b10b      	cbz	r3, 80051f0 <main+0x3c8>
		  uart_receive();
 80051ec:	f7fe fe8c 	bl	8003f08 <uart_receive>
	  if(adc_flag)
 80051f0:	f899 3000 	ldrb.w	r3, [r9]
 80051f4:	b16b      	cbz	r3, 8005212 <main+0x3ea>
		  read_adc(hadc1, hadc2);
 80051f6:	2254      	movs	r2, #84	; 0x54
 80051f8:	4631      	mov	r1, r6
 80051fa:	a811      	add	r0, sp, #68	; 0x44
 80051fc:	f000 fa8a 	bl	8005714 <memcpy>
 8005200:	2244      	movs	r2, #68	; 0x44
 8005202:	4659      	mov	r1, fp
 8005204:	4668      	mov	r0, sp
 8005206:	f000 fa85 	bl	8005714 <memcpy>
 800520a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800520e:	f7ff f87f 	bl	8004310 <read_adc>
	  if(count_flag)
 8005212:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	b1eb      	cbz	r3, 8005254 <main+0x42c>
		  calc_avg();
 8005218:	f7ff f8ee 	bl	80043f8 <calc_avg>
		  receive_temp_data();
 800521c:	f7ff fc5a 	bl	8004ad4 <receive_temp_data>
		  receive_accel_data();
 8005220:	f7ff fcc0 	bl	8004ba4 <receive_accel_data>
		  uart_transmit(huart1);
 8005224:	2260      	movs	r2, #96	; 0x60
 8005226:	4651      	mov	r1, sl
 8005228:	4668      	mov	r0, sp
 800522a:	f000 fa73 	bl	8005714 <memcpy>
 800522e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005232:	f7fe fd69 	bl	8003d08 <uart_transmit>
		  if(burn_flag && burn_down_cnt > 0)
 8005236:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	b15b      	cbz	r3, 8005254 <main+0x42c>
 800523c:	4b19      	ldr	r3, [pc, #100]	; (80052a4 <main+0x47c>)
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	b143      	cbz	r3, 8005254 <main+0x42c>
			  burn_down(huart1);
 8005242:	2260      	movs	r2, #96	; 0x60
 8005244:	4651      	mov	r1, sl
 8005246:	4668      	mov	r0, sp
 8005248:	f000 fa64 	bl	8005714 <memcpy>
 800524c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005250:	f7fe fe1e 	bl	8003e90 <burn_down>
	  curr_counter = HAL_GetTick();
 8005254:	f7fb fede 	bl	8001014 <HAL_GetTick>
 8005258:	f8c8 0000 	str.w	r0, [r8]
	  if( (curr_counter - prev_counter) >  max_runtime)
 800525c:	f8d8 3000 	ldr.w	r3, [r8]
 8005260:	683a      	ldr	r2, [r7, #0]
 8005262:	1a9b      	subs	r3, r3, r2
 8005264:	ee07 3a90 	vmov	s15, r3
 8005268:	4a0f      	ldr	r2, [pc, #60]	; (80052a8 <main+0x480>)
 800526a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800526e:	ed92 7a00 	vldr	s14, [r2]
 8005272:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800527a:	ddaf      	ble.n	80051dc <main+0x3b4>
		  max_runtime = (curr_counter - prev_counter);
 800527c:	f8d8 3000 	ldr.w	r3, [r8]
 8005280:	6839      	ldr	r1, [r7, #0]
 8005282:	1a5b      	subs	r3, r3, r1
 8005284:	ee07 3a90 	vmov	s15, r3
 8005288:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800528c:	edc2 7a00 	vstr	s15, [r2]
 8005290:	e7a4      	b.n	80051dc <main+0x3b4>
 8005292:	bf00      	nop
 8005294:	200006d1 	.word	0x200006d1
 8005298:	20000c41 	.word	0x20000c41
 800529c:	20000a68 	.word	0x20000a68
 80052a0:	20000b22 	.word	0x20000b22
 80052a4:	2000000c 	.word	0x2000000c
 80052a8:	20000754 	.word	0x20000754
 80052ac:	20000a64 	.word	0x20000a64

080052b0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052b0:	4b0c      	ldr	r3, [pc, #48]	; (80052e4 <HAL_MspInit+0x34>)
{
 80052b2:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052b4:	699a      	ldr	r2, [r3, #24]
 80052b6:	f042 0201 	orr.w	r2, r2, #1
 80052ba:	619a      	str	r2, [r3, #24]
 80052bc:	699a      	ldr	r2, [r3, #24]
 80052be:	f002 0201 	and.w	r2, r2, #1
 80052c2:	9200      	str	r2, [sp, #0]
 80052c4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80052c6:	69da      	ldr	r2, [r3, #28]
 80052c8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80052cc:	61da      	str	r2, [r3, #28]
 80052ce:	69db      	ldr	r3, [r3, #28]
 80052d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052d4:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80052d6:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 80052d8:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80052da:	f7fc fae9 	bl	80018b0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80052de:	b003      	add	sp, #12
 80052e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80052e4:	40021000 	.word	0x40021000

080052e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80052e8:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052ea:	2214      	movs	r2, #20
{
 80052ec:	b08a      	sub	sp, #40	; 0x28
 80052ee:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052f0:	2100      	movs	r1, #0
 80052f2:	eb0d 0002 	add.w	r0, sp, r2
 80052f6:	f000 fa18 	bl	800572a <memset>
  if(hadc->Instance==ADC1)
 80052fa:	6823      	ldr	r3, [r4, #0]
 80052fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005300:	d122      	bne.n	8005348 <HAL_ADC_MspInit+0x60>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8005302:	4a20      	ldr	r2, [pc, #128]	; (8005384 <HAL_ADC_MspInit+0x9c>)
 8005304:	6813      	ldr	r3, [r2, #0]
 8005306:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8005308:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 800530a:	6013      	str	r3, [r2, #0]
 800530c:	4b1e      	ldr	r3, [pc, #120]	; (8005388 <HAL_ADC_MspInit+0xa0>)
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800530e:	d108      	bne.n	8005322 <HAL_ADC_MspInit+0x3a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8005310:	695a      	ldr	r2, [r3, #20]
 8005312:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005316:	615a      	str	r2, [r3, #20]
 8005318:	695a      	ldr	r2, [r3, #20]
 800531a:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800531e:	9201      	str	r2, [sp, #4]
 8005320:	9a01      	ldr	r2, [sp, #4]
    }
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005322:	695a      	ldr	r2, [r3, #20]
 8005324:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8005328:	615a      	str	r2, [r3, #20]
 800532a:	695b      	ldr	r3, [r3, #20]
 800532c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005330:	9302      	str	r3, [sp, #8]
 8005332:	9b02      	ldr	r3, [sp, #8]
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_IN6 
    */
    GPIO_InitStruct.Pin = Voltage_Meas_Pin;
 8005334:	2301      	movs	r3, #1
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
    /**ADC2 GPIO Configuration    
    PC1     ------> ADC2_IN7 
    */
    GPIO_InitStruct.Pin = Current_Meas_Pin;
 8005336:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(Current_Meas_GPIO_Port, &GPIO_InitStruct);
 8005338:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800533a:	2303      	movs	r3, #3
    HAL_GPIO_Init(Current_Meas_GPIO_Port, &GPIO_InitStruct);
 800533c:	4813      	ldr	r0, [pc, #76]	; (800538c <HAL_ADC_MspInit+0xa4>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800533e:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(Current_Meas_GPIO_Port, &GPIO_InitStruct);
 8005340:	f7fc fb42 	bl	80019c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8005344:	b00a      	add	sp, #40	; 0x28
 8005346:	bd10      	pop	{r4, pc}
  else if(hadc->Instance==ADC2)
 8005348:	4a11      	ldr	r2, [pc, #68]	; (8005390 <HAL_ADC_MspInit+0xa8>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d1fa      	bne.n	8005344 <HAL_ADC_MspInit+0x5c>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800534e:	4a0d      	ldr	r2, [pc, #52]	; (8005384 <HAL_ADC_MspInit+0x9c>)
 8005350:	6813      	ldr	r3, [r2, #0]
 8005352:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8005354:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8005356:	6013      	str	r3, [r2, #0]
 8005358:	4b0b      	ldr	r3, [pc, #44]	; (8005388 <HAL_ADC_MspInit+0xa0>)
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800535a:	d108      	bne.n	800536e <HAL_ADC_MspInit+0x86>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800535c:	695a      	ldr	r2, [r3, #20]
 800535e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005362:	615a      	str	r2, [r3, #20]
 8005364:	695a      	ldr	r2, [r3, #20]
 8005366:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800536a:	9203      	str	r2, [sp, #12]
 800536c:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800536e:	695a      	ldr	r2, [r3, #20]
 8005370:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8005374:	615a      	str	r2, [r3, #20]
 8005376:	695b      	ldr	r3, [r3, #20]
 8005378:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800537c:	9304      	str	r3, [sp, #16]
 800537e:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = Current_Meas_Pin;
 8005380:	2302      	movs	r3, #2
 8005382:	e7d8      	b.n	8005336 <HAL_ADC_MspInit+0x4e>
 8005384:	2000069c 	.word	0x2000069c
 8005388:	40021000 	.word	0x40021000
 800538c:	48000800 	.word	0x48000800
 8005390:	50000100 	.word	0x50000100

08005394 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005394:	b510      	push	{r4, lr}
 8005396:	4604      	mov	r4, r0
 8005398:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800539a:	2214      	movs	r2, #20
 800539c:	2100      	movs	r1, #0
 800539e:	a803      	add	r0, sp, #12
 80053a0:	f000 f9c3 	bl	800572a <memset>
  if(hi2c->Instance==I2C1)
 80053a4:	6822      	ldr	r2, [r4, #0]
 80053a6:	4b13      	ldr	r3, [pc, #76]	; (80053f4 <HAL_I2C_MspInit+0x60>)
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d120      	bne.n	80053ee <HAL_I2C_MspInit+0x5a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80053ac:	4c12      	ldr	r4, [pc, #72]	; (80053f8 <HAL_I2C_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80053ae:	4813      	ldr	r0, [pc, #76]	; (80053fc <HAL_I2C_MspInit+0x68>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80053b0:	6963      	ldr	r3, [r4, #20]
 80053b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053b6:	6163      	str	r3, [r4, #20]
 80053b8:	6963      	ldr	r3, [r4, #20]
 80053ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053be:	9301      	str	r3, [sp, #4]
 80053c0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80053c2:	23c0      	movs	r3, #192	; 0xc0
 80053c4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80053c6:	2312      	movs	r3, #18
 80053c8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80053ca:	2301      	movs	r3, #1
 80053cc:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80053ce:	2303      	movs	r3, #3
 80053d0:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80053d2:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80053d4:	2304      	movs	r3, #4
 80053d6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80053d8:	f7fc faf6 	bl	80019c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80053dc:	69e3      	ldr	r3, [r4, #28]
 80053de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80053e2:	61e3      	str	r3, [r4, #28]
 80053e4:	69e3      	ldr	r3, [r4, #28]
 80053e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053ea:	9302      	str	r3, [sp, #8]
 80053ec:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80053ee:	b008      	add	sp, #32
 80053f0:	bd10      	pop	{r4, pc}
 80053f2:	bf00      	nop
 80053f4:	40005400 	.word	0x40005400
 80053f8:	40021000 	.word	0x40021000
 80053fc:	48000400 	.word	0x48000400

08005400 <HAL_TIM_Base_MspInit>:
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM2)
 8005400:	6803      	ldr	r3, [r0, #0]
 8005402:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 8005406:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM2)
 8005408:	d115      	bne.n	8005436 <HAL_TIM_Base_MspInit+0x36>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800540a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800540e:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005410:	69da      	ldr	r2, [r3, #28]
 8005412:	f042 0201 	orr.w	r2, r2, #1
 8005416:	61da      	str	r2, [r3, #28]
 8005418:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800541a:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 800541c:	f003 0301 	and.w	r3, r3, #1
 8005420:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005422:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005424:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005426:	f7fc fa55 	bl	80018d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800542a:	201c      	movs	r0, #28
  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800542c:	f7fc fa86 	bl	800193c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8005430:	b003      	add	sp, #12
 8005432:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim_base->Instance==TIM3)
 8005436:	4a0a      	ldr	r2, [pc, #40]	; (8005460 <HAL_TIM_Base_MspInit+0x60>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d1f9      	bne.n	8005430 <HAL_TIM_Base_MspInit+0x30>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800543c:	4b09      	ldr	r3, [pc, #36]	; (8005464 <HAL_TIM_Base_MspInit+0x64>)
 800543e:	69da      	ldr	r2, [r3, #28]
 8005440:	f042 0202 	orr.w	r2, r2, #2
 8005444:	61da      	str	r2, [r3, #28]
 8005446:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8005448:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 800544a:	f003 0302 	and.w	r3, r3, #2
 800544e:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8005450:	201d      	movs	r0, #29
 8005452:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005454:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8005456:	f7fc fa3d 	bl	80018d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800545a:	201d      	movs	r0, #29
 800545c:	e7e6      	b.n	800542c <HAL_TIM_Base_MspInit+0x2c>
 800545e:	bf00      	nop
 8005460:	40000400 	.word	0x40000400
 8005464:	40021000 	.word	0x40021000

08005468 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005468:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800546a:	2214      	movs	r2, #20
{
 800546c:	b08a      	sub	sp, #40	; 0x28
 800546e:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005470:	2100      	movs	r1, #0
 8005472:	eb0d 0002 	add.w	r0, sp, r2
 8005476:	f000 f958 	bl	800572a <memset>
  if(huart->Instance==USART1)
 800547a:	6823      	ldr	r3, [r4, #0]
 800547c:	4a27      	ldr	r2, [pc, #156]	; (800551c <HAL_UART_MspInit+0xb4>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d128      	bne.n	80054d4 <HAL_UART_MspInit+0x6c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005482:	4b27      	ldr	r3, [pc, #156]	; (8005520 <HAL_UART_MspInit+0xb8>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005484:	4827      	ldr	r0, [pc, #156]	; (8005524 <HAL_UART_MspInit+0xbc>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8005486:	699a      	ldr	r2, [r3, #24]
 8005488:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800548c:	619a      	str	r2, [r3, #24]
 800548e:	699a      	ldr	r2, [r3, #24]
 8005490:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8005494:	9201      	str	r2, [sp, #4]
 8005496:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005498:	695a      	ldr	r2, [r3, #20]
 800549a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800549e:	615a      	str	r2, [r3, #20]
 80054a0:	695b      	ldr	r3, [r3, #20]
 80054a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054a6:	9302      	str	r3, [sp, #8]
 80054a8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80054aa:	2330      	movs	r3, #48	; 0x30
 80054ac:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054ae:	2302      	movs	r3, #2
 80054b0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80054b2:	2303      	movs	r3, #3
 80054b4:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80054b6:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80054b8:	2307      	movs	r3, #7
 80054ba:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80054bc:	f7fc fa84 	bl	80019c8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80054c0:	2200      	movs	r2, #0
 80054c2:	2025      	movs	r0, #37	; 0x25
 80054c4:	4611      	mov	r1, r2
 80054c6:	f7fc fa05 	bl	80018d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80054ca:	2025      	movs	r0, #37	; 0x25
 80054cc:	f7fc fa36 	bl	800193c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80054d0:	b00a      	add	sp, #40	; 0x28
 80054d2:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART2)
 80054d4:	4a14      	ldr	r2, [pc, #80]	; (8005528 <HAL_UART_MspInit+0xc0>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d1fa      	bne.n	80054d0 <HAL_UART_MspInit+0x68>
    __HAL_RCC_USART2_CLK_ENABLE();
 80054da:	4b11      	ldr	r3, [pc, #68]	; (8005520 <HAL_UART_MspInit+0xb8>)
 80054dc:	69da      	ldr	r2, [r3, #28]
 80054de:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80054e2:	61da      	str	r2, [r3, #28]
 80054e4:	69da      	ldr	r2, [r3, #28]
 80054e6:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80054ea:	9203      	str	r2, [sp, #12]
 80054ec:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054ee:	695a      	ldr	r2, [r3, #20]
 80054f0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80054f4:	615a      	str	r2, [r3, #20]
 80054f6:	695b      	ldr	r3, [r3, #20]
 80054f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054fc:	9304      	str	r3, [sp, #16]
 80054fe:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8005500:	230c      	movs	r3, #12
 8005502:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005504:	2302      	movs	r3, #2
 8005506:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005508:	2303      	movs	r3, #3
 800550a:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800550c:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800550e:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005510:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005514:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005516:	f7fc fa57 	bl	80019c8 <HAL_GPIO_Init>
}
 800551a:	e7d9      	b.n	80054d0 <HAL_UART_MspInit+0x68>
 800551c:	40013800 	.word	0x40013800
 8005520:	40021000 	.word	0x40021000
 8005524:	48000800 	.word	0x48000800
 8005528:	40004400 	.word	0x40004400

0800552c <NMI_Handler>:
 800552c:	4770      	bx	lr

0800552e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800552e:	e7fe      	b.n	800552e <HardFault_Handler>

08005530 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005530:	e7fe      	b.n	8005530 <MemManage_Handler>

08005532 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005532:	e7fe      	b.n	8005532 <BusFault_Handler>

08005534 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005534:	e7fe      	b.n	8005534 <UsageFault_Handler>

08005536 <SVC_Handler>:
 8005536:	4770      	bx	lr

08005538 <DebugMon_Handler>:
 8005538:	4770      	bx	lr

0800553a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800553a:	4770      	bx	lr

0800553c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800553c:	f7fb bd5e 	b.w	8000ffc <HAL_IncTick>

08005540 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005540:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005542:	4803      	ldr	r0, [pc, #12]	; (8005550 <TIM2_IRQHandler+0x10>)
 8005544:	f7fd fa97 	bl	8002a76 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
	count_flag = 1;
 8005548:	4b02      	ldr	r3, [pc, #8]	; (8005554 <TIM2_IRQHandler+0x14>)
 800554a:	2201      	movs	r2, #1
 800554c:	701a      	strb	r2, [r3, #0]
 800554e:	bd08      	pop	{r3, pc}
 8005550:	200009b4 	.word	0x200009b4
 8005554:	20000c41 	.word	0x20000c41

08005558 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005558:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800555a:	4803      	ldr	r0, [pc, #12]	; (8005568 <TIM3_IRQHandler+0x10>)
 800555c:	f7fd fa8b 	bl	8002a76 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
	adc_flag = 1;
 8005560:	4b02      	ldr	r3, [pc, #8]	; (800556c <TIM3_IRQHandler+0x14>)
 8005562:	2201      	movs	r2, #1
 8005564:	701a      	strb	r2, [r3, #0]
 8005566:	bd08      	pop	{r3, pc}
 8005568:	200008b0 	.word	0x200008b0
 800556c:	20000b24 	.word	0x20000b24

08005570 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 8005570:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */
  //uart_transmit_test(&huart1);
	char in_char = (uint8_t)huart1.Instance->RDR;
 8005572:	4b10      	ldr	r3, [pc, #64]	; (80055b4 <USART1_IRQHandler+0x44>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	8c99      	ldrh	r1, [r3, #36]	; 0x24
	if(in_len < 92)
 8005578:	4b0f      	ldr	r3, [pc, #60]	; (80055b8 <USART1_IRQHandler+0x48>)
 800557a:	781a      	ldrb	r2, [r3, #0]
 800557c:	2a5b      	cmp	r2, #91	; 0x5b
	{
		in_string[in_len] = in_char;
 800557e:	bf9e      	ittt	ls
 8005580:	781a      	ldrbls	r2, [r3, #0]
 8005582:	480e      	ldrls	r0, [pc, #56]	; (80055bc <USART1_IRQHandler+0x4c>)
 8005584:	b2d2      	uxtbls	r2, r2
	char in_char = (uint8_t)huart1.Instance->RDR;
 8005586:	b2c9      	uxtb	r1, r1
		in_string[in_len] = in_char;
 8005588:	bf98      	it	ls
 800558a:	5481      	strbls	r1, [r0, r2]
	}
	in_len++;
 800558c:	781a      	ldrb	r2, [r3, #0]
	{
		message_flag = 1;
		//HAL_UART_Transmit(&huart1, (uint8_t*)in_string, strlen(in_string), 0xFFFF);
	}

	HAL_UART_Receive_IT(&huart1, in_string, 1);
 800558e:	4809      	ldr	r0, [pc, #36]	; (80055b4 <USART1_IRQHandler+0x44>)
	in_len++;
 8005590:	3201      	adds	r2, #1
	if(in_char == '\n')
 8005592:	290a      	cmp	r1, #10
	in_len++;
 8005594:	b2d2      	uxtb	r2, r2
 8005596:	701a      	strb	r2, [r3, #0]
		message_flag = 1;
 8005598:	bf08      	it	eq
 800559a:	4b09      	ldreq	r3, [pc, #36]	; (80055c0 <USART1_IRQHandler+0x50>)
	HAL_UART_Receive_IT(&huart1, in_string, 1);
 800559c:	4907      	ldr	r1, [pc, #28]	; (80055bc <USART1_IRQHandler+0x4c>)
		message_flag = 1;
 800559e:	bf04      	itt	eq
 80055a0:	2201      	moveq	r2, #1
 80055a2:	701a      	strbeq	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart1, in_string, 1);
 80055a4:	2201      	movs	r2, #1
 80055a6:	f7fd fc6d 	bl	8002e84 <HAL_UART_Receive_IT>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80055aa:	4802      	ldr	r0, [pc, #8]	; (80055b4 <USART1_IRQHandler+0x44>)
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80055ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_UART_IRQHandler(&huart1);
 80055b0:	f7fd bf14 	b.w	80033dc <HAL_UART_IRQHandler>
 80055b4:	20000944 	.word	0x20000944
 80055b8:	20000b23 	.word	0x20000b23
 80055bc:	200006d1 	.word	0x200006d1
 80055c0:	20000b22 	.word	0x20000b22

080055c4 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80055c4:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80055c6:	4b0a      	ldr	r3, [pc, #40]	; (80055f0 <_sbrk+0x2c>)
 80055c8:	6819      	ldr	r1, [r3, #0]
{
 80055ca:	4602      	mov	r2, r0
	if (heap_end == 0)
 80055cc:	b909      	cbnz	r1, 80055d2 <_sbrk+0xe>
		heap_end = &end;
 80055ce:	4909      	ldr	r1, [pc, #36]	; (80055f4 <_sbrk+0x30>)
 80055d0:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 80055d2:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80055d4:	4669      	mov	r1, sp
 80055d6:	4402      	add	r2, r0
 80055d8:	428a      	cmp	r2, r1
 80055da:	d906      	bls.n	80055ea <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80055dc:	f000 f870 	bl	80056c0 <__errno>
 80055e0:	230c      	movs	r3, #12
 80055e2:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80055e4:	f04f 30ff 	mov.w	r0, #4294967295
 80055e8:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 80055ea:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 80055ec:	bd08      	pop	{r3, pc}
 80055ee:	bf00      	nop
 80055f0:	200006a0 	.word	0x200006a0
 80055f4:	20000c58 	.word	0x20000c58

080055f8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80055f8:	4915      	ldr	r1, [pc, #84]	; (8005650 <SystemInit+0x58>)
 80055fa:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80055fe:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005602:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8005606:	4b13      	ldr	r3, [pc, #76]	; (8005654 <SystemInit+0x5c>)
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	f042 0201 	orr.w	r2, r2, #1
 800560e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8005610:	6858      	ldr	r0, [r3, #4]
 8005612:	4a11      	ldr	r2, [pc, #68]	; (8005658 <SystemInit+0x60>)
 8005614:	4002      	ands	r2, r0
 8005616:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800561e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005622:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800562a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800562c:	685a      	ldr	r2, [r3, #4]
 800562e:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8005632:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8005634:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005636:	f022 020f 	bic.w	r2, r2, #15
 800563a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 800563c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800563e:	4a07      	ldr	r2, [pc, #28]	; (800565c <SystemInit+0x64>)
 8005640:	4002      	ands	r2, r0
 8005642:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8005644:	2200      	movs	r2, #0
 8005646:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005648:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800564c:	608b      	str	r3, [r1, #8]
 800564e:	4770      	bx	lr
 8005650:	e000ed00 	.word	0xe000ed00
 8005654:	40021000 	.word	0x40021000
 8005658:	f87fc00c 	.word	0xf87fc00c
 800565c:	ff00fccc 	.word	0xff00fccc

08005660 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005660:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005698 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8005664:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8005666:	e003      	b.n	8005670 <LoopCopyDataInit>

08005668 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8005668:	4b0c      	ldr	r3, [pc, #48]	; (800569c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800566a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800566c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800566e:	3104      	adds	r1, #4

08005670 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8005670:	480b      	ldr	r0, [pc, #44]	; (80056a0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8005672:	4b0c      	ldr	r3, [pc, #48]	; (80056a4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8005674:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8005676:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8005678:	d3f6      	bcc.n	8005668 <CopyDataInit>
	ldr	r2, =_sbss
 800567a:	4a0b      	ldr	r2, [pc, #44]	; (80056a8 <LoopForever+0x12>)
	b	LoopFillZerobss
 800567c:	e002      	b.n	8005684 <LoopFillZerobss>

0800567e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800567e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8005680:	f842 3b04 	str.w	r3, [r2], #4

08005684 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8005684:	4b09      	ldr	r3, [pc, #36]	; (80056ac <LoopForever+0x16>)
	cmp	r2, r3
 8005686:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8005688:	d3f9      	bcc.n	800567e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800568a:	f7ff ffb5 	bl	80055f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800568e:	f000 f81d 	bl	80056cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005692:	f7ff fbc9 	bl	8004e28 <main>

08005696 <LoopForever>:

LoopForever:
    b LoopForever
 8005696:	e7fe      	b.n	8005696 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005698:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 800569c:	08009ed0 	.word	0x08009ed0
	ldr	r0, =_sdata
 80056a0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80056a4:	20000680 	.word	0x20000680
	ldr	r2, =_sbss
 80056a8:	20000680 	.word	0x20000680
	ldr	r3, = _ebss
 80056ac:	20000c58 	.word	0x20000c58

080056b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80056b0:	e7fe      	b.n	80056b0 <ADC1_2_IRQHandler>

080056b2 <atof>:
 80056b2:	2100      	movs	r1, #0
 80056b4:	f000 bea0 	b.w	80063f8 <strtod>

080056b8 <atoi>:
 80056b8:	220a      	movs	r2, #10
 80056ba:	2100      	movs	r1, #0
 80056bc:	f000 bf30 	b.w	8006520 <strtol>

080056c0 <__errno>:
 80056c0:	4b01      	ldr	r3, [pc, #4]	; (80056c8 <__errno+0x8>)
 80056c2:	6818      	ldr	r0, [r3, #0]
 80056c4:	4770      	bx	lr
 80056c6:	bf00      	nop
 80056c8:	20000010 	.word	0x20000010

080056cc <__libc_init_array>:
 80056cc:	b570      	push	{r4, r5, r6, lr}
 80056ce:	4e0d      	ldr	r6, [pc, #52]	; (8005704 <__libc_init_array+0x38>)
 80056d0:	4c0d      	ldr	r4, [pc, #52]	; (8005708 <__libc_init_array+0x3c>)
 80056d2:	1ba4      	subs	r4, r4, r6
 80056d4:	10a4      	asrs	r4, r4, #2
 80056d6:	2500      	movs	r5, #0
 80056d8:	42a5      	cmp	r5, r4
 80056da:	d109      	bne.n	80056f0 <__libc_init_array+0x24>
 80056dc:	4e0b      	ldr	r6, [pc, #44]	; (800570c <__libc_init_array+0x40>)
 80056de:	4c0c      	ldr	r4, [pc, #48]	; (8005710 <__libc_init_array+0x44>)
 80056e0:	f004 fa26 	bl	8009b30 <_init>
 80056e4:	1ba4      	subs	r4, r4, r6
 80056e6:	10a4      	asrs	r4, r4, #2
 80056e8:	2500      	movs	r5, #0
 80056ea:	42a5      	cmp	r5, r4
 80056ec:	d105      	bne.n	80056fa <__libc_init_array+0x2e>
 80056ee:	bd70      	pop	{r4, r5, r6, pc}
 80056f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80056f4:	4798      	blx	r3
 80056f6:	3501      	adds	r5, #1
 80056f8:	e7ee      	b.n	80056d8 <__libc_init_array+0xc>
 80056fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80056fe:	4798      	blx	r3
 8005700:	3501      	adds	r5, #1
 8005702:	e7f2      	b.n	80056ea <__libc_init_array+0x1e>
 8005704:	08009ec8 	.word	0x08009ec8
 8005708:	08009ec8 	.word	0x08009ec8
 800570c:	08009ec8 	.word	0x08009ec8
 8005710:	08009ecc 	.word	0x08009ecc

08005714 <memcpy>:
 8005714:	b510      	push	{r4, lr}
 8005716:	1e43      	subs	r3, r0, #1
 8005718:	440a      	add	r2, r1
 800571a:	4291      	cmp	r1, r2
 800571c:	d100      	bne.n	8005720 <memcpy+0xc>
 800571e:	bd10      	pop	{r4, pc}
 8005720:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005724:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005728:	e7f7      	b.n	800571a <memcpy+0x6>

0800572a <memset>:
 800572a:	4402      	add	r2, r0
 800572c:	4603      	mov	r3, r0
 800572e:	4293      	cmp	r3, r2
 8005730:	d100      	bne.n	8005734 <memset+0xa>
 8005732:	4770      	bx	lr
 8005734:	f803 1b01 	strb.w	r1, [r3], #1
 8005738:	e7f9      	b.n	800572e <memset+0x4>
	...

0800573c <snprintf>:
 800573c:	b40c      	push	{r2, r3}
 800573e:	b530      	push	{r4, r5, lr}
 8005740:	4b17      	ldr	r3, [pc, #92]	; (80057a0 <snprintf+0x64>)
 8005742:	1e0c      	subs	r4, r1, #0
 8005744:	b09d      	sub	sp, #116	; 0x74
 8005746:	681d      	ldr	r5, [r3, #0]
 8005748:	da08      	bge.n	800575c <snprintf+0x20>
 800574a:	238b      	movs	r3, #139	; 0x8b
 800574c:	602b      	str	r3, [r5, #0]
 800574e:	f04f 30ff 	mov.w	r0, #4294967295
 8005752:	b01d      	add	sp, #116	; 0x74
 8005754:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005758:	b002      	add	sp, #8
 800575a:	4770      	bx	lr
 800575c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005760:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005764:	bf14      	ite	ne
 8005766:	f104 33ff 	addne.w	r3, r4, #4294967295
 800576a:	4623      	moveq	r3, r4
 800576c:	9304      	str	r3, [sp, #16]
 800576e:	9307      	str	r3, [sp, #28]
 8005770:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005774:	9002      	str	r0, [sp, #8]
 8005776:	9006      	str	r0, [sp, #24]
 8005778:	f8ad 3016 	strh.w	r3, [sp, #22]
 800577c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800577e:	ab21      	add	r3, sp, #132	; 0x84
 8005780:	a902      	add	r1, sp, #8
 8005782:	4628      	mov	r0, r5
 8005784:	9301      	str	r3, [sp, #4]
 8005786:	f000 fee3 	bl	8006550 <_svfprintf_r>
 800578a:	1c43      	adds	r3, r0, #1
 800578c:	bfbc      	itt	lt
 800578e:	238b      	movlt	r3, #139	; 0x8b
 8005790:	602b      	strlt	r3, [r5, #0]
 8005792:	2c00      	cmp	r4, #0
 8005794:	d0dd      	beq.n	8005752 <snprintf+0x16>
 8005796:	9b02      	ldr	r3, [sp, #8]
 8005798:	2200      	movs	r2, #0
 800579a:	701a      	strb	r2, [r3, #0]
 800579c:	e7d9      	b.n	8005752 <snprintf+0x16>
 800579e:	bf00      	nop
 80057a0:	20000010 	.word	0x20000010

080057a4 <strchr>:
 80057a4:	b2c9      	uxtb	r1, r1
 80057a6:	4603      	mov	r3, r0
 80057a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80057ac:	b11a      	cbz	r2, 80057b6 <strchr+0x12>
 80057ae:	4291      	cmp	r1, r2
 80057b0:	d1f9      	bne.n	80057a6 <strchr+0x2>
 80057b2:	4618      	mov	r0, r3
 80057b4:	4770      	bx	lr
 80057b6:	2900      	cmp	r1, #0
 80057b8:	bf0c      	ite	eq
 80057ba:	4618      	moveq	r0, r3
 80057bc:	2000      	movne	r0, #0
 80057be:	4770      	bx	lr

080057c0 <strncmp>:
 80057c0:	b510      	push	{r4, lr}
 80057c2:	b16a      	cbz	r2, 80057e0 <strncmp+0x20>
 80057c4:	3901      	subs	r1, #1
 80057c6:	1884      	adds	r4, r0, r2
 80057c8:	f810 3b01 	ldrb.w	r3, [r0], #1
 80057cc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d103      	bne.n	80057dc <strncmp+0x1c>
 80057d4:	42a0      	cmp	r0, r4
 80057d6:	d001      	beq.n	80057dc <strncmp+0x1c>
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d1f5      	bne.n	80057c8 <strncmp+0x8>
 80057dc:	1a98      	subs	r0, r3, r2
 80057de:	bd10      	pop	{r4, pc}
 80057e0:	4610      	mov	r0, r2
 80057e2:	bd10      	pop	{r4, pc}

080057e4 <sulp>:
 80057e4:	b570      	push	{r4, r5, r6, lr}
 80057e6:	4604      	mov	r4, r0
 80057e8:	460d      	mov	r5, r1
 80057ea:	ec45 4b10 	vmov	d0, r4, r5
 80057ee:	4616      	mov	r6, r2
 80057f0:	f003 fd00 	bl	80091f4 <__ulp>
 80057f4:	ec51 0b10 	vmov	r0, r1, d0
 80057f8:	b17e      	cbz	r6, 800581a <sulp+0x36>
 80057fa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80057fe:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005802:	2b00      	cmp	r3, #0
 8005804:	dd09      	ble.n	800581a <sulp+0x36>
 8005806:	051b      	lsls	r3, r3, #20
 8005808:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800580c:	2400      	movs	r4, #0
 800580e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005812:	4622      	mov	r2, r4
 8005814:	462b      	mov	r3, r5
 8005816:	f7fa feeb 	bl	80005f0 <__aeabi_dmul>
 800581a:	bd70      	pop	{r4, r5, r6, pc}
 800581c:	0000      	movs	r0, r0
	...

08005820 <_strtod_l>:
 8005820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005824:	b09f      	sub	sp, #124	; 0x7c
 8005826:	4698      	mov	r8, r3
 8005828:	9004      	str	r0, [sp, #16]
 800582a:	2300      	movs	r3, #0
 800582c:	4640      	mov	r0, r8
 800582e:	460c      	mov	r4, r1
 8005830:	9215      	str	r2, [sp, #84]	; 0x54
 8005832:	931a      	str	r3, [sp, #104]	; 0x68
 8005834:	f002 ffda 	bl	80087ec <__localeconv_l>
 8005838:	4607      	mov	r7, r0
 800583a:	6800      	ldr	r0, [r0, #0]
 800583c:	f7fa fcc8 	bl	80001d0 <strlen>
 8005840:	f04f 0a00 	mov.w	sl, #0
 8005844:	4605      	mov	r5, r0
 8005846:	f04f 0b00 	mov.w	fp, #0
 800584a:	9419      	str	r4, [sp, #100]	; 0x64
 800584c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800584e:	781a      	ldrb	r2, [r3, #0]
 8005850:	2a0d      	cmp	r2, #13
 8005852:	d833      	bhi.n	80058bc <_strtod_l+0x9c>
 8005854:	2a09      	cmp	r2, #9
 8005856:	d237      	bcs.n	80058c8 <_strtod_l+0xa8>
 8005858:	2a00      	cmp	r2, #0
 800585a:	d03f      	beq.n	80058dc <_strtod_l+0xbc>
 800585c:	2300      	movs	r3, #0
 800585e:	9309      	str	r3, [sp, #36]	; 0x24
 8005860:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8005862:	7833      	ldrb	r3, [r6, #0]
 8005864:	2b30      	cmp	r3, #48	; 0x30
 8005866:	f040 8103 	bne.w	8005a70 <_strtod_l+0x250>
 800586a:	7873      	ldrb	r3, [r6, #1]
 800586c:	2b58      	cmp	r3, #88	; 0x58
 800586e:	d001      	beq.n	8005874 <_strtod_l+0x54>
 8005870:	2b78      	cmp	r3, #120	; 0x78
 8005872:	d16b      	bne.n	800594c <_strtod_l+0x12c>
 8005874:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005876:	9301      	str	r3, [sp, #4]
 8005878:	ab1a      	add	r3, sp, #104	; 0x68
 800587a:	9300      	str	r3, [sp, #0]
 800587c:	f8cd 8008 	str.w	r8, [sp, #8]
 8005880:	ab1b      	add	r3, sp, #108	; 0x6c
 8005882:	4aad      	ldr	r2, [pc, #692]	; (8005b38 <_strtod_l+0x318>)
 8005884:	9804      	ldr	r0, [sp, #16]
 8005886:	a919      	add	r1, sp, #100	; 0x64
 8005888:	f002 fcda 	bl	8008240 <__gethex>
 800588c:	f010 0407 	ands.w	r4, r0, #7
 8005890:	4605      	mov	r5, r0
 8005892:	d005      	beq.n	80058a0 <_strtod_l+0x80>
 8005894:	2c06      	cmp	r4, #6
 8005896:	d12b      	bne.n	80058f0 <_strtod_l+0xd0>
 8005898:	3601      	adds	r6, #1
 800589a:	2300      	movs	r3, #0
 800589c:	9619      	str	r6, [sp, #100]	; 0x64
 800589e:	9309      	str	r3, [sp, #36]	; 0x24
 80058a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	f040 8590 	bne.w	80063c8 <_strtod_l+0xba8>
 80058a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058aa:	b1e3      	cbz	r3, 80058e6 <_strtod_l+0xc6>
 80058ac:	4652      	mov	r2, sl
 80058ae:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80058b2:	ec43 2b10 	vmov	d0, r2, r3
 80058b6:	b01f      	add	sp, #124	; 0x7c
 80058b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058bc:	2a2b      	cmp	r2, #43	; 0x2b
 80058be:	d006      	beq.n	80058ce <_strtod_l+0xae>
 80058c0:	2a2d      	cmp	r2, #45	; 0x2d
 80058c2:	d013      	beq.n	80058ec <_strtod_l+0xcc>
 80058c4:	2a20      	cmp	r2, #32
 80058c6:	d1c9      	bne.n	800585c <_strtod_l+0x3c>
 80058c8:	3301      	adds	r3, #1
 80058ca:	9319      	str	r3, [sp, #100]	; 0x64
 80058cc:	e7be      	b.n	800584c <_strtod_l+0x2c>
 80058ce:	2200      	movs	r2, #0
 80058d0:	9209      	str	r2, [sp, #36]	; 0x24
 80058d2:	1c5a      	adds	r2, r3, #1
 80058d4:	9219      	str	r2, [sp, #100]	; 0x64
 80058d6:	785b      	ldrb	r3, [r3, #1]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d1c1      	bne.n	8005860 <_strtod_l+0x40>
 80058dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80058de:	9419      	str	r4, [sp, #100]	; 0x64
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	f040 856f 	bne.w	80063c4 <_strtod_l+0xba4>
 80058e6:	4652      	mov	r2, sl
 80058e8:	465b      	mov	r3, fp
 80058ea:	e7e2      	b.n	80058b2 <_strtod_l+0x92>
 80058ec:	2201      	movs	r2, #1
 80058ee:	e7ef      	b.n	80058d0 <_strtod_l+0xb0>
 80058f0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80058f2:	b13a      	cbz	r2, 8005904 <_strtod_l+0xe4>
 80058f4:	2135      	movs	r1, #53	; 0x35
 80058f6:	a81c      	add	r0, sp, #112	; 0x70
 80058f8:	f003 fd6d 	bl	80093d6 <__copybits>
 80058fc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80058fe:	9804      	ldr	r0, [sp, #16]
 8005900:	f003 f9ec 	bl	8008cdc <_Bfree>
 8005904:	3c01      	subs	r4, #1
 8005906:	2c04      	cmp	r4, #4
 8005908:	d808      	bhi.n	800591c <_strtod_l+0xfc>
 800590a:	e8df f004 	tbb	[pc, r4]
 800590e:	030c      	.short	0x030c
 8005910:	1a17      	.short	0x1a17
 8005912:	0c          	.byte	0x0c
 8005913:	00          	.byte	0x00
 8005914:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 8005918:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 800591c:	0729      	lsls	r1, r5, #28
 800591e:	d5bf      	bpl.n	80058a0 <_strtod_l+0x80>
 8005920:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8005924:	e7bc      	b.n	80058a0 <_strtod_l+0x80>
 8005926:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005928:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800592a:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 800592e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005932:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005936:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800593a:	e7ef      	b.n	800591c <_strtod_l+0xfc>
 800593c:	f8df b204 	ldr.w	fp, [pc, #516]	; 8005b44 <_strtod_l+0x324>
 8005940:	e7ec      	b.n	800591c <_strtod_l+0xfc>
 8005942:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8005946:	f04f 3aff 	mov.w	sl, #4294967295
 800594a:	e7e7      	b.n	800591c <_strtod_l+0xfc>
 800594c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800594e:	1c5a      	adds	r2, r3, #1
 8005950:	9219      	str	r2, [sp, #100]	; 0x64
 8005952:	785b      	ldrb	r3, [r3, #1]
 8005954:	2b30      	cmp	r3, #48	; 0x30
 8005956:	d0f9      	beq.n	800594c <_strtod_l+0x12c>
 8005958:	2b00      	cmp	r3, #0
 800595a:	d0a1      	beq.n	80058a0 <_strtod_l+0x80>
 800595c:	2301      	movs	r3, #1
 800595e:	f04f 0900 	mov.w	r9, #0
 8005962:	9308      	str	r3, [sp, #32]
 8005964:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005966:	930a      	str	r3, [sp, #40]	; 0x28
 8005968:	f8cd 901c 	str.w	r9, [sp, #28]
 800596c:	f8cd 9018 	str.w	r9, [sp, #24]
 8005970:	220a      	movs	r2, #10
 8005972:	9819      	ldr	r0, [sp, #100]	; 0x64
 8005974:	7806      	ldrb	r6, [r0, #0]
 8005976:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800597a:	b2d9      	uxtb	r1, r3
 800597c:	2909      	cmp	r1, #9
 800597e:	d979      	bls.n	8005a74 <_strtod_l+0x254>
 8005980:	462a      	mov	r2, r5
 8005982:	6839      	ldr	r1, [r7, #0]
 8005984:	f7ff ff1c 	bl	80057c0 <strncmp>
 8005988:	2800      	cmp	r0, #0
 800598a:	f000 8082 	beq.w	8005a92 <_strtod_l+0x272>
 800598e:	2000      	movs	r0, #0
 8005990:	9d06      	ldr	r5, [sp, #24]
 8005992:	4633      	mov	r3, r6
 8005994:	4602      	mov	r2, r0
 8005996:	4601      	mov	r1, r0
 8005998:	2b65      	cmp	r3, #101	; 0x65
 800599a:	d002      	beq.n	80059a2 <_strtod_l+0x182>
 800599c:	2b45      	cmp	r3, #69	; 0x45
 800599e:	f040 80e8 	bne.w	8005b72 <_strtod_l+0x352>
 80059a2:	b925      	cbnz	r5, 80059ae <_strtod_l+0x18e>
 80059a4:	b910      	cbnz	r0, 80059ac <_strtod_l+0x18c>
 80059a6:	9b08      	ldr	r3, [sp, #32]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d097      	beq.n	80058dc <_strtod_l+0xbc>
 80059ac:	2500      	movs	r5, #0
 80059ae:	9c19      	ldr	r4, [sp, #100]	; 0x64
 80059b0:	1c63      	adds	r3, r4, #1
 80059b2:	9319      	str	r3, [sp, #100]	; 0x64
 80059b4:	7863      	ldrb	r3, [r4, #1]
 80059b6:	2b2b      	cmp	r3, #43	; 0x2b
 80059b8:	f000 80c8 	beq.w	8005b4c <_strtod_l+0x32c>
 80059bc:	2b2d      	cmp	r3, #45	; 0x2d
 80059be:	f000 80cb 	beq.w	8005b58 <_strtod_l+0x338>
 80059c2:	2600      	movs	r6, #0
 80059c4:	9605      	str	r6, [sp, #20]
 80059c6:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80059ca:	2e09      	cmp	r6, #9
 80059cc:	f200 80d0 	bhi.w	8005b70 <_strtod_l+0x350>
 80059d0:	2b30      	cmp	r3, #48	; 0x30
 80059d2:	f000 80c3 	beq.w	8005b5c <_strtod_l+0x33c>
 80059d6:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
 80059da:	2e08      	cmp	r6, #8
 80059dc:	f200 80c9 	bhi.w	8005b72 <_strtod_l+0x352>
 80059e0:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80059e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80059e6:	f04f 0c0a 	mov.w	ip, #10
 80059ea:	461f      	mov	r7, r3
 80059ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80059ee:	1c5e      	adds	r6, r3, #1
 80059f0:	9619      	str	r6, [sp, #100]	; 0x64
 80059f2:	785b      	ldrb	r3, [r3, #1]
 80059f4:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80059f8:	f1b8 0f09 	cmp.w	r8, #9
 80059fc:	f240 80b3 	bls.w	8005b66 <_strtod_l+0x346>
 8005a00:	1bf6      	subs	r6, r6, r7
 8005a02:	2e08      	cmp	r6, #8
 8005a04:	f644 681f 	movw	r8, #19999	; 0x4e1f
 8005a08:	dc02      	bgt.n	8005a10 <_strtod_l+0x1f0>
 8005a0a:	45f0      	cmp	r8, lr
 8005a0c:	bfa8      	it	ge
 8005a0e:	46f0      	movge	r8, lr
 8005a10:	9e05      	ldr	r6, [sp, #20]
 8005a12:	b10e      	cbz	r6, 8005a18 <_strtod_l+0x1f8>
 8005a14:	f1c8 0800 	rsb	r8, r8, #0
 8005a18:	2d00      	cmp	r5, #0
 8005a1a:	f040 80d0 	bne.w	8005bbe <_strtod_l+0x39e>
 8005a1e:	2800      	cmp	r0, #0
 8005a20:	f47f af3e 	bne.w	80058a0 <_strtod_l+0x80>
 8005a24:	9a08      	ldr	r2, [sp, #32]
 8005a26:	2a00      	cmp	r2, #0
 8005a28:	f47f af3a 	bne.w	80058a0 <_strtod_l+0x80>
 8005a2c:	2900      	cmp	r1, #0
 8005a2e:	f47f af55 	bne.w	80058dc <_strtod_l+0xbc>
 8005a32:	2b4e      	cmp	r3, #78	; 0x4e
 8005a34:	f000 80a6 	beq.w	8005b84 <_strtod_l+0x364>
 8005a38:	f300 809e 	bgt.w	8005b78 <_strtod_l+0x358>
 8005a3c:	2b49      	cmp	r3, #73	; 0x49
 8005a3e:	f47f af4d 	bne.w	80058dc <_strtod_l+0xbc>
 8005a42:	493e      	ldr	r1, [pc, #248]	; (8005b3c <_strtod_l+0x31c>)
 8005a44:	a819      	add	r0, sp, #100	; 0x64
 8005a46:	f002 fe2b 	bl	80086a0 <__match>
 8005a4a:	2800      	cmp	r0, #0
 8005a4c:	f43f af46 	beq.w	80058dc <_strtod_l+0xbc>
 8005a50:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005a52:	493b      	ldr	r1, [pc, #236]	; (8005b40 <_strtod_l+0x320>)
 8005a54:	3b01      	subs	r3, #1
 8005a56:	a819      	add	r0, sp, #100	; 0x64
 8005a58:	9319      	str	r3, [sp, #100]	; 0x64
 8005a5a:	f002 fe21 	bl	80086a0 <__match>
 8005a5e:	b910      	cbnz	r0, 8005a66 <_strtod_l+0x246>
 8005a60:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005a62:	3301      	adds	r3, #1
 8005a64:	9319      	str	r3, [sp, #100]	; 0x64
 8005a66:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 8005b44 <_strtod_l+0x324>
 8005a6a:	f04f 0a00 	mov.w	sl, #0
 8005a6e:	e717      	b.n	80058a0 <_strtod_l+0x80>
 8005a70:	2300      	movs	r3, #0
 8005a72:	e774      	b.n	800595e <_strtod_l+0x13e>
 8005a74:	9906      	ldr	r1, [sp, #24]
 8005a76:	2908      	cmp	r1, #8
 8005a78:	bfdd      	ittte	le
 8005a7a:	9907      	ldrle	r1, [sp, #28]
 8005a7c:	fb02 3301 	mlale	r3, r2, r1, r3
 8005a80:	9307      	strle	r3, [sp, #28]
 8005a82:	fb02 3909 	mlagt	r9, r2, r9, r3
 8005a86:	9b06      	ldr	r3, [sp, #24]
 8005a88:	3001      	adds	r0, #1
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	9306      	str	r3, [sp, #24]
 8005a8e:	9019      	str	r0, [sp, #100]	; 0x64
 8005a90:	e76f      	b.n	8005972 <_strtod_l+0x152>
 8005a92:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005a94:	195a      	adds	r2, r3, r5
 8005a96:	9219      	str	r2, [sp, #100]	; 0x64
 8005a98:	9a06      	ldr	r2, [sp, #24]
 8005a9a:	5d5b      	ldrb	r3, [r3, r5]
 8005a9c:	2a00      	cmp	r2, #0
 8005a9e:	d148      	bne.n	8005b32 <_strtod_l+0x312>
 8005aa0:	4610      	mov	r0, r2
 8005aa2:	2b30      	cmp	r3, #48	; 0x30
 8005aa4:	d02a      	beq.n	8005afc <_strtod_l+0x2dc>
 8005aa6:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8005aaa:	2a08      	cmp	r2, #8
 8005aac:	f200 8491 	bhi.w	80063d2 <_strtod_l+0xbb2>
 8005ab0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005ab2:	920a      	str	r2, [sp, #40]	; 0x28
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	2000      	movs	r0, #0
 8005ab8:	4605      	mov	r5, r0
 8005aba:	3b30      	subs	r3, #48	; 0x30
 8005abc:	f100 0101 	add.w	r1, r0, #1
 8005ac0:	d011      	beq.n	8005ae6 <_strtod_l+0x2c6>
 8005ac2:	440a      	add	r2, r1
 8005ac4:	eb00 0c05 	add.w	ip, r0, r5
 8005ac8:	4629      	mov	r1, r5
 8005aca:	260a      	movs	r6, #10
 8005acc:	4561      	cmp	r1, ip
 8005ace:	d11b      	bne.n	8005b08 <_strtod_l+0x2e8>
 8005ad0:	4428      	add	r0, r5
 8005ad2:	2808      	cmp	r0, #8
 8005ad4:	f100 0501 	add.w	r5, r0, #1
 8005ad8:	dc25      	bgt.n	8005b26 <_strtod_l+0x306>
 8005ada:	9807      	ldr	r0, [sp, #28]
 8005adc:	210a      	movs	r1, #10
 8005ade:	fb01 3300 	mla	r3, r1, r0, r3
 8005ae2:	9307      	str	r3, [sp, #28]
 8005ae4:	2100      	movs	r1, #0
 8005ae6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005ae8:	1c58      	adds	r0, r3, #1
 8005aea:	9019      	str	r0, [sp, #100]	; 0x64
 8005aec:	785b      	ldrb	r3, [r3, #1]
 8005aee:	4608      	mov	r0, r1
 8005af0:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8005af4:	2909      	cmp	r1, #9
 8005af6:	d9e0      	bls.n	8005aba <_strtod_l+0x29a>
 8005af8:	2101      	movs	r1, #1
 8005afa:	e74d      	b.n	8005998 <_strtod_l+0x178>
 8005afc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005afe:	1c5a      	adds	r2, r3, #1
 8005b00:	9219      	str	r2, [sp, #100]	; 0x64
 8005b02:	3001      	adds	r0, #1
 8005b04:	785b      	ldrb	r3, [r3, #1]
 8005b06:	e7cc      	b.n	8005aa2 <_strtod_l+0x282>
 8005b08:	3101      	adds	r1, #1
 8005b0a:	f101 3eff 	add.w	lr, r1, #4294967295
 8005b0e:	f1be 0f08 	cmp.w	lr, #8
 8005b12:	dc03      	bgt.n	8005b1c <_strtod_l+0x2fc>
 8005b14:	9f07      	ldr	r7, [sp, #28]
 8005b16:	4377      	muls	r7, r6
 8005b18:	9707      	str	r7, [sp, #28]
 8005b1a:	e7d7      	b.n	8005acc <_strtod_l+0x2ac>
 8005b1c:	2910      	cmp	r1, #16
 8005b1e:	bfd8      	it	le
 8005b20:	fb06 f909 	mulle.w	r9, r6, r9
 8005b24:	e7d2      	b.n	8005acc <_strtod_l+0x2ac>
 8005b26:	2d10      	cmp	r5, #16
 8005b28:	bfdc      	itt	le
 8005b2a:	210a      	movle	r1, #10
 8005b2c:	fb01 3909 	mlale	r9, r1, r9, r3
 8005b30:	e7d8      	b.n	8005ae4 <_strtod_l+0x2c4>
 8005b32:	4602      	mov	r2, r0
 8005b34:	9d06      	ldr	r5, [sp, #24]
 8005b36:	e7db      	b.n	8005af0 <_strtod_l+0x2d0>
 8005b38:	08009bfc 	.word	0x08009bfc
 8005b3c:	08009c55 	.word	0x08009c55
 8005b40:	08009ca7 	.word	0x08009ca7
 8005b44:	7ff00000 	.word	0x7ff00000
 8005b48:	2101      	movs	r1, #1
 8005b4a:	e72b      	b.n	80059a4 <_strtod_l+0x184>
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	9305      	str	r3, [sp, #20]
 8005b50:	1ca3      	adds	r3, r4, #2
 8005b52:	9319      	str	r3, [sp, #100]	; 0x64
 8005b54:	78a3      	ldrb	r3, [r4, #2]
 8005b56:	e736      	b.n	80059c6 <_strtod_l+0x1a6>
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e7f8      	b.n	8005b4e <_strtod_l+0x32e>
 8005b5c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005b5e:	1c5e      	adds	r6, r3, #1
 8005b60:	9619      	str	r6, [sp, #100]	; 0x64
 8005b62:	785b      	ldrb	r3, [r3, #1]
 8005b64:	e734      	b.n	80059d0 <_strtod_l+0x1b0>
 8005b66:	fb0c 3e0e 	mla	lr, ip, lr, r3
 8005b6a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005b6e:	e73d      	b.n	80059ec <_strtod_l+0x1cc>
 8005b70:	9419      	str	r4, [sp, #100]	; 0x64
 8005b72:	f04f 0800 	mov.w	r8, #0
 8005b76:	e74f      	b.n	8005a18 <_strtod_l+0x1f8>
 8005b78:	2b69      	cmp	r3, #105	; 0x69
 8005b7a:	f43f af62 	beq.w	8005a42 <_strtod_l+0x222>
 8005b7e:	2b6e      	cmp	r3, #110	; 0x6e
 8005b80:	f47f aeac 	bne.w	80058dc <_strtod_l+0xbc>
 8005b84:	4988      	ldr	r1, [pc, #544]	; (8005da8 <_strtod_l+0x588>)
 8005b86:	a819      	add	r0, sp, #100	; 0x64
 8005b88:	f002 fd8a 	bl	80086a0 <__match>
 8005b8c:	2800      	cmp	r0, #0
 8005b8e:	f43f aea5 	beq.w	80058dc <_strtod_l+0xbc>
 8005b92:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	2b28      	cmp	r3, #40	; 0x28
 8005b98:	d10e      	bne.n	8005bb8 <_strtod_l+0x398>
 8005b9a:	aa1c      	add	r2, sp, #112	; 0x70
 8005b9c:	4983      	ldr	r1, [pc, #524]	; (8005dac <_strtod_l+0x58c>)
 8005b9e:	a819      	add	r0, sp, #100	; 0x64
 8005ba0:	f002 fd91 	bl	80086c6 <__hexnan>
 8005ba4:	2805      	cmp	r0, #5
 8005ba6:	d107      	bne.n	8005bb8 <_strtod_l+0x398>
 8005ba8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005baa:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 8005bae:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8005bb2:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8005bb6:	e673      	b.n	80058a0 <_strtod_l+0x80>
 8005bb8:	f8df b200 	ldr.w	fp, [pc, #512]	; 8005dbc <_strtod_l+0x59c>
 8005bbc:	e755      	b.n	8005a6a <_strtod_l+0x24a>
 8005bbe:	9b06      	ldr	r3, [sp, #24]
 8005bc0:	9807      	ldr	r0, [sp, #28]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	bf08      	it	eq
 8005bc6:	462b      	moveq	r3, r5
 8005bc8:	2d10      	cmp	r5, #16
 8005bca:	462c      	mov	r4, r5
 8005bcc:	eba8 0802 	sub.w	r8, r8, r2
 8005bd0:	bfa8      	it	ge
 8005bd2:	2410      	movge	r4, #16
 8005bd4:	9306      	str	r3, [sp, #24]
 8005bd6:	f7fa fc95 	bl	8000504 <__aeabi_ui2d>
 8005bda:	2c09      	cmp	r4, #9
 8005bdc:	4682      	mov	sl, r0
 8005bde:	468b      	mov	fp, r1
 8005be0:	dd13      	ble.n	8005c0a <_strtod_l+0x3ea>
 8005be2:	4b73      	ldr	r3, [pc, #460]	; (8005db0 <_strtod_l+0x590>)
 8005be4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005be8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005bec:	f7fa fd00 	bl	80005f0 <__aeabi_dmul>
 8005bf0:	4606      	mov	r6, r0
 8005bf2:	4648      	mov	r0, r9
 8005bf4:	460f      	mov	r7, r1
 8005bf6:	f7fa fc85 	bl	8000504 <__aeabi_ui2d>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	460b      	mov	r3, r1
 8005bfe:	4630      	mov	r0, r6
 8005c00:	4639      	mov	r1, r7
 8005c02:	f7fa fb43 	bl	800028c <__adddf3>
 8005c06:	4682      	mov	sl, r0
 8005c08:	468b      	mov	fp, r1
 8005c0a:	2d0f      	cmp	r5, #15
 8005c0c:	dc36      	bgt.n	8005c7c <_strtod_l+0x45c>
 8005c0e:	f1b8 0f00 	cmp.w	r8, #0
 8005c12:	f43f ae45 	beq.w	80058a0 <_strtod_l+0x80>
 8005c16:	dd24      	ble.n	8005c62 <_strtod_l+0x442>
 8005c18:	f1b8 0f16 	cmp.w	r8, #22
 8005c1c:	dc0b      	bgt.n	8005c36 <_strtod_l+0x416>
 8005c1e:	4d64      	ldr	r5, [pc, #400]	; (8005db0 <_strtod_l+0x590>)
 8005c20:	eb05 08c8 	add.w	r8, r5, r8, lsl #3
 8005c24:	e9d8 0100 	ldrd	r0, r1, [r8]
 8005c28:	4652      	mov	r2, sl
 8005c2a:	465b      	mov	r3, fp
 8005c2c:	f7fa fce0 	bl	80005f0 <__aeabi_dmul>
 8005c30:	4682      	mov	sl, r0
 8005c32:	468b      	mov	fp, r1
 8005c34:	e634      	b.n	80058a0 <_strtod_l+0x80>
 8005c36:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8005c3a:	4598      	cmp	r8, r3
 8005c3c:	dc1e      	bgt.n	8005c7c <_strtod_l+0x45c>
 8005c3e:	4c5c      	ldr	r4, [pc, #368]	; (8005db0 <_strtod_l+0x590>)
 8005c40:	f1c5 050f 	rsb	r5, r5, #15
 8005c44:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005c48:	eba8 0505 	sub.w	r5, r8, r5
 8005c4c:	4652      	mov	r2, sl
 8005c4e:	465b      	mov	r3, fp
 8005c50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c54:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005c58:	f7fa fcca 	bl	80005f0 <__aeabi_dmul>
 8005c5c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005c60:	e7e4      	b.n	8005c2c <_strtod_l+0x40c>
 8005c62:	f118 0f16 	cmn.w	r8, #22
 8005c66:	db09      	blt.n	8005c7c <_strtod_l+0x45c>
 8005c68:	4d51      	ldr	r5, [pc, #324]	; (8005db0 <_strtod_l+0x590>)
 8005c6a:	eba5 08c8 	sub.w	r8, r5, r8, lsl #3
 8005c6e:	e9d8 2300 	ldrd	r2, r3, [r8]
 8005c72:	4650      	mov	r0, sl
 8005c74:	4659      	mov	r1, fp
 8005c76:	f7fa fde5 	bl	8000844 <__aeabi_ddiv>
 8005c7a:	e7d9      	b.n	8005c30 <_strtod_l+0x410>
 8005c7c:	1b2c      	subs	r4, r5, r4
 8005c7e:	4444      	add	r4, r8
 8005c80:	2c00      	cmp	r4, #0
 8005c82:	dd70      	ble.n	8005d66 <_strtod_l+0x546>
 8005c84:	f014 030f 	ands.w	r3, r4, #15
 8005c88:	d00a      	beq.n	8005ca0 <_strtod_l+0x480>
 8005c8a:	4949      	ldr	r1, [pc, #292]	; (8005db0 <_strtod_l+0x590>)
 8005c8c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005c90:	4652      	mov	r2, sl
 8005c92:	465b      	mov	r3, fp
 8005c94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c98:	f7fa fcaa 	bl	80005f0 <__aeabi_dmul>
 8005c9c:	4682      	mov	sl, r0
 8005c9e:	468b      	mov	fp, r1
 8005ca0:	f034 040f 	bics.w	r4, r4, #15
 8005ca4:	d050      	beq.n	8005d48 <_strtod_l+0x528>
 8005ca6:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
 8005caa:	dd23      	ble.n	8005cf4 <_strtod_l+0x4d4>
 8005cac:	2400      	movs	r4, #0
 8005cae:	4625      	mov	r5, r4
 8005cb0:	9407      	str	r4, [sp, #28]
 8005cb2:	9406      	str	r4, [sp, #24]
 8005cb4:	9a04      	ldr	r2, [sp, #16]
 8005cb6:	f8df b108 	ldr.w	fp, [pc, #264]	; 8005dc0 <_strtod_l+0x5a0>
 8005cba:	2322      	movs	r3, #34	; 0x22
 8005cbc:	6013      	str	r3, [r2, #0]
 8005cbe:	f04f 0a00 	mov.w	sl, #0
 8005cc2:	9b07      	ldr	r3, [sp, #28]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	f43f adeb 	beq.w	80058a0 <_strtod_l+0x80>
 8005cca:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005ccc:	9804      	ldr	r0, [sp, #16]
 8005cce:	f003 f805 	bl	8008cdc <_Bfree>
 8005cd2:	9906      	ldr	r1, [sp, #24]
 8005cd4:	9804      	ldr	r0, [sp, #16]
 8005cd6:	f003 f801 	bl	8008cdc <_Bfree>
 8005cda:	4629      	mov	r1, r5
 8005cdc:	9804      	ldr	r0, [sp, #16]
 8005cde:	f002 fffd 	bl	8008cdc <_Bfree>
 8005ce2:	9907      	ldr	r1, [sp, #28]
 8005ce4:	9804      	ldr	r0, [sp, #16]
 8005ce6:	f002 fff9 	bl	8008cdc <_Bfree>
 8005cea:	4621      	mov	r1, r4
 8005cec:	9804      	ldr	r0, [sp, #16]
 8005cee:	f002 fff5 	bl	8008cdc <_Bfree>
 8005cf2:	e5d5      	b.n	80058a0 <_strtod_l+0x80>
 8005cf4:	4e2f      	ldr	r6, [pc, #188]	; (8005db4 <_strtod_l+0x594>)
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	1124      	asrs	r4, r4, #4
 8005cfa:	4650      	mov	r0, sl
 8005cfc:	4659      	mov	r1, fp
 8005cfe:	4699      	mov	r9, r3
 8005d00:	4637      	mov	r7, r6
 8005d02:	2c01      	cmp	r4, #1
 8005d04:	dc23      	bgt.n	8005d4e <_strtod_l+0x52e>
 8005d06:	b10b      	cbz	r3, 8005d0c <_strtod_l+0x4ec>
 8005d08:	4682      	mov	sl, r0
 8005d0a:	468b      	mov	fp, r1
 8005d0c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8005d10:	eb07 07c9 	add.w	r7, r7, r9, lsl #3
 8005d14:	4652      	mov	r2, sl
 8005d16:	465b      	mov	r3, fp
 8005d18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d1c:	f7fa fc68 	bl	80005f0 <__aeabi_dmul>
 8005d20:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005d24:	468b      	mov	fp, r1
 8005d26:	460a      	mov	r2, r1
 8005d28:	0d1b      	lsrs	r3, r3, #20
 8005d2a:	4923      	ldr	r1, [pc, #140]	; (8005db8 <_strtod_l+0x598>)
 8005d2c:	051b      	lsls	r3, r3, #20
 8005d2e:	428b      	cmp	r3, r1
 8005d30:	4682      	mov	sl, r0
 8005d32:	d8bb      	bhi.n	8005cac <_strtod_l+0x48c>
 8005d34:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005d38:	428b      	cmp	r3, r1
 8005d3a:	bf86      	itte	hi
 8005d3c:	f8df b084 	ldrhi.w	fp, [pc, #132]	; 8005dc4 <_strtod_l+0x5a4>
 8005d40:	f04f 3aff 	movhi.w	sl, #4294967295
 8005d44:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8005d48:	2300      	movs	r3, #0
 8005d4a:	9305      	str	r3, [sp, #20]
 8005d4c:	e06d      	b.n	8005e2a <_strtod_l+0x60a>
 8005d4e:	07e2      	lsls	r2, r4, #31
 8005d50:	d504      	bpl.n	8005d5c <_strtod_l+0x53c>
 8005d52:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005d56:	f7fa fc4b 	bl	80005f0 <__aeabi_dmul>
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	f109 0901 	add.w	r9, r9, #1
 8005d60:	1064      	asrs	r4, r4, #1
 8005d62:	3608      	adds	r6, #8
 8005d64:	e7cd      	b.n	8005d02 <_strtod_l+0x4e2>
 8005d66:	d0ef      	beq.n	8005d48 <_strtod_l+0x528>
 8005d68:	4264      	negs	r4, r4
 8005d6a:	f014 020f 	ands.w	r2, r4, #15
 8005d6e:	d00a      	beq.n	8005d86 <_strtod_l+0x566>
 8005d70:	4b0f      	ldr	r3, [pc, #60]	; (8005db0 <_strtod_l+0x590>)
 8005d72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d76:	4650      	mov	r0, sl
 8005d78:	4659      	mov	r1, fp
 8005d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d7e:	f7fa fd61 	bl	8000844 <__aeabi_ddiv>
 8005d82:	4682      	mov	sl, r0
 8005d84:	468b      	mov	fp, r1
 8005d86:	1124      	asrs	r4, r4, #4
 8005d88:	d0de      	beq.n	8005d48 <_strtod_l+0x528>
 8005d8a:	2c1f      	cmp	r4, #31
 8005d8c:	dd1c      	ble.n	8005dc8 <_strtod_l+0x5a8>
 8005d8e:	2400      	movs	r4, #0
 8005d90:	4625      	mov	r5, r4
 8005d92:	9407      	str	r4, [sp, #28]
 8005d94:	9406      	str	r4, [sp, #24]
 8005d96:	9a04      	ldr	r2, [sp, #16]
 8005d98:	2322      	movs	r3, #34	; 0x22
 8005d9a:	f04f 0a00 	mov.w	sl, #0
 8005d9e:	f04f 0b00 	mov.w	fp, #0
 8005da2:	6013      	str	r3, [r2, #0]
 8005da4:	e78d      	b.n	8005cc2 <_strtod_l+0x4a2>
 8005da6:	bf00      	nop
 8005da8:	08009c5d 	.word	0x08009c5d
 8005dac:	08009c10 	.word	0x08009c10
 8005db0:	08009ce8 	.word	0x08009ce8
 8005db4:	08009cc0 	.word	0x08009cc0
 8005db8:	7ca00000 	.word	0x7ca00000
 8005dbc:	fff80000 	.word	0xfff80000
 8005dc0:	7ff00000 	.word	0x7ff00000
 8005dc4:	7fefffff 	.word	0x7fefffff
 8005dc8:	f014 0310 	ands.w	r3, r4, #16
 8005dcc:	bf18      	it	ne
 8005dce:	236a      	movne	r3, #106	; 0x6a
 8005dd0:	4ea0      	ldr	r6, [pc, #640]	; (8006054 <_strtod_l+0x834>)
 8005dd2:	9305      	str	r3, [sp, #20]
 8005dd4:	4650      	mov	r0, sl
 8005dd6:	4659      	mov	r1, fp
 8005dd8:	2300      	movs	r3, #0
 8005dda:	2c00      	cmp	r4, #0
 8005ddc:	f300 8106 	bgt.w	8005fec <_strtod_l+0x7cc>
 8005de0:	b10b      	cbz	r3, 8005de6 <_strtod_l+0x5c6>
 8005de2:	4682      	mov	sl, r0
 8005de4:	468b      	mov	fp, r1
 8005de6:	9b05      	ldr	r3, [sp, #20]
 8005de8:	b1bb      	cbz	r3, 8005e1a <_strtod_l+0x5fa>
 8005dea:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8005dee:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	4659      	mov	r1, fp
 8005df6:	dd10      	ble.n	8005e1a <_strtod_l+0x5fa>
 8005df8:	2b1f      	cmp	r3, #31
 8005dfa:	f340 8101 	ble.w	8006000 <_strtod_l+0x7e0>
 8005dfe:	2b34      	cmp	r3, #52	; 0x34
 8005e00:	bfde      	ittt	le
 8005e02:	3b20      	suble	r3, #32
 8005e04:	f04f 32ff 	movle.w	r2, #4294967295
 8005e08:	fa02 f303 	lslle.w	r3, r2, r3
 8005e0c:	f04f 0a00 	mov.w	sl, #0
 8005e10:	bfcc      	ite	gt
 8005e12:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8005e16:	ea03 0b01 	andle.w	fp, r3, r1
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	4650      	mov	r0, sl
 8005e20:	4659      	mov	r1, fp
 8005e22:	f7fa fe4d 	bl	8000ac0 <__aeabi_dcmpeq>
 8005e26:	2800      	cmp	r0, #0
 8005e28:	d1b1      	bne.n	8005d8e <_strtod_l+0x56e>
 8005e2a:	9b07      	ldr	r3, [sp, #28]
 8005e2c:	9300      	str	r3, [sp, #0]
 8005e2e:	9a06      	ldr	r2, [sp, #24]
 8005e30:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005e32:	9804      	ldr	r0, [sp, #16]
 8005e34:	462b      	mov	r3, r5
 8005e36:	f002 ffa3 	bl	8008d80 <__s2b>
 8005e3a:	9007      	str	r0, [sp, #28]
 8005e3c:	2800      	cmp	r0, #0
 8005e3e:	f43f af35 	beq.w	8005cac <_strtod_l+0x48c>
 8005e42:	f1b8 0f00 	cmp.w	r8, #0
 8005e46:	f1c8 0300 	rsb	r3, r8, #0
 8005e4a:	bfa8      	it	ge
 8005e4c:	2300      	movge	r3, #0
 8005e4e:	930e      	str	r3, [sp, #56]	; 0x38
 8005e50:	2400      	movs	r4, #0
 8005e52:	ea28 73e8 	bic.w	r3, r8, r8, asr #31
 8005e56:	930f      	str	r3, [sp, #60]	; 0x3c
 8005e58:	4625      	mov	r5, r4
 8005e5a:	9b07      	ldr	r3, [sp, #28]
 8005e5c:	9804      	ldr	r0, [sp, #16]
 8005e5e:	6859      	ldr	r1, [r3, #4]
 8005e60:	f002 ff08 	bl	8008c74 <_Balloc>
 8005e64:	9006      	str	r0, [sp, #24]
 8005e66:	2800      	cmp	r0, #0
 8005e68:	f43f af24 	beq.w	8005cb4 <_strtod_l+0x494>
 8005e6c:	9b07      	ldr	r3, [sp, #28]
 8005e6e:	691a      	ldr	r2, [r3, #16]
 8005e70:	3202      	adds	r2, #2
 8005e72:	f103 010c 	add.w	r1, r3, #12
 8005e76:	0092      	lsls	r2, r2, #2
 8005e78:	300c      	adds	r0, #12
 8005e7a:	f7ff fc4b 	bl	8005714 <memcpy>
 8005e7e:	aa1c      	add	r2, sp, #112	; 0x70
 8005e80:	a91b      	add	r1, sp, #108	; 0x6c
 8005e82:	ec4b ab10 	vmov	d0, sl, fp
 8005e86:	9804      	ldr	r0, [sp, #16]
 8005e88:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8005e8c:	f003 fa28 	bl	80092e0 <__d2b>
 8005e90:	901a      	str	r0, [sp, #104]	; 0x68
 8005e92:	2800      	cmp	r0, #0
 8005e94:	f43f af0e 	beq.w	8005cb4 <_strtod_l+0x494>
 8005e98:	2101      	movs	r1, #1
 8005e9a:	9804      	ldr	r0, [sp, #16]
 8005e9c:	f002 fffc 	bl	8008e98 <__i2b>
 8005ea0:	4605      	mov	r5, r0
 8005ea2:	2800      	cmp	r0, #0
 8005ea4:	f43f af06 	beq.w	8005cb4 <_strtod_l+0x494>
 8005ea8:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8005eaa:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005eac:	2e00      	cmp	r6, #0
 8005eae:	bfab      	itete	ge
 8005eb0:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8005eb2:	9b0f      	ldrlt	r3, [sp, #60]	; 0x3c
 8005eb4:	9f0f      	ldrge	r7, [sp, #60]	; 0x3c
 8005eb6:	f8dd 8038 	ldrlt.w	r8, [sp, #56]	; 0x38
 8005eba:	bfac      	ite	ge
 8005ebc:	eb03 0806 	addge.w	r8, r3, r6
 8005ec0:	1b9f      	sublt	r7, r3, r6
 8005ec2:	9b05      	ldr	r3, [sp, #20]
 8005ec4:	1af6      	subs	r6, r6, r3
 8005ec6:	4416      	add	r6, r2
 8005ec8:	4b63      	ldr	r3, [pc, #396]	; (8006058 <_strtod_l+0x838>)
 8005eca:	3e01      	subs	r6, #1
 8005ecc:	429e      	cmp	r6, r3
 8005ece:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005ed2:	f280 80a8 	bge.w	8006026 <_strtod_l+0x806>
 8005ed6:	1b9b      	subs	r3, r3, r6
 8005ed8:	2b1f      	cmp	r3, #31
 8005eda:	eba2 0203 	sub.w	r2, r2, r3
 8005ede:	f04f 0901 	mov.w	r9, #1
 8005ee2:	f300 8094 	bgt.w	800600e <_strtod_l+0x7ee>
 8005ee6:	fa09 f303 	lsl.w	r3, r9, r3
 8005eea:	9314      	str	r3, [sp, #80]	; 0x50
 8005eec:	2600      	movs	r6, #0
 8005eee:	eb08 0902 	add.w	r9, r8, r2
 8005ef2:	9b05      	ldr	r3, [sp, #20]
 8005ef4:	45c8      	cmp	r8, r9
 8005ef6:	4417      	add	r7, r2
 8005ef8:	441f      	add	r7, r3
 8005efa:	4643      	mov	r3, r8
 8005efc:	bfa8      	it	ge
 8005efe:	464b      	movge	r3, r9
 8005f00:	42bb      	cmp	r3, r7
 8005f02:	bfa8      	it	ge
 8005f04:	463b      	movge	r3, r7
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	bfc2      	ittt	gt
 8005f0a:	eba9 0903 	subgt.w	r9, r9, r3
 8005f0e:	1aff      	subgt	r7, r7, r3
 8005f10:	eba8 0803 	subgt.w	r8, r8, r3
 8005f14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f16:	b1bb      	cbz	r3, 8005f48 <_strtod_l+0x728>
 8005f18:	4629      	mov	r1, r5
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	9804      	ldr	r0, [sp, #16]
 8005f1e:	f003 f851 	bl	8008fc4 <__pow5mult>
 8005f22:	4605      	mov	r5, r0
 8005f24:	2800      	cmp	r0, #0
 8005f26:	f43f aec5 	beq.w	8005cb4 <_strtod_l+0x494>
 8005f2a:	4601      	mov	r1, r0
 8005f2c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005f2e:	9804      	ldr	r0, [sp, #16]
 8005f30:	f002 ffbb 	bl	8008eaa <__multiply>
 8005f34:	9008      	str	r0, [sp, #32]
 8005f36:	2800      	cmp	r0, #0
 8005f38:	f43f aebc 	beq.w	8005cb4 <_strtod_l+0x494>
 8005f3c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005f3e:	9804      	ldr	r0, [sp, #16]
 8005f40:	f002 fecc 	bl	8008cdc <_Bfree>
 8005f44:	9b08      	ldr	r3, [sp, #32]
 8005f46:	931a      	str	r3, [sp, #104]	; 0x68
 8005f48:	f1b9 0f00 	cmp.w	r9, #0
 8005f4c:	dc6f      	bgt.n	800602e <_strtod_l+0x80e>
 8005f4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d175      	bne.n	8006040 <_strtod_l+0x820>
 8005f54:	2f00      	cmp	r7, #0
 8005f56:	dd08      	ble.n	8005f6a <_strtod_l+0x74a>
 8005f58:	463a      	mov	r2, r7
 8005f5a:	9906      	ldr	r1, [sp, #24]
 8005f5c:	9804      	ldr	r0, [sp, #16]
 8005f5e:	f003 f87f 	bl	8009060 <__lshift>
 8005f62:	9006      	str	r0, [sp, #24]
 8005f64:	2800      	cmp	r0, #0
 8005f66:	f43f aea5 	beq.w	8005cb4 <_strtod_l+0x494>
 8005f6a:	f1b8 0f00 	cmp.w	r8, #0
 8005f6e:	dd08      	ble.n	8005f82 <_strtod_l+0x762>
 8005f70:	4629      	mov	r1, r5
 8005f72:	4642      	mov	r2, r8
 8005f74:	9804      	ldr	r0, [sp, #16]
 8005f76:	f003 f873 	bl	8009060 <__lshift>
 8005f7a:	4605      	mov	r5, r0
 8005f7c:	2800      	cmp	r0, #0
 8005f7e:	f43f ae99 	beq.w	8005cb4 <_strtod_l+0x494>
 8005f82:	9a06      	ldr	r2, [sp, #24]
 8005f84:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005f86:	9804      	ldr	r0, [sp, #16]
 8005f88:	f003 f8d5 	bl	8009136 <__mdiff>
 8005f8c:	4604      	mov	r4, r0
 8005f8e:	2800      	cmp	r0, #0
 8005f90:	f43f ae90 	beq.w	8005cb4 <_strtod_l+0x494>
 8005f94:	68c3      	ldr	r3, [r0, #12]
 8005f96:	9308      	str	r3, [sp, #32]
 8005f98:	2300      	movs	r3, #0
 8005f9a:	60c3      	str	r3, [r0, #12]
 8005f9c:	4629      	mov	r1, r5
 8005f9e:	f003 f8b0 	bl	8009102 <__mcmp>
 8005fa2:	2800      	cmp	r0, #0
 8005fa4:	da5a      	bge.n	800605c <_strtod_l+0x83c>
 8005fa6:	9b08      	ldr	r3, [sp, #32]
 8005fa8:	b9e3      	cbnz	r3, 8005fe4 <_strtod_l+0x7c4>
 8005faa:	f1ba 0f00 	cmp.w	sl, #0
 8005fae:	d119      	bne.n	8005fe4 <_strtod_l+0x7c4>
 8005fb0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005fb4:	b9b3      	cbnz	r3, 8005fe4 <_strtod_l+0x7c4>
 8005fb6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005fba:	0d1b      	lsrs	r3, r3, #20
 8005fbc:	051b      	lsls	r3, r3, #20
 8005fbe:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005fc2:	d90f      	bls.n	8005fe4 <_strtod_l+0x7c4>
 8005fc4:	6963      	ldr	r3, [r4, #20]
 8005fc6:	b913      	cbnz	r3, 8005fce <_strtod_l+0x7ae>
 8005fc8:	6923      	ldr	r3, [r4, #16]
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	dd0a      	ble.n	8005fe4 <_strtod_l+0x7c4>
 8005fce:	4621      	mov	r1, r4
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	9804      	ldr	r0, [sp, #16]
 8005fd4:	f003 f844 	bl	8009060 <__lshift>
 8005fd8:	4629      	mov	r1, r5
 8005fda:	4604      	mov	r4, r0
 8005fdc:	f003 f891 	bl	8009102 <__mcmp>
 8005fe0:	2800      	cmp	r0, #0
 8005fe2:	dc6c      	bgt.n	80060be <_strtod_l+0x89e>
 8005fe4:	9b05      	ldr	r3, [sp, #20]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d176      	bne.n	80060d8 <_strtod_l+0x8b8>
 8005fea:	e66e      	b.n	8005cca <_strtod_l+0x4aa>
 8005fec:	07e2      	lsls	r2, r4, #31
 8005fee:	d504      	bpl.n	8005ffa <_strtod_l+0x7da>
 8005ff0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005ff4:	f7fa fafc 	bl	80005f0 <__aeabi_dmul>
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	1064      	asrs	r4, r4, #1
 8005ffc:	3608      	adds	r6, #8
 8005ffe:	e6ec      	b.n	8005dda <_strtod_l+0x5ba>
 8006000:	f04f 32ff 	mov.w	r2, #4294967295
 8006004:	fa02 f303 	lsl.w	r3, r2, r3
 8006008:	ea03 0a0a 	and.w	sl, r3, sl
 800600c:	e705      	b.n	8005e1a <_strtod_l+0x5fa>
 800600e:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8006012:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8006016:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800601a:	36e2      	adds	r6, #226	; 0xe2
 800601c:	fa09 f606 	lsl.w	r6, r9, r6
 8006020:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
 8006024:	e763      	b.n	8005eee <_strtod_l+0x6ce>
 8006026:	2301      	movs	r3, #1
 8006028:	2600      	movs	r6, #0
 800602a:	9314      	str	r3, [sp, #80]	; 0x50
 800602c:	e75f      	b.n	8005eee <_strtod_l+0x6ce>
 800602e:	464a      	mov	r2, r9
 8006030:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006032:	9804      	ldr	r0, [sp, #16]
 8006034:	f003 f814 	bl	8009060 <__lshift>
 8006038:	901a      	str	r0, [sp, #104]	; 0x68
 800603a:	2800      	cmp	r0, #0
 800603c:	d187      	bne.n	8005f4e <_strtod_l+0x72e>
 800603e:	e639      	b.n	8005cb4 <_strtod_l+0x494>
 8006040:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006042:	9906      	ldr	r1, [sp, #24]
 8006044:	9804      	ldr	r0, [sp, #16]
 8006046:	f002 ffbd 	bl	8008fc4 <__pow5mult>
 800604a:	9006      	str	r0, [sp, #24]
 800604c:	2800      	cmp	r0, #0
 800604e:	d181      	bne.n	8005f54 <_strtod_l+0x734>
 8006050:	e630      	b.n	8005cb4 <_strtod_l+0x494>
 8006052:	bf00      	nop
 8006054:	08009c28 	.word	0x08009c28
 8006058:	fffffc02 	.word	0xfffffc02
 800605c:	f040 8086 	bne.w	800616c <_strtod_l+0x94c>
 8006060:	9a08      	ldr	r2, [sp, #32]
 8006062:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006066:	b332      	cbz	r2, 80060b6 <_strtod_l+0x896>
 8006068:	4aad      	ldr	r2, [pc, #692]	; (8006320 <_strtod_l+0xb00>)
 800606a:	4293      	cmp	r3, r2
 800606c:	4659      	mov	r1, fp
 800606e:	d152      	bne.n	8006116 <_strtod_l+0x8f6>
 8006070:	9b05      	ldr	r3, [sp, #20]
 8006072:	4650      	mov	r0, sl
 8006074:	b1d3      	cbz	r3, 80060ac <_strtod_l+0x88c>
 8006076:	4aab      	ldr	r2, [pc, #684]	; (8006324 <_strtod_l+0xb04>)
 8006078:	400a      	ands	r2, r1
 800607a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800607e:	f04f 37ff 	mov.w	r7, #4294967295
 8006082:	d816      	bhi.n	80060b2 <_strtod_l+0x892>
 8006084:	0d12      	lsrs	r2, r2, #20
 8006086:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800608a:	fa07 f303 	lsl.w	r3, r7, r3
 800608e:	4283      	cmp	r3, r0
 8006090:	d141      	bne.n	8006116 <_strtod_l+0x8f6>
 8006092:	4aa5      	ldr	r2, [pc, #660]	; (8006328 <_strtod_l+0xb08>)
 8006094:	4291      	cmp	r1, r2
 8006096:	d102      	bne.n	800609e <_strtod_l+0x87e>
 8006098:	3301      	adds	r3, #1
 800609a:	f43f ae0b 	beq.w	8005cb4 <_strtod_l+0x494>
 800609e:	4ba1      	ldr	r3, [pc, #644]	; (8006324 <_strtod_l+0xb04>)
 80060a0:	400b      	ands	r3, r1
 80060a2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80060a6:	f04f 0a00 	mov.w	sl, #0
 80060aa:	e79b      	b.n	8005fe4 <_strtod_l+0x7c4>
 80060ac:	f04f 33ff 	mov.w	r3, #4294967295
 80060b0:	e7ed      	b.n	800608e <_strtod_l+0x86e>
 80060b2:	463b      	mov	r3, r7
 80060b4:	e7eb      	b.n	800608e <_strtod_l+0x86e>
 80060b6:	bb73      	cbnz	r3, 8006116 <_strtod_l+0x8f6>
 80060b8:	f1ba 0f00 	cmp.w	sl, #0
 80060bc:	d12b      	bne.n	8006116 <_strtod_l+0x8f6>
 80060be:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80060c2:	9a05      	ldr	r2, [sp, #20]
 80060c4:	0d1b      	lsrs	r3, r3, #20
 80060c6:	051b      	lsls	r3, r3, #20
 80060c8:	b1e2      	cbz	r2, 8006104 <_strtod_l+0x8e4>
 80060ca:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80060ce:	dc19      	bgt.n	8006104 <_strtod_l+0x8e4>
 80060d0:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
 80060d4:	f77f ae5f 	ble.w	8005d96 <_strtod_l+0x576>
 80060d8:	4b94      	ldr	r3, [pc, #592]	; (800632c <_strtod_l+0xb0c>)
 80060da:	930d      	str	r3, [sp, #52]	; 0x34
 80060dc:	2300      	movs	r3, #0
 80060de:	930c      	str	r3, [sp, #48]	; 0x30
 80060e0:	4650      	mov	r0, sl
 80060e2:	4659      	mov	r1, fp
 80060e4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80060e8:	f7fa fa82 	bl	80005f0 <__aeabi_dmul>
 80060ec:	4682      	mov	sl, r0
 80060ee:	468b      	mov	fp, r1
 80060f0:	2900      	cmp	r1, #0
 80060f2:	f47f adea 	bne.w	8005cca <_strtod_l+0x4aa>
 80060f6:	2800      	cmp	r0, #0
 80060f8:	f47f ade7 	bne.w	8005cca <_strtod_l+0x4aa>
 80060fc:	9a04      	ldr	r2, [sp, #16]
 80060fe:	2322      	movs	r3, #34	; 0x22
 8006100:	6013      	str	r3, [r2, #0]
 8006102:	e5e2      	b.n	8005cca <_strtod_l+0x4aa>
 8006104:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006108:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800610c:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006110:	f04f 3aff 	mov.w	sl, #4294967295
 8006114:	e766      	b.n	8005fe4 <_strtod_l+0x7c4>
 8006116:	b19e      	cbz	r6, 8006140 <_strtod_l+0x920>
 8006118:	ea16 0f0b 	tst.w	r6, fp
 800611c:	f43f af62 	beq.w	8005fe4 <_strtod_l+0x7c4>
 8006120:	9b08      	ldr	r3, [sp, #32]
 8006122:	9a05      	ldr	r2, [sp, #20]
 8006124:	4650      	mov	r0, sl
 8006126:	4659      	mov	r1, fp
 8006128:	b173      	cbz	r3, 8006148 <_strtod_l+0x928>
 800612a:	f7ff fb5b 	bl	80057e4 <sulp>
 800612e:	4602      	mov	r2, r0
 8006130:	460b      	mov	r3, r1
 8006132:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006136:	f7fa f8a9 	bl	800028c <__adddf3>
 800613a:	4682      	mov	sl, r0
 800613c:	468b      	mov	fp, r1
 800613e:	e751      	b.n	8005fe4 <_strtod_l+0x7c4>
 8006140:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006142:	ea13 0f0a 	tst.w	r3, sl
 8006146:	e7e9      	b.n	800611c <_strtod_l+0x8fc>
 8006148:	f7ff fb4c 	bl	80057e4 <sulp>
 800614c:	4602      	mov	r2, r0
 800614e:	460b      	mov	r3, r1
 8006150:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006154:	f7fa f898 	bl	8000288 <__aeabi_dsub>
 8006158:	2200      	movs	r2, #0
 800615a:	2300      	movs	r3, #0
 800615c:	4682      	mov	sl, r0
 800615e:	468b      	mov	fp, r1
 8006160:	f7fa fcae 	bl	8000ac0 <__aeabi_dcmpeq>
 8006164:	2800      	cmp	r0, #0
 8006166:	f47f ae16 	bne.w	8005d96 <_strtod_l+0x576>
 800616a:	e73b      	b.n	8005fe4 <_strtod_l+0x7c4>
 800616c:	4629      	mov	r1, r5
 800616e:	4620      	mov	r0, r4
 8006170:	f003 f905 	bl	800937e <__ratio>
 8006174:	ec57 6b10 	vmov	r6, r7, d0
 8006178:	2200      	movs	r2, #0
 800617a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800617e:	ee10 0a10 	vmov	r0, s0
 8006182:	4639      	mov	r1, r7
 8006184:	f7fa fcb0 	bl	8000ae8 <__aeabi_dcmple>
 8006188:	2800      	cmp	r0, #0
 800618a:	d074      	beq.n	8006276 <_strtod_l+0xa56>
 800618c:	9b08      	ldr	r3, [sp, #32]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d046      	beq.n	8006220 <_strtod_l+0xa00>
 8006192:	f8df 919c 	ldr.w	r9, [pc, #412]	; 8006330 <_strtod_l+0xb10>
 8006196:	f04f 0800 	mov.w	r8, #0
 800619a:	4f65      	ldr	r7, [pc, #404]	; (8006330 <_strtod_l+0xb10>)
 800619c:	2600      	movs	r6, #0
 800619e:	4b61      	ldr	r3, [pc, #388]	; (8006324 <_strtod_l+0xb04>)
 80061a0:	ea0b 0303 	and.w	r3, fp, r3
 80061a4:	9314      	str	r3, [sp, #80]	; 0x50
 80061a6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80061a8:	4b62      	ldr	r3, [pc, #392]	; (8006334 <_strtod_l+0xb14>)
 80061aa:	429a      	cmp	r2, r3
 80061ac:	f040 80ca 	bne.w	8006344 <_strtod_l+0xb24>
 80061b0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80061b4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80061b8:	ec4b ab10 	vmov	d0, sl, fp
 80061bc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80061c0:	f003 f818 	bl	80091f4 <__ulp>
 80061c4:	4640      	mov	r0, r8
 80061c6:	ec53 2b10 	vmov	r2, r3, d0
 80061ca:	4649      	mov	r1, r9
 80061cc:	f7fa fa10 	bl	80005f0 <__aeabi_dmul>
 80061d0:	4652      	mov	r2, sl
 80061d2:	465b      	mov	r3, fp
 80061d4:	f7fa f85a 	bl	800028c <__adddf3>
 80061d8:	4a52      	ldr	r2, [pc, #328]	; (8006324 <_strtod_l+0xb04>)
 80061da:	4b57      	ldr	r3, [pc, #348]	; (8006338 <_strtod_l+0xb18>)
 80061dc:	400a      	ands	r2, r1
 80061de:	429a      	cmp	r2, r3
 80061e0:	4682      	mov	sl, r0
 80061e2:	d95c      	bls.n	800629e <_strtod_l+0xa7e>
 80061e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80061e6:	f103 7354 	add.w	r3, r3, #55574528	; 0x3500000
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d103      	bne.n	80061f6 <_strtod_l+0x9d6>
 80061ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80061f0:	3301      	adds	r3, #1
 80061f2:	f43f ad5f 	beq.w	8005cb4 <_strtod_l+0x494>
 80061f6:	f8df b130 	ldr.w	fp, [pc, #304]	; 8006328 <_strtod_l+0xb08>
 80061fa:	f04f 3aff 	mov.w	sl, #4294967295
 80061fe:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006200:	9804      	ldr	r0, [sp, #16]
 8006202:	f002 fd6b 	bl	8008cdc <_Bfree>
 8006206:	9906      	ldr	r1, [sp, #24]
 8006208:	9804      	ldr	r0, [sp, #16]
 800620a:	f002 fd67 	bl	8008cdc <_Bfree>
 800620e:	4629      	mov	r1, r5
 8006210:	9804      	ldr	r0, [sp, #16]
 8006212:	f002 fd63 	bl	8008cdc <_Bfree>
 8006216:	4621      	mov	r1, r4
 8006218:	9804      	ldr	r0, [sp, #16]
 800621a:	f002 fd5f 	bl	8008cdc <_Bfree>
 800621e:	e61c      	b.n	8005e5a <_strtod_l+0x63a>
 8006220:	f1ba 0f00 	cmp.w	sl, #0
 8006224:	d118      	bne.n	8006258 <_strtod_l+0xa38>
 8006226:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800622a:	b9e3      	cbnz	r3, 8006266 <_strtod_l+0xa46>
 800622c:	2200      	movs	r2, #0
 800622e:	4b40      	ldr	r3, [pc, #256]	; (8006330 <_strtod_l+0xb10>)
 8006230:	4630      	mov	r0, r6
 8006232:	4639      	mov	r1, r7
 8006234:	f7fa fc4e 	bl	8000ad4 <__aeabi_dcmplt>
 8006238:	b9d0      	cbnz	r0, 8006270 <_strtod_l+0xa50>
 800623a:	4630      	mov	r0, r6
 800623c:	4639      	mov	r1, r7
 800623e:	2200      	movs	r2, #0
 8006240:	4b3e      	ldr	r3, [pc, #248]	; (800633c <_strtod_l+0xb1c>)
 8006242:	f7fa f9d5 	bl	80005f0 <__aeabi_dmul>
 8006246:	4606      	mov	r6, r0
 8006248:	460f      	mov	r7, r1
 800624a:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800624e:	9616      	str	r6, [sp, #88]	; 0x58
 8006250:	9317      	str	r3, [sp, #92]	; 0x5c
 8006252:	e9dd 8916 	ldrd	r8, r9, [sp, #88]	; 0x58
 8006256:	e7a2      	b.n	800619e <_strtod_l+0x97e>
 8006258:	f1ba 0f01 	cmp.w	sl, #1
 800625c:	d103      	bne.n	8006266 <_strtod_l+0xa46>
 800625e:	f1bb 0f00 	cmp.w	fp, #0
 8006262:	f43f ad98 	beq.w	8005d96 <_strtod_l+0x576>
 8006266:	f04f 0800 	mov.w	r8, #0
 800626a:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 8006340 <_strtod_l+0xb20>
 800626e:	e794      	b.n	800619a <_strtod_l+0x97a>
 8006270:	2600      	movs	r6, #0
 8006272:	4f32      	ldr	r7, [pc, #200]	; (800633c <_strtod_l+0xb1c>)
 8006274:	e7e9      	b.n	800624a <_strtod_l+0xa2a>
 8006276:	4b31      	ldr	r3, [pc, #196]	; (800633c <_strtod_l+0xb1c>)
 8006278:	4630      	mov	r0, r6
 800627a:	4639      	mov	r1, r7
 800627c:	2200      	movs	r2, #0
 800627e:	f7fa f9b7 	bl	80005f0 <__aeabi_dmul>
 8006282:	9b08      	ldr	r3, [sp, #32]
 8006284:	4606      	mov	r6, r0
 8006286:	460f      	mov	r7, r1
 8006288:	b933      	cbnz	r3, 8006298 <_strtod_l+0xa78>
 800628a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800628e:	9010      	str	r0, [sp, #64]	; 0x40
 8006290:	9311      	str	r3, [sp, #68]	; 0x44
 8006292:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 8006296:	e782      	b.n	800619e <_strtod_l+0x97e>
 8006298:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800629c:	e7f9      	b.n	8006292 <_strtod_l+0xa72>
 800629e:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
 80062a2:	9b05      	ldr	r3, [sp, #20]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d1aa      	bne.n	80061fe <_strtod_l+0x9de>
 80062a8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80062ac:	0d1b      	lsrs	r3, r3, #20
 80062ae:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80062b0:	051b      	lsls	r3, r3, #20
 80062b2:	429a      	cmp	r2, r3
 80062b4:	46d8      	mov	r8, fp
 80062b6:	d1a2      	bne.n	80061fe <_strtod_l+0x9de>
 80062b8:	4639      	mov	r1, r7
 80062ba:	4630      	mov	r0, r6
 80062bc:	f7fa fc48 	bl	8000b50 <__aeabi_d2iz>
 80062c0:	f7fa f930 	bl	8000524 <__aeabi_i2d>
 80062c4:	460b      	mov	r3, r1
 80062c6:	4602      	mov	r2, r0
 80062c8:	4639      	mov	r1, r7
 80062ca:	4630      	mov	r0, r6
 80062cc:	f7f9 ffdc 	bl	8000288 <__aeabi_dsub>
 80062d0:	9b08      	ldr	r3, [sp, #32]
 80062d2:	4606      	mov	r6, r0
 80062d4:	460f      	mov	r7, r1
 80062d6:	b933      	cbnz	r3, 80062e6 <_strtod_l+0xac6>
 80062d8:	f1ba 0f00 	cmp.w	sl, #0
 80062dc:	d103      	bne.n	80062e6 <_strtod_l+0xac6>
 80062de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d068      	beq.n	80063b8 <_strtod_l+0xb98>
 80062e6:	a30a      	add	r3, pc, #40	; (adr r3, 8006310 <_strtod_l+0xaf0>)
 80062e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ec:	4630      	mov	r0, r6
 80062ee:	4639      	mov	r1, r7
 80062f0:	f7fa fbf0 	bl	8000ad4 <__aeabi_dcmplt>
 80062f4:	2800      	cmp	r0, #0
 80062f6:	f47f ace8 	bne.w	8005cca <_strtod_l+0x4aa>
 80062fa:	a307      	add	r3, pc, #28	; (adr r3, 8006318 <_strtod_l+0xaf8>)
 80062fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006300:	4630      	mov	r0, r6
 8006302:	4639      	mov	r1, r7
 8006304:	f7fa fc04 	bl	8000b10 <__aeabi_dcmpgt>
 8006308:	2800      	cmp	r0, #0
 800630a:	f43f af78 	beq.w	80061fe <_strtod_l+0x9de>
 800630e:	e4dc      	b.n	8005cca <_strtod_l+0x4aa>
 8006310:	94a03595 	.word	0x94a03595
 8006314:	3fdfffff 	.word	0x3fdfffff
 8006318:	35afe535 	.word	0x35afe535
 800631c:	3fe00000 	.word	0x3fe00000
 8006320:	000fffff 	.word	0x000fffff
 8006324:	7ff00000 	.word	0x7ff00000
 8006328:	7fefffff 	.word	0x7fefffff
 800632c:	39500000 	.word	0x39500000
 8006330:	3ff00000 	.word	0x3ff00000
 8006334:	7fe00000 	.word	0x7fe00000
 8006338:	7c9fffff 	.word	0x7c9fffff
 800633c:	3fe00000 	.word	0x3fe00000
 8006340:	bff00000 	.word	0xbff00000
 8006344:	9b05      	ldr	r3, [sp, #20]
 8006346:	b31b      	cbz	r3, 8006390 <_strtod_l+0xb70>
 8006348:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800634a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800634e:	d81f      	bhi.n	8006390 <_strtod_l+0xb70>
 8006350:	a325      	add	r3, pc, #148	; (adr r3, 80063e8 <_strtod_l+0xbc8>)
 8006352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006356:	4630      	mov	r0, r6
 8006358:	4639      	mov	r1, r7
 800635a:	f7fa fbc5 	bl	8000ae8 <__aeabi_dcmple>
 800635e:	b190      	cbz	r0, 8006386 <_strtod_l+0xb66>
 8006360:	4639      	mov	r1, r7
 8006362:	4630      	mov	r0, r6
 8006364:	f7fa fc1c 	bl	8000ba0 <__aeabi_d2uiz>
 8006368:	2800      	cmp	r0, #0
 800636a:	bf08      	it	eq
 800636c:	2001      	moveq	r0, #1
 800636e:	f7fa f8c9 	bl	8000504 <__aeabi_ui2d>
 8006372:	9b08      	ldr	r3, [sp, #32]
 8006374:	4606      	mov	r6, r0
 8006376:	460f      	mov	r7, r1
 8006378:	b9db      	cbnz	r3, 80063b2 <_strtod_l+0xb92>
 800637a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800637e:	9012      	str	r0, [sp, #72]	; 0x48
 8006380:	9313      	str	r3, [sp, #76]	; 0x4c
 8006382:	e9dd 8912 	ldrd	r8, r9, [sp, #72]	; 0x48
 8006386:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006388:	f109 63d6 	add.w	r3, r9, #112197632	; 0x6b00000
 800638c:	eba3 0902 	sub.w	r9, r3, r2
 8006390:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006394:	f002 ff2e 	bl	80091f4 <__ulp>
 8006398:	4640      	mov	r0, r8
 800639a:	ec53 2b10 	vmov	r2, r3, d0
 800639e:	4649      	mov	r1, r9
 80063a0:	f7fa f926 	bl	80005f0 <__aeabi_dmul>
 80063a4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80063a8:	f7f9 ff70 	bl	800028c <__adddf3>
 80063ac:	4682      	mov	sl, r0
 80063ae:	468b      	mov	fp, r1
 80063b0:	e777      	b.n	80062a2 <_strtod_l+0xa82>
 80063b2:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80063b6:	e7e4      	b.n	8006382 <_strtod_l+0xb62>
 80063b8:	a30d      	add	r3, pc, #52	; (adr r3, 80063f0 <_strtod_l+0xbd0>)
 80063ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063be:	f7fa fb89 	bl	8000ad4 <__aeabi_dcmplt>
 80063c2:	e7a1      	b.n	8006308 <_strtod_l+0xae8>
 80063c4:	2300      	movs	r3, #0
 80063c6:	9309      	str	r3, [sp, #36]	; 0x24
 80063c8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80063ca:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80063cc:	6013      	str	r3, [r2, #0]
 80063ce:	f7ff ba6b 	b.w	80058a8 <_strtod_l+0x88>
 80063d2:	2b65      	cmp	r3, #101	; 0x65
 80063d4:	f04f 0200 	mov.w	r2, #0
 80063d8:	f43f abb6 	beq.w	8005b48 <_strtod_l+0x328>
 80063dc:	4615      	mov	r5, r2
 80063de:	2101      	movs	r1, #1
 80063e0:	f7ff badc 	b.w	800599c <_strtod_l+0x17c>
 80063e4:	f3af 8000 	nop.w
 80063e8:	ffc00000 	.word	0xffc00000
 80063ec:	41dfffff 	.word	0x41dfffff
 80063f0:	94a03595 	.word	0x94a03595
 80063f4:	3fcfffff 	.word	0x3fcfffff

080063f8 <strtod>:
 80063f8:	4b07      	ldr	r3, [pc, #28]	; (8006418 <strtod+0x20>)
 80063fa:	4a08      	ldr	r2, [pc, #32]	; (800641c <strtod+0x24>)
 80063fc:	b410      	push	{r4}
 80063fe:	681c      	ldr	r4, [r3, #0]
 8006400:	6a23      	ldr	r3, [r4, #32]
 8006402:	2b00      	cmp	r3, #0
 8006404:	bf08      	it	eq
 8006406:	4613      	moveq	r3, r2
 8006408:	460a      	mov	r2, r1
 800640a:	4601      	mov	r1, r0
 800640c:	4620      	mov	r0, r4
 800640e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006412:	f7ff ba05 	b.w	8005820 <_strtod_l>
 8006416:	bf00      	nop
 8006418:	20000010 	.word	0x20000010
 800641c:	20000104 	.word	0x20000104

08006420 <_strtol_l.isra.0>:
 8006420:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006424:	4680      	mov	r8, r0
 8006426:	4689      	mov	r9, r1
 8006428:	4692      	mov	sl, r2
 800642a:	461f      	mov	r7, r3
 800642c:	468b      	mov	fp, r1
 800642e:	465d      	mov	r5, fp
 8006430:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006432:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006436:	f002 f9d6 	bl	80087e6 <__locale_ctype_ptr_l>
 800643a:	4420      	add	r0, r4
 800643c:	7846      	ldrb	r6, [r0, #1]
 800643e:	f016 0608 	ands.w	r6, r6, #8
 8006442:	d10b      	bne.n	800645c <_strtol_l.isra.0+0x3c>
 8006444:	2c2d      	cmp	r4, #45	; 0x2d
 8006446:	d10b      	bne.n	8006460 <_strtol_l.isra.0+0x40>
 8006448:	782c      	ldrb	r4, [r5, #0]
 800644a:	2601      	movs	r6, #1
 800644c:	f10b 0502 	add.w	r5, fp, #2
 8006450:	b167      	cbz	r7, 800646c <_strtol_l.isra.0+0x4c>
 8006452:	2f10      	cmp	r7, #16
 8006454:	d114      	bne.n	8006480 <_strtol_l.isra.0+0x60>
 8006456:	2c30      	cmp	r4, #48	; 0x30
 8006458:	d00a      	beq.n	8006470 <_strtol_l.isra.0+0x50>
 800645a:	e011      	b.n	8006480 <_strtol_l.isra.0+0x60>
 800645c:	46ab      	mov	fp, r5
 800645e:	e7e6      	b.n	800642e <_strtol_l.isra.0+0xe>
 8006460:	2c2b      	cmp	r4, #43	; 0x2b
 8006462:	bf04      	itt	eq
 8006464:	782c      	ldrbeq	r4, [r5, #0]
 8006466:	f10b 0502 	addeq.w	r5, fp, #2
 800646a:	e7f1      	b.n	8006450 <_strtol_l.isra.0+0x30>
 800646c:	2c30      	cmp	r4, #48	; 0x30
 800646e:	d127      	bne.n	80064c0 <_strtol_l.isra.0+0xa0>
 8006470:	782b      	ldrb	r3, [r5, #0]
 8006472:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006476:	2b58      	cmp	r3, #88	; 0x58
 8006478:	d14b      	bne.n	8006512 <_strtol_l.isra.0+0xf2>
 800647a:	786c      	ldrb	r4, [r5, #1]
 800647c:	2710      	movs	r7, #16
 800647e:	3502      	adds	r5, #2
 8006480:	2e00      	cmp	r6, #0
 8006482:	bf0c      	ite	eq
 8006484:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8006488:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800648c:	2200      	movs	r2, #0
 800648e:	fbb1 fef7 	udiv	lr, r1, r7
 8006492:	4610      	mov	r0, r2
 8006494:	fb07 1c1e 	mls	ip, r7, lr, r1
 8006498:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800649c:	2b09      	cmp	r3, #9
 800649e:	d811      	bhi.n	80064c4 <_strtol_l.isra.0+0xa4>
 80064a0:	461c      	mov	r4, r3
 80064a2:	42a7      	cmp	r7, r4
 80064a4:	dd1d      	ble.n	80064e2 <_strtol_l.isra.0+0xc2>
 80064a6:	1c53      	adds	r3, r2, #1
 80064a8:	d007      	beq.n	80064ba <_strtol_l.isra.0+0x9a>
 80064aa:	4586      	cmp	lr, r0
 80064ac:	d316      	bcc.n	80064dc <_strtol_l.isra.0+0xbc>
 80064ae:	d101      	bne.n	80064b4 <_strtol_l.isra.0+0x94>
 80064b0:	45a4      	cmp	ip, r4
 80064b2:	db13      	blt.n	80064dc <_strtol_l.isra.0+0xbc>
 80064b4:	fb00 4007 	mla	r0, r0, r7, r4
 80064b8:	2201      	movs	r2, #1
 80064ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 80064be:	e7eb      	b.n	8006498 <_strtol_l.isra.0+0x78>
 80064c0:	270a      	movs	r7, #10
 80064c2:	e7dd      	b.n	8006480 <_strtol_l.isra.0+0x60>
 80064c4:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80064c8:	2b19      	cmp	r3, #25
 80064ca:	d801      	bhi.n	80064d0 <_strtol_l.isra.0+0xb0>
 80064cc:	3c37      	subs	r4, #55	; 0x37
 80064ce:	e7e8      	b.n	80064a2 <_strtol_l.isra.0+0x82>
 80064d0:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80064d4:	2b19      	cmp	r3, #25
 80064d6:	d804      	bhi.n	80064e2 <_strtol_l.isra.0+0xc2>
 80064d8:	3c57      	subs	r4, #87	; 0x57
 80064da:	e7e2      	b.n	80064a2 <_strtol_l.isra.0+0x82>
 80064dc:	f04f 32ff 	mov.w	r2, #4294967295
 80064e0:	e7eb      	b.n	80064ba <_strtol_l.isra.0+0x9a>
 80064e2:	1c53      	adds	r3, r2, #1
 80064e4:	d108      	bne.n	80064f8 <_strtol_l.isra.0+0xd8>
 80064e6:	2322      	movs	r3, #34	; 0x22
 80064e8:	f8c8 3000 	str.w	r3, [r8]
 80064ec:	4608      	mov	r0, r1
 80064ee:	f1ba 0f00 	cmp.w	sl, #0
 80064f2:	d107      	bne.n	8006504 <_strtol_l.isra.0+0xe4>
 80064f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064f8:	b106      	cbz	r6, 80064fc <_strtol_l.isra.0+0xdc>
 80064fa:	4240      	negs	r0, r0
 80064fc:	f1ba 0f00 	cmp.w	sl, #0
 8006500:	d00c      	beq.n	800651c <_strtol_l.isra.0+0xfc>
 8006502:	b122      	cbz	r2, 800650e <_strtol_l.isra.0+0xee>
 8006504:	3d01      	subs	r5, #1
 8006506:	f8ca 5000 	str.w	r5, [sl]
 800650a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800650e:	464d      	mov	r5, r9
 8006510:	e7f9      	b.n	8006506 <_strtol_l.isra.0+0xe6>
 8006512:	2430      	movs	r4, #48	; 0x30
 8006514:	2f00      	cmp	r7, #0
 8006516:	d1b3      	bne.n	8006480 <_strtol_l.isra.0+0x60>
 8006518:	2708      	movs	r7, #8
 800651a:	e7b1      	b.n	8006480 <_strtol_l.isra.0+0x60>
 800651c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006520 <strtol>:
 8006520:	4b08      	ldr	r3, [pc, #32]	; (8006544 <strtol+0x24>)
 8006522:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006524:	681c      	ldr	r4, [r3, #0]
 8006526:	4d08      	ldr	r5, [pc, #32]	; (8006548 <strtol+0x28>)
 8006528:	6a23      	ldr	r3, [r4, #32]
 800652a:	2b00      	cmp	r3, #0
 800652c:	bf08      	it	eq
 800652e:	462b      	moveq	r3, r5
 8006530:	9300      	str	r3, [sp, #0]
 8006532:	4613      	mov	r3, r2
 8006534:	460a      	mov	r2, r1
 8006536:	4601      	mov	r1, r0
 8006538:	4620      	mov	r0, r4
 800653a:	f7ff ff71 	bl	8006420 <_strtol_l.isra.0>
 800653e:	b003      	add	sp, #12
 8006540:	bd30      	pop	{r4, r5, pc}
 8006542:	bf00      	nop
 8006544:	20000010 	.word	0x20000010
 8006548:	20000104 	.word	0x20000104
 800654c:	00000000 	.word	0x00000000

08006550 <_svfprintf_r>:
 8006550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006554:	b0bd      	sub	sp, #244	; 0xf4
 8006556:	468a      	mov	sl, r1
 8006558:	4615      	mov	r5, r2
 800655a:	461f      	mov	r7, r3
 800655c:	4683      	mov	fp, r0
 800655e:	f002 f947 	bl	80087f0 <_localeconv_r>
 8006562:	6803      	ldr	r3, [r0, #0]
 8006564:	930d      	str	r3, [sp, #52]	; 0x34
 8006566:	4618      	mov	r0, r3
 8006568:	f7f9 fe32 	bl	80001d0 <strlen>
 800656c:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8006570:	9008      	str	r0, [sp, #32]
 8006572:	061b      	lsls	r3, r3, #24
 8006574:	d518      	bpl.n	80065a8 <_svfprintf_r+0x58>
 8006576:	f8da 3010 	ldr.w	r3, [sl, #16]
 800657a:	b9ab      	cbnz	r3, 80065a8 <_svfprintf_r+0x58>
 800657c:	2140      	movs	r1, #64	; 0x40
 800657e:	4658      	mov	r0, fp
 8006580:	f002 f94c 	bl	800881c <_malloc_r>
 8006584:	f8ca 0000 	str.w	r0, [sl]
 8006588:	f8ca 0010 	str.w	r0, [sl, #16]
 800658c:	b948      	cbnz	r0, 80065a2 <_svfprintf_r+0x52>
 800658e:	230c      	movs	r3, #12
 8006590:	f8cb 3000 	str.w	r3, [fp]
 8006594:	f04f 33ff 	mov.w	r3, #4294967295
 8006598:	9309      	str	r3, [sp, #36]	; 0x24
 800659a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800659c:	b03d      	add	sp, #244	; 0xf4
 800659e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065a2:	2340      	movs	r3, #64	; 0x40
 80065a4:	f8ca 3014 	str.w	r3, [sl, #20]
 80065a8:	ed9f 7b99 	vldr	d7, [pc, #612]	; 8006810 <_svfprintf_r+0x2c0>
 80065ac:	ed8d 7b06 	vstr	d7, [sp, #24]
 80065b0:	2300      	movs	r3, #0
 80065b2:	ac2c      	add	r4, sp, #176	; 0xb0
 80065b4:	941f      	str	r4, [sp, #124]	; 0x7c
 80065b6:	9321      	str	r3, [sp, #132]	; 0x84
 80065b8:	9320      	str	r3, [sp, #128]	; 0x80
 80065ba:	9505      	str	r5, [sp, #20]
 80065bc:	9303      	str	r3, [sp, #12]
 80065be:	9311      	str	r3, [sp, #68]	; 0x44
 80065c0:	9310      	str	r3, [sp, #64]	; 0x40
 80065c2:	9309      	str	r3, [sp, #36]	; 0x24
 80065c4:	9d05      	ldr	r5, [sp, #20]
 80065c6:	462b      	mov	r3, r5
 80065c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80065cc:	b112      	cbz	r2, 80065d4 <_svfprintf_r+0x84>
 80065ce:	2a25      	cmp	r2, #37	; 0x25
 80065d0:	f040 8083 	bne.w	80066da <_svfprintf_r+0x18a>
 80065d4:	9b05      	ldr	r3, [sp, #20]
 80065d6:	1aee      	subs	r6, r5, r3
 80065d8:	d00d      	beq.n	80065f6 <_svfprintf_r+0xa6>
 80065da:	e884 0048 	stmia.w	r4, {r3, r6}
 80065de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80065e0:	4433      	add	r3, r6
 80065e2:	9321      	str	r3, [sp, #132]	; 0x84
 80065e4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80065e6:	3301      	adds	r3, #1
 80065e8:	2b07      	cmp	r3, #7
 80065ea:	9320      	str	r3, [sp, #128]	; 0x80
 80065ec:	dc77      	bgt.n	80066de <_svfprintf_r+0x18e>
 80065ee:	3408      	adds	r4, #8
 80065f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065f2:	4433      	add	r3, r6
 80065f4:	9309      	str	r3, [sp, #36]	; 0x24
 80065f6:	782b      	ldrb	r3, [r5, #0]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	f000 8729 	beq.w	8007450 <_svfprintf_r+0xf00>
 80065fe:	2300      	movs	r3, #0
 8006600:	1c69      	adds	r1, r5, #1
 8006602:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8006606:	461a      	mov	r2, r3
 8006608:	f04f 39ff 	mov.w	r9, #4294967295
 800660c:	930a      	str	r3, [sp, #40]	; 0x28
 800660e:	461d      	mov	r5, r3
 8006610:	200a      	movs	r0, #10
 8006612:	1c4e      	adds	r6, r1, #1
 8006614:	7809      	ldrb	r1, [r1, #0]
 8006616:	9605      	str	r6, [sp, #20]
 8006618:	9102      	str	r1, [sp, #8]
 800661a:	9902      	ldr	r1, [sp, #8]
 800661c:	3920      	subs	r1, #32
 800661e:	2958      	cmp	r1, #88	; 0x58
 8006620:	f200 8418 	bhi.w	8006e54 <_svfprintf_r+0x904>
 8006624:	e8df f011 	tbh	[pc, r1, lsl #1]
 8006628:	041600a6 	.word	0x041600a6
 800662c:	00ab0416 	.word	0x00ab0416
 8006630:	04160416 	.word	0x04160416
 8006634:	04160416 	.word	0x04160416
 8006638:	04160416 	.word	0x04160416
 800663c:	006500ae 	.word	0x006500ae
 8006640:	00b70416 	.word	0x00b70416
 8006644:	041600ba 	.word	0x041600ba
 8006648:	00da00d7 	.word	0x00da00d7
 800664c:	00da00da 	.word	0x00da00da
 8006650:	00da00da 	.word	0x00da00da
 8006654:	00da00da 	.word	0x00da00da
 8006658:	00da00da 	.word	0x00da00da
 800665c:	04160416 	.word	0x04160416
 8006660:	04160416 	.word	0x04160416
 8006664:	04160416 	.word	0x04160416
 8006668:	04160416 	.word	0x04160416
 800666c:	04160416 	.word	0x04160416
 8006670:	012b0115 	.word	0x012b0115
 8006674:	012b0416 	.word	0x012b0416
 8006678:	04160416 	.word	0x04160416
 800667c:	04160416 	.word	0x04160416
 8006680:	041600ed 	.word	0x041600ed
 8006684:	03400416 	.word	0x03400416
 8006688:	04160416 	.word	0x04160416
 800668c:	04160416 	.word	0x04160416
 8006690:	03a80416 	.word	0x03a80416
 8006694:	04160416 	.word	0x04160416
 8006698:	04160086 	.word	0x04160086
 800669c:	04160416 	.word	0x04160416
 80066a0:	04160416 	.word	0x04160416
 80066a4:	04160416 	.word	0x04160416
 80066a8:	04160416 	.word	0x04160416
 80066ac:	01070416 	.word	0x01070416
 80066b0:	012b006b 	.word	0x012b006b
 80066b4:	012b012b 	.word	0x012b012b
 80066b8:	006b00f0 	.word	0x006b00f0
 80066bc:	04160416 	.word	0x04160416
 80066c0:	041600fa 	.word	0x041600fa
 80066c4:	03420322 	.word	0x03420322
 80066c8:	01010376 	.word	0x01010376
 80066cc:	03870416 	.word	0x03870416
 80066d0:	03aa0416 	.word	0x03aa0416
 80066d4:	04160416 	.word	0x04160416
 80066d8:	03c2      	.short	0x03c2
 80066da:	461d      	mov	r5, r3
 80066dc:	e773      	b.n	80065c6 <_svfprintf_r+0x76>
 80066de:	aa1f      	add	r2, sp, #124	; 0x7c
 80066e0:	4651      	mov	r1, sl
 80066e2:	4658      	mov	r0, fp
 80066e4:	f002 fec2 	bl	800946c <__ssprint_r>
 80066e8:	2800      	cmp	r0, #0
 80066ea:	f040 8692 	bne.w	8007412 <_svfprintf_r+0xec2>
 80066ee:	ac2c      	add	r4, sp, #176	; 0xb0
 80066f0:	e77e      	b.n	80065f0 <_svfprintf_r+0xa0>
 80066f2:	2301      	movs	r3, #1
 80066f4:	222b      	movs	r2, #43	; 0x2b
 80066f6:	9905      	ldr	r1, [sp, #20]
 80066f8:	e78b      	b.n	8006612 <_svfprintf_r+0xc2>
 80066fa:	460f      	mov	r7, r1
 80066fc:	e7fb      	b.n	80066f6 <_svfprintf_r+0x1a6>
 80066fe:	b10b      	cbz	r3, 8006704 <_svfprintf_r+0x1b4>
 8006700:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8006704:	06ae      	lsls	r6, r5, #26
 8006706:	f140 80aa 	bpl.w	800685e <_svfprintf_r+0x30e>
 800670a:	3707      	adds	r7, #7
 800670c:	f027 0707 	bic.w	r7, r7, #7
 8006710:	f107 0308 	add.w	r3, r7, #8
 8006714:	e9d7 6700 	ldrd	r6, r7, [r7]
 8006718:	9304      	str	r3, [sp, #16]
 800671a:	2e00      	cmp	r6, #0
 800671c:	f177 0300 	sbcs.w	r3, r7, #0
 8006720:	da06      	bge.n	8006730 <_svfprintf_r+0x1e0>
 8006722:	4276      	negs	r6, r6
 8006724:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8006728:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 800672c:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8006730:	2301      	movs	r3, #1
 8006732:	e2ca      	b.n	8006cca <_svfprintf_r+0x77a>
 8006734:	b10b      	cbz	r3, 800673a <_svfprintf_r+0x1ea>
 8006736:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800673a:	4b37      	ldr	r3, [pc, #220]	; (8006818 <_svfprintf_r+0x2c8>)
 800673c:	9311      	str	r3, [sp, #68]	; 0x44
 800673e:	06ab      	lsls	r3, r5, #26
 8006740:	f140 8339 	bpl.w	8006db6 <_svfprintf_r+0x866>
 8006744:	3707      	adds	r7, #7
 8006746:	f027 0707 	bic.w	r7, r7, #7
 800674a:	f107 0308 	add.w	r3, r7, #8
 800674e:	e9d7 6700 	ldrd	r6, r7, [r7]
 8006752:	9304      	str	r3, [sp, #16]
 8006754:	07e8      	lsls	r0, r5, #31
 8006756:	d50b      	bpl.n	8006770 <_svfprintf_r+0x220>
 8006758:	ea56 0307 	orrs.w	r3, r6, r7
 800675c:	d008      	beq.n	8006770 <_svfprintf_r+0x220>
 800675e:	2330      	movs	r3, #48	; 0x30
 8006760:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8006764:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8006768:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 800676c:	f045 0502 	orr.w	r5, r5, #2
 8006770:	2302      	movs	r3, #2
 8006772:	e2a7      	b.n	8006cc4 <_svfprintf_r+0x774>
 8006774:	2a00      	cmp	r2, #0
 8006776:	d1be      	bne.n	80066f6 <_svfprintf_r+0x1a6>
 8006778:	2301      	movs	r3, #1
 800677a:	2220      	movs	r2, #32
 800677c:	e7bb      	b.n	80066f6 <_svfprintf_r+0x1a6>
 800677e:	f045 0501 	orr.w	r5, r5, #1
 8006782:	e7b8      	b.n	80066f6 <_svfprintf_r+0x1a6>
 8006784:	683e      	ldr	r6, [r7, #0]
 8006786:	960a      	str	r6, [sp, #40]	; 0x28
 8006788:	2e00      	cmp	r6, #0
 800678a:	f107 0104 	add.w	r1, r7, #4
 800678e:	dab4      	bge.n	80066fa <_svfprintf_r+0x1aa>
 8006790:	4276      	negs	r6, r6
 8006792:	960a      	str	r6, [sp, #40]	; 0x28
 8006794:	460f      	mov	r7, r1
 8006796:	f045 0504 	orr.w	r5, r5, #4
 800679a:	e7ac      	b.n	80066f6 <_svfprintf_r+0x1a6>
 800679c:	9905      	ldr	r1, [sp, #20]
 800679e:	1c4e      	adds	r6, r1, #1
 80067a0:	7809      	ldrb	r1, [r1, #0]
 80067a2:	9102      	str	r1, [sp, #8]
 80067a4:	292a      	cmp	r1, #42	; 0x2a
 80067a6:	d010      	beq.n	80067ca <_svfprintf_r+0x27a>
 80067a8:	f04f 0900 	mov.w	r9, #0
 80067ac:	9605      	str	r6, [sp, #20]
 80067ae:	9902      	ldr	r1, [sp, #8]
 80067b0:	3930      	subs	r1, #48	; 0x30
 80067b2:	2909      	cmp	r1, #9
 80067b4:	f63f af31 	bhi.w	800661a <_svfprintf_r+0xca>
 80067b8:	fb00 1909 	mla	r9, r0, r9, r1
 80067bc:	9905      	ldr	r1, [sp, #20]
 80067be:	460e      	mov	r6, r1
 80067c0:	f816 1b01 	ldrb.w	r1, [r6], #1
 80067c4:	9102      	str	r1, [sp, #8]
 80067c6:	9605      	str	r6, [sp, #20]
 80067c8:	e7f1      	b.n	80067ae <_svfprintf_r+0x25e>
 80067ca:	6839      	ldr	r1, [r7, #0]
 80067cc:	9605      	str	r6, [sp, #20]
 80067ce:	ea41 79e1 	orr.w	r9, r1, r1, asr #31
 80067d2:	3704      	adds	r7, #4
 80067d4:	e78f      	b.n	80066f6 <_svfprintf_r+0x1a6>
 80067d6:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 80067da:	e78c      	b.n	80066f6 <_svfprintf_r+0x1a6>
 80067dc:	2100      	movs	r1, #0
 80067de:	910a      	str	r1, [sp, #40]	; 0x28
 80067e0:	9902      	ldr	r1, [sp, #8]
 80067e2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80067e4:	3930      	subs	r1, #48	; 0x30
 80067e6:	fb00 1106 	mla	r1, r0, r6, r1
 80067ea:	910a      	str	r1, [sp, #40]	; 0x28
 80067ec:	9905      	ldr	r1, [sp, #20]
 80067ee:	460e      	mov	r6, r1
 80067f0:	f816 1b01 	ldrb.w	r1, [r6], #1
 80067f4:	9102      	str	r1, [sp, #8]
 80067f6:	9902      	ldr	r1, [sp, #8]
 80067f8:	9605      	str	r6, [sp, #20]
 80067fa:	3930      	subs	r1, #48	; 0x30
 80067fc:	2909      	cmp	r1, #9
 80067fe:	d9ef      	bls.n	80067e0 <_svfprintf_r+0x290>
 8006800:	e70b      	b.n	800661a <_svfprintf_r+0xca>
 8006802:	f045 0508 	orr.w	r5, r5, #8
 8006806:	e776      	b.n	80066f6 <_svfprintf_r+0x1a6>
 8006808:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 800680c:	e773      	b.n	80066f6 <_svfprintf_r+0x1a6>
 800680e:	bf00      	nop
	...
 8006818:	08009c60 	.word	0x08009c60
 800681c:	9905      	ldr	r1, [sp, #20]
 800681e:	7809      	ldrb	r1, [r1, #0]
 8006820:	296c      	cmp	r1, #108	; 0x6c
 8006822:	d105      	bne.n	8006830 <_svfprintf_r+0x2e0>
 8006824:	9905      	ldr	r1, [sp, #20]
 8006826:	3101      	adds	r1, #1
 8006828:	9105      	str	r1, [sp, #20]
 800682a:	f045 0520 	orr.w	r5, r5, #32
 800682e:	e762      	b.n	80066f6 <_svfprintf_r+0x1a6>
 8006830:	f045 0510 	orr.w	r5, r5, #16
 8006834:	e75f      	b.n	80066f6 <_svfprintf_r+0x1a6>
 8006836:	1d3b      	adds	r3, r7, #4
 8006838:	9304      	str	r3, [sp, #16]
 800683a:	2600      	movs	r6, #0
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8006842:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8006846:	f04f 0901 	mov.w	r9, #1
 800684a:	4637      	mov	r7, r6
 800684c:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 8006850:	e11b      	b.n	8006a8a <_svfprintf_r+0x53a>
 8006852:	b10b      	cbz	r3, 8006858 <_svfprintf_r+0x308>
 8006854:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8006858:	f045 0510 	orr.w	r5, r5, #16
 800685c:	e752      	b.n	8006704 <_svfprintf_r+0x1b4>
 800685e:	f015 0f10 	tst.w	r5, #16
 8006862:	f107 0304 	add.w	r3, r7, #4
 8006866:	d003      	beq.n	8006870 <_svfprintf_r+0x320>
 8006868:	683e      	ldr	r6, [r7, #0]
 800686a:	9304      	str	r3, [sp, #16]
 800686c:	17f7      	asrs	r7, r6, #31
 800686e:	e754      	b.n	800671a <_svfprintf_r+0x1ca>
 8006870:	683e      	ldr	r6, [r7, #0]
 8006872:	9304      	str	r3, [sp, #16]
 8006874:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006878:	bf18      	it	ne
 800687a:	b236      	sxthne	r6, r6
 800687c:	e7f6      	b.n	800686c <_svfprintf_r+0x31c>
 800687e:	b10b      	cbz	r3, 8006884 <_svfprintf_r+0x334>
 8006880:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8006884:	3707      	adds	r7, #7
 8006886:	f027 0707 	bic.w	r7, r7, #7
 800688a:	f107 0308 	add.w	r3, r7, #8
 800688e:	9304      	str	r3, [sp, #16]
 8006890:	ed97 7b00 	vldr	d7, [r7]
 8006894:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006898:	9b06      	ldr	r3, [sp, #24]
 800689a:	9312      	str	r3, [sp, #72]	; 0x48
 800689c:	9b07      	ldr	r3, [sp, #28]
 800689e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80068a2:	9313      	str	r3, [sp, #76]	; 0x4c
 80068a4:	f04f 32ff 	mov.w	r2, #4294967295
 80068a8:	4b4a      	ldr	r3, [pc, #296]	; (80069d4 <_svfprintf_r+0x484>)
 80068aa:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 80068ae:	f7fa f939 	bl	8000b24 <__aeabi_dcmpun>
 80068b2:	2800      	cmp	r0, #0
 80068b4:	f040 85d5 	bne.w	8007462 <_svfprintf_r+0xf12>
 80068b8:	f04f 32ff 	mov.w	r2, #4294967295
 80068bc:	4b45      	ldr	r3, [pc, #276]	; (80069d4 <_svfprintf_r+0x484>)
 80068be:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 80068c2:	f7fa f911 	bl	8000ae8 <__aeabi_dcmple>
 80068c6:	2800      	cmp	r0, #0
 80068c8:	f040 85cb 	bne.w	8007462 <_svfprintf_r+0xf12>
 80068cc:	2200      	movs	r2, #0
 80068ce:	2300      	movs	r3, #0
 80068d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80068d4:	f7fa f8fe 	bl	8000ad4 <__aeabi_dcmplt>
 80068d8:	b110      	cbz	r0, 80068e0 <_svfprintf_r+0x390>
 80068da:	232d      	movs	r3, #45	; 0x2d
 80068dc:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80068e0:	4b3d      	ldr	r3, [pc, #244]	; (80069d8 <_svfprintf_r+0x488>)
 80068e2:	4a3e      	ldr	r2, [pc, #248]	; (80069dc <_svfprintf_r+0x48c>)
 80068e4:	9902      	ldr	r1, [sp, #8]
 80068e6:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 80068ea:	2947      	cmp	r1, #71	; 0x47
 80068ec:	bfcc      	ite	gt
 80068ee:	4690      	movgt	r8, r2
 80068f0:	4698      	movle	r8, r3
 80068f2:	f04f 0903 	mov.w	r9, #3
 80068f6:	2600      	movs	r6, #0
 80068f8:	4637      	mov	r7, r6
 80068fa:	e0c6      	b.n	8006a8a <_svfprintf_r+0x53a>
 80068fc:	f1b9 3fff 	cmp.w	r9, #4294967295
 8006900:	d022      	beq.n	8006948 <_svfprintf_r+0x3f8>
 8006902:	9b02      	ldr	r3, [sp, #8]
 8006904:	f023 0320 	bic.w	r3, r3, #32
 8006908:	2b47      	cmp	r3, #71	; 0x47
 800690a:	d104      	bne.n	8006916 <_svfprintf_r+0x3c6>
 800690c:	f1b9 0f00 	cmp.w	r9, #0
 8006910:	bf08      	it	eq
 8006912:	f04f 0901 	moveq.w	r9, #1
 8006916:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 800691a:	930c      	str	r3, [sp, #48]	; 0x30
 800691c:	9b07      	ldr	r3, [sp, #28]
 800691e:	2b00      	cmp	r3, #0
 8006920:	da15      	bge.n	800694e <_svfprintf_r+0x3fe>
 8006922:	9b06      	ldr	r3, [sp, #24]
 8006924:	930e      	str	r3, [sp, #56]	; 0x38
 8006926:	9b07      	ldr	r3, [sp, #28]
 8006928:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800692c:	930f      	str	r3, [sp, #60]	; 0x3c
 800692e:	232d      	movs	r3, #45	; 0x2d
 8006930:	930b      	str	r3, [sp, #44]	; 0x2c
 8006932:	9b02      	ldr	r3, [sp, #8]
 8006934:	f023 0720 	bic.w	r7, r3, #32
 8006938:	2f46      	cmp	r7, #70	; 0x46
 800693a:	d00e      	beq.n	800695a <_svfprintf_r+0x40a>
 800693c:	2f45      	cmp	r7, #69	; 0x45
 800693e:	d146      	bne.n	80069ce <_svfprintf_r+0x47e>
 8006940:	f109 0601 	add.w	r6, r9, #1
 8006944:	2102      	movs	r1, #2
 8006946:	e00a      	b.n	800695e <_svfprintf_r+0x40e>
 8006948:	f04f 0906 	mov.w	r9, #6
 800694c:	e7e3      	b.n	8006916 <_svfprintf_r+0x3c6>
 800694e:	ed9d 7b06 	vldr	d7, [sp, #24]
 8006952:	2300      	movs	r3, #0
 8006954:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8006958:	e7ea      	b.n	8006930 <_svfprintf_r+0x3e0>
 800695a:	464e      	mov	r6, r9
 800695c:	2103      	movs	r1, #3
 800695e:	ab1d      	add	r3, sp, #116	; 0x74
 8006960:	9301      	str	r3, [sp, #4]
 8006962:	ab1a      	add	r3, sp, #104	; 0x68
 8006964:	9300      	str	r3, [sp, #0]
 8006966:	4632      	mov	r2, r6
 8006968:	ab19      	add	r3, sp, #100	; 0x64
 800696a:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 800696e:	4658      	mov	r0, fp
 8006970:	f000 fe4e 	bl	8007610 <_dtoa_r>
 8006974:	2f47      	cmp	r7, #71	; 0x47
 8006976:	4680      	mov	r8, r0
 8006978:	d102      	bne.n	8006980 <_svfprintf_r+0x430>
 800697a:	07e8      	lsls	r0, r5, #31
 800697c:	f140 857e 	bpl.w	800747c <_svfprintf_r+0xf2c>
 8006980:	eb08 0306 	add.w	r3, r8, r6
 8006984:	2f46      	cmp	r7, #70	; 0x46
 8006986:	9303      	str	r3, [sp, #12]
 8006988:	d111      	bne.n	80069ae <_svfprintf_r+0x45e>
 800698a:	f898 3000 	ldrb.w	r3, [r8]
 800698e:	2b30      	cmp	r3, #48	; 0x30
 8006990:	d109      	bne.n	80069a6 <_svfprintf_r+0x456>
 8006992:	2200      	movs	r2, #0
 8006994:	2300      	movs	r3, #0
 8006996:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800699a:	f7fa f891 	bl	8000ac0 <__aeabi_dcmpeq>
 800699e:	b910      	cbnz	r0, 80069a6 <_svfprintf_r+0x456>
 80069a0:	f1c6 0601 	rsb	r6, r6, #1
 80069a4:	9619      	str	r6, [sp, #100]	; 0x64
 80069a6:	9a03      	ldr	r2, [sp, #12]
 80069a8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80069aa:	441a      	add	r2, r3
 80069ac:	9203      	str	r2, [sp, #12]
 80069ae:	2200      	movs	r2, #0
 80069b0:	2300      	movs	r3, #0
 80069b2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80069b6:	f7fa f883 	bl	8000ac0 <__aeabi_dcmpeq>
 80069ba:	b988      	cbnz	r0, 80069e0 <_svfprintf_r+0x490>
 80069bc:	2230      	movs	r2, #48	; 0x30
 80069be:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80069c0:	9903      	ldr	r1, [sp, #12]
 80069c2:	4299      	cmp	r1, r3
 80069c4:	d90e      	bls.n	80069e4 <_svfprintf_r+0x494>
 80069c6:	1c59      	adds	r1, r3, #1
 80069c8:	911d      	str	r1, [sp, #116]	; 0x74
 80069ca:	701a      	strb	r2, [r3, #0]
 80069cc:	e7f7      	b.n	80069be <_svfprintf_r+0x46e>
 80069ce:	464e      	mov	r6, r9
 80069d0:	e7b8      	b.n	8006944 <_svfprintf_r+0x3f4>
 80069d2:	bf00      	nop
 80069d4:	7fefffff 	.word	0x7fefffff
 80069d8:	08009c50 	.word	0x08009c50
 80069dc:	08009c54 	.word	0x08009c54
 80069e0:	9b03      	ldr	r3, [sp, #12]
 80069e2:	931d      	str	r3, [sp, #116]	; 0x74
 80069e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80069e6:	2f47      	cmp	r7, #71	; 0x47
 80069e8:	eba3 0308 	sub.w	r3, r3, r8
 80069ec:	9303      	str	r3, [sp, #12]
 80069ee:	f040 80fa 	bne.w	8006be6 <_svfprintf_r+0x696>
 80069f2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80069f4:	1cd9      	adds	r1, r3, #3
 80069f6:	db02      	blt.n	80069fe <_svfprintf_r+0x4ae>
 80069f8:	4599      	cmp	r9, r3
 80069fa:	f280 8120 	bge.w	8006c3e <_svfprintf_r+0x6ee>
 80069fe:	9b02      	ldr	r3, [sp, #8]
 8006a00:	3b02      	subs	r3, #2
 8006a02:	9302      	str	r3, [sp, #8]
 8006a04:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006a06:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8006a0a:	f88d 106c 	strb.w	r1, [sp, #108]	; 0x6c
 8006a0e:	1e53      	subs	r3, r2, #1
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	9319      	str	r3, [sp, #100]	; 0x64
 8006a14:	bfb6      	itet	lt
 8006a16:	f1c2 0301 	rsblt	r3, r2, #1
 8006a1a:	222b      	movge	r2, #43	; 0x2b
 8006a1c:	222d      	movlt	r2, #45	; 0x2d
 8006a1e:	2b09      	cmp	r3, #9
 8006a20:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 8006a24:	f340 80fb 	ble.w	8006c1e <_svfprintf_r+0x6ce>
 8006a28:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8006a2c:	260a      	movs	r6, #10
 8006a2e:	fb93 f0f6 	sdiv	r0, r3, r6
 8006a32:	fb06 3310 	mls	r3, r6, r0, r3
 8006a36:	3330      	adds	r3, #48	; 0x30
 8006a38:	2809      	cmp	r0, #9
 8006a3a:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006a3e:	f102 31ff 	add.w	r1, r2, #4294967295
 8006a42:	4603      	mov	r3, r0
 8006a44:	f300 80e4 	bgt.w	8006c10 <_svfprintf_r+0x6c0>
 8006a48:	3330      	adds	r3, #48	; 0x30
 8006a4a:	f801 3c01 	strb.w	r3, [r1, #-1]
 8006a4e:	3a02      	subs	r2, #2
 8006a50:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 8006a54:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 8006a58:	4282      	cmp	r2, r0
 8006a5a:	4619      	mov	r1, r3
 8006a5c:	f0c0 80da 	bcc.w	8006c14 <_svfprintf_r+0x6c4>
 8006a60:	9a03      	ldr	r2, [sp, #12]
 8006a62:	ab1b      	add	r3, sp, #108	; 0x6c
 8006a64:	1acb      	subs	r3, r1, r3
 8006a66:	2a01      	cmp	r2, #1
 8006a68:	9310      	str	r3, [sp, #64]	; 0x40
 8006a6a:	eb03 0902 	add.w	r9, r3, r2
 8006a6e:	dc02      	bgt.n	8006a76 <_svfprintf_r+0x526>
 8006a70:	f015 0701 	ands.w	r7, r5, #1
 8006a74:	d002      	beq.n	8006a7c <_svfprintf_r+0x52c>
 8006a76:	9b08      	ldr	r3, [sp, #32]
 8006a78:	2700      	movs	r7, #0
 8006a7a:	4499      	add	r9, r3
 8006a7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a7e:	b113      	cbz	r3, 8006a86 <_svfprintf_r+0x536>
 8006a80:	232d      	movs	r3, #45	; 0x2d
 8006a82:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8006a86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006a88:	2600      	movs	r6, #0
 8006a8a:	454e      	cmp	r6, r9
 8006a8c:	4633      	mov	r3, r6
 8006a8e:	bfb8      	it	lt
 8006a90:	464b      	movlt	r3, r9
 8006a92:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a94:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8006a98:	b113      	cbz	r3, 8006aa0 <_svfprintf_r+0x550>
 8006a9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a9c:	3301      	adds	r3, #1
 8006a9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006aa0:	f015 0302 	ands.w	r3, r5, #2
 8006aa4:	9314      	str	r3, [sp, #80]	; 0x50
 8006aa6:	bf1e      	ittt	ne
 8006aa8:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 8006aaa:	3302      	addne	r3, #2
 8006aac:	930b      	strne	r3, [sp, #44]	; 0x2c
 8006aae:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 8006ab2:	9315      	str	r3, [sp, #84]	; 0x54
 8006ab4:	d118      	bne.n	8006ae8 <_svfprintf_r+0x598>
 8006ab6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ab8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006aba:	1a9b      	subs	r3, r3, r2
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	930c      	str	r3, [sp, #48]	; 0x30
 8006ac0:	dd12      	ble.n	8006ae8 <_svfprintf_r+0x598>
 8006ac2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ac4:	2b10      	cmp	r3, #16
 8006ac6:	4ba9      	ldr	r3, [pc, #676]	; (8006d6c <_svfprintf_r+0x81c>)
 8006ac8:	6023      	str	r3, [r4, #0]
 8006aca:	f300 81d5 	bgt.w	8006e78 <_svfprintf_r+0x928>
 8006ace:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ad0:	6063      	str	r3, [r4, #4]
 8006ad2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ad4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ad6:	4413      	add	r3, r2
 8006ad8:	9321      	str	r3, [sp, #132]	; 0x84
 8006ada:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006adc:	3301      	adds	r3, #1
 8006ade:	2b07      	cmp	r3, #7
 8006ae0:	9320      	str	r3, [sp, #128]	; 0x80
 8006ae2:	f300 81e2 	bgt.w	8006eaa <_svfprintf_r+0x95a>
 8006ae6:	3408      	adds	r4, #8
 8006ae8:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8006aec:	b173      	cbz	r3, 8006b0c <_svfprintf_r+0x5bc>
 8006aee:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 8006af2:	6023      	str	r3, [r4, #0]
 8006af4:	2301      	movs	r3, #1
 8006af6:	6063      	str	r3, [r4, #4]
 8006af8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006afa:	3301      	adds	r3, #1
 8006afc:	9321      	str	r3, [sp, #132]	; 0x84
 8006afe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006b00:	3301      	adds	r3, #1
 8006b02:	2b07      	cmp	r3, #7
 8006b04:	9320      	str	r3, [sp, #128]	; 0x80
 8006b06:	f300 81da 	bgt.w	8006ebe <_svfprintf_r+0x96e>
 8006b0a:	3408      	adds	r4, #8
 8006b0c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006b0e:	b16b      	cbz	r3, 8006b2c <_svfprintf_r+0x5dc>
 8006b10:	ab18      	add	r3, sp, #96	; 0x60
 8006b12:	6023      	str	r3, [r4, #0]
 8006b14:	2302      	movs	r3, #2
 8006b16:	6063      	str	r3, [r4, #4]
 8006b18:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b1a:	3302      	adds	r3, #2
 8006b1c:	9321      	str	r3, [sp, #132]	; 0x84
 8006b1e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006b20:	3301      	adds	r3, #1
 8006b22:	2b07      	cmp	r3, #7
 8006b24:	9320      	str	r3, [sp, #128]	; 0x80
 8006b26:	f300 81d4 	bgt.w	8006ed2 <_svfprintf_r+0x982>
 8006b2a:	3408      	adds	r4, #8
 8006b2c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006b2e:	2b80      	cmp	r3, #128	; 0x80
 8006b30:	d114      	bne.n	8006b5c <_svfprintf_r+0x60c>
 8006b32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b34:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006b36:	1a9b      	subs	r3, r3, r2
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	dd0f      	ble.n	8006b5c <_svfprintf_r+0x60c>
 8006b3c:	4a8c      	ldr	r2, [pc, #560]	; (8006d70 <_svfprintf_r+0x820>)
 8006b3e:	6022      	str	r2, [r4, #0]
 8006b40:	2b10      	cmp	r3, #16
 8006b42:	f300 81d0 	bgt.w	8006ee6 <_svfprintf_r+0x996>
 8006b46:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006b48:	6063      	str	r3, [r4, #4]
 8006b4a:	4413      	add	r3, r2
 8006b4c:	9321      	str	r3, [sp, #132]	; 0x84
 8006b4e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006b50:	3301      	adds	r3, #1
 8006b52:	2b07      	cmp	r3, #7
 8006b54:	9320      	str	r3, [sp, #128]	; 0x80
 8006b56:	f300 81df 	bgt.w	8006f18 <_svfprintf_r+0x9c8>
 8006b5a:	3408      	adds	r4, #8
 8006b5c:	eba6 0609 	sub.w	r6, r6, r9
 8006b60:	2e00      	cmp	r6, #0
 8006b62:	dd0f      	ble.n	8006b84 <_svfprintf_r+0x634>
 8006b64:	4b82      	ldr	r3, [pc, #520]	; (8006d70 <_svfprintf_r+0x820>)
 8006b66:	6023      	str	r3, [r4, #0]
 8006b68:	2e10      	cmp	r6, #16
 8006b6a:	f300 81df 	bgt.w	8006f2c <_svfprintf_r+0x9dc>
 8006b6e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006b70:	9821      	ldr	r0, [sp, #132]	; 0x84
 8006b72:	6066      	str	r6, [r4, #4]
 8006b74:	3301      	adds	r3, #1
 8006b76:	4406      	add	r6, r0
 8006b78:	2b07      	cmp	r3, #7
 8006b7a:	9621      	str	r6, [sp, #132]	; 0x84
 8006b7c:	9320      	str	r3, [sp, #128]	; 0x80
 8006b7e:	f300 81ec 	bgt.w	8006f5a <_svfprintf_r+0xa0a>
 8006b82:	3408      	adds	r4, #8
 8006b84:	05eb      	lsls	r3, r5, #23
 8006b86:	f100 81f2 	bmi.w	8006f6e <_svfprintf_r+0xa1e>
 8006b8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b8c:	e884 0300 	stmia.w	r4, {r8, r9}
 8006b90:	444b      	add	r3, r9
 8006b92:	9321      	str	r3, [sp, #132]	; 0x84
 8006b94:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006b96:	3301      	adds	r3, #1
 8006b98:	2b07      	cmp	r3, #7
 8006b9a:	9320      	str	r3, [sp, #128]	; 0x80
 8006b9c:	f340 8419 	ble.w	80073d2 <_svfprintf_r+0xe82>
 8006ba0:	aa1f      	add	r2, sp, #124	; 0x7c
 8006ba2:	4651      	mov	r1, sl
 8006ba4:	4658      	mov	r0, fp
 8006ba6:	f002 fc61 	bl	800946c <__ssprint_r>
 8006baa:	2800      	cmp	r0, #0
 8006bac:	f040 8431 	bne.w	8007412 <_svfprintf_r+0xec2>
 8006bb0:	ac2c      	add	r4, sp, #176	; 0xb0
 8006bb2:	076b      	lsls	r3, r5, #29
 8006bb4:	f100 8410 	bmi.w	80073d8 <_svfprintf_r+0xe88>
 8006bb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006bbc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006bbe:	428a      	cmp	r2, r1
 8006bc0:	bfac      	ite	ge
 8006bc2:	189b      	addge	r3, r3, r2
 8006bc4:	185b      	addlt	r3, r3, r1
 8006bc6:	9309      	str	r3, [sp, #36]	; 0x24
 8006bc8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006bca:	b13b      	cbz	r3, 8006bdc <_svfprintf_r+0x68c>
 8006bcc:	aa1f      	add	r2, sp, #124	; 0x7c
 8006bce:	4651      	mov	r1, sl
 8006bd0:	4658      	mov	r0, fp
 8006bd2:	f002 fc4b 	bl	800946c <__ssprint_r>
 8006bd6:	2800      	cmp	r0, #0
 8006bd8:	f040 841b 	bne.w	8007412 <_svfprintf_r+0xec2>
 8006bdc:	2300      	movs	r3, #0
 8006bde:	9320      	str	r3, [sp, #128]	; 0x80
 8006be0:	9f04      	ldr	r7, [sp, #16]
 8006be2:	ac2c      	add	r4, sp, #176	; 0xb0
 8006be4:	e4ee      	b.n	80065c4 <_svfprintf_r+0x74>
 8006be6:	9b02      	ldr	r3, [sp, #8]
 8006be8:	2b65      	cmp	r3, #101	; 0x65
 8006bea:	f77f af0b 	ble.w	8006a04 <_svfprintf_r+0x4b4>
 8006bee:	9b02      	ldr	r3, [sp, #8]
 8006bf0:	2b66      	cmp	r3, #102	; 0x66
 8006bf2:	d124      	bne.n	8006c3e <_svfprintf_r+0x6ee>
 8006bf4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	dd19      	ble.n	8006c2e <_svfprintf_r+0x6de>
 8006bfa:	f1b9 0f00 	cmp.w	r9, #0
 8006bfe:	d101      	bne.n	8006c04 <_svfprintf_r+0x6b4>
 8006c00:	07ea      	lsls	r2, r5, #31
 8006c02:	d502      	bpl.n	8006c0a <_svfprintf_r+0x6ba>
 8006c04:	9a08      	ldr	r2, [sp, #32]
 8006c06:	4413      	add	r3, r2
 8006c08:	444b      	add	r3, r9
 8006c0a:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8006c0c:	4699      	mov	r9, r3
 8006c0e:	e735      	b.n	8006a7c <_svfprintf_r+0x52c>
 8006c10:	460a      	mov	r2, r1
 8006c12:	e70c      	b.n	8006a2e <_svfprintf_r+0x4de>
 8006c14:	f812 1b01 	ldrb.w	r1, [r2], #1
 8006c18:	f803 1b01 	strb.w	r1, [r3], #1
 8006c1c:	e71c      	b.n	8006a58 <_svfprintf_r+0x508>
 8006c1e:	2230      	movs	r2, #48	; 0x30
 8006c20:	4413      	add	r3, r2
 8006c22:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 8006c26:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8006c2a:	a91c      	add	r1, sp, #112	; 0x70
 8006c2c:	e718      	b.n	8006a60 <_svfprintf_r+0x510>
 8006c2e:	f1b9 0f00 	cmp.w	r9, #0
 8006c32:	d101      	bne.n	8006c38 <_svfprintf_r+0x6e8>
 8006c34:	07eb      	lsls	r3, r5, #31
 8006c36:	d515      	bpl.n	8006c64 <_svfprintf_r+0x714>
 8006c38:	9b08      	ldr	r3, [sp, #32]
 8006c3a:	3301      	adds	r3, #1
 8006c3c:	e7e4      	b.n	8006c08 <_svfprintf_r+0x6b8>
 8006c3e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006c40:	9b03      	ldr	r3, [sp, #12]
 8006c42:	429a      	cmp	r2, r3
 8006c44:	db06      	blt.n	8006c54 <_svfprintf_r+0x704>
 8006c46:	07ef      	lsls	r7, r5, #31
 8006c48:	d50e      	bpl.n	8006c68 <_svfprintf_r+0x718>
 8006c4a:	9b08      	ldr	r3, [sp, #32]
 8006c4c:	4413      	add	r3, r2
 8006c4e:	2267      	movs	r2, #103	; 0x67
 8006c50:	9202      	str	r2, [sp, #8]
 8006c52:	e7da      	b.n	8006c0a <_svfprintf_r+0x6ba>
 8006c54:	9b03      	ldr	r3, [sp, #12]
 8006c56:	9908      	ldr	r1, [sp, #32]
 8006c58:	2a00      	cmp	r2, #0
 8006c5a:	440b      	add	r3, r1
 8006c5c:	dcf7      	bgt.n	8006c4e <_svfprintf_r+0x6fe>
 8006c5e:	f1c2 0201 	rsb	r2, r2, #1
 8006c62:	e7f3      	b.n	8006c4c <_svfprintf_r+0x6fc>
 8006c64:	2301      	movs	r3, #1
 8006c66:	e7d0      	b.n	8006c0a <_svfprintf_r+0x6ba>
 8006c68:	4613      	mov	r3, r2
 8006c6a:	e7f0      	b.n	8006c4e <_svfprintf_r+0x6fe>
 8006c6c:	b10b      	cbz	r3, 8006c72 <_svfprintf_r+0x722>
 8006c6e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8006c72:	f015 0f20 	tst.w	r5, #32
 8006c76:	f107 0304 	add.w	r3, r7, #4
 8006c7a:	d008      	beq.n	8006c8e <_svfprintf_r+0x73e>
 8006c7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c7e:	683a      	ldr	r2, [r7, #0]
 8006c80:	17ce      	asrs	r6, r1, #31
 8006c82:	4608      	mov	r0, r1
 8006c84:	4631      	mov	r1, r6
 8006c86:	e9c2 0100 	strd	r0, r1, [r2]
 8006c8a:	461f      	mov	r7, r3
 8006c8c:	e49a      	b.n	80065c4 <_svfprintf_r+0x74>
 8006c8e:	06ee      	lsls	r6, r5, #27
 8006c90:	d503      	bpl.n	8006c9a <_svfprintf_r+0x74a>
 8006c92:	683a      	ldr	r2, [r7, #0]
 8006c94:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c96:	6011      	str	r1, [r2, #0]
 8006c98:	e7f7      	b.n	8006c8a <_svfprintf_r+0x73a>
 8006c9a:	0668      	lsls	r0, r5, #25
 8006c9c:	d5f9      	bpl.n	8006c92 <_svfprintf_r+0x742>
 8006c9e:	683a      	ldr	r2, [r7, #0]
 8006ca0:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8006ca4:	8011      	strh	r1, [r2, #0]
 8006ca6:	e7f0      	b.n	8006c8a <_svfprintf_r+0x73a>
 8006ca8:	f045 0510 	orr.w	r5, r5, #16
 8006cac:	f015 0320 	ands.w	r3, r5, #32
 8006cb0:	d022      	beq.n	8006cf8 <_svfprintf_r+0x7a8>
 8006cb2:	3707      	adds	r7, #7
 8006cb4:	f027 0707 	bic.w	r7, r7, #7
 8006cb8:	f107 0308 	add.w	r3, r7, #8
 8006cbc:	e9d7 6700 	ldrd	r6, r7, [r7]
 8006cc0:	9304      	str	r3, [sp, #16]
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8006cca:	f1b9 3fff 	cmp.w	r9, #4294967295
 8006cce:	f000 83db 	beq.w	8007488 <_svfprintf_r+0xf38>
 8006cd2:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 8006cd6:	920b      	str	r2, [sp, #44]	; 0x2c
 8006cd8:	ea56 0207 	orrs.w	r2, r6, r7
 8006cdc:	f040 83d9 	bne.w	8007492 <_svfprintf_r+0xf42>
 8006ce0:	f1b9 0f00 	cmp.w	r9, #0
 8006ce4:	f000 80aa 	beq.w	8006e3c <_svfprintf_r+0x8ec>
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d076      	beq.n	8006dda <_svfprintf_r+0x88a>
 8006cec:	2b02      	cmp	r3, #2
 8006cee:	f000 8091 	beq.w	8006e14 <_svfprintf_r+0x8c4>
 8006cf2:	2600      	movs	r6, #0
 8006cf4:	2700      	movs	r7, #0
 8006cf6:	e3d2      	b.n	800749e <_svfprintf_r+0xf4e>
 8006cf8:	1d3a      	adds	r2, r7, #4
 8006cfa:	f015 0110 	ands.w	r1, r5, #16
 8006cfe:	9204      	str	r2, [sp, #16]
 8006d00:	d002      	beq.n	8006d08 <_svfprintf_r+0x7b8>
 8006d02:	683e      	ldr	r6, [r7, #0]
 8006d04:	2700      	movs	r7, #0
 8006d06:	e7dd      	b.n	8006cc4 <_svfprintf_r+0x774>
 8006d08:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 8006d0c:	d0f9      	beq.n	8006d02 <_svfprintf_r+0x7b2>
 8006d0e:	883e      	ldrh	r6, [r7, #0]
 8006d10:	2700      	movs	r7, #0
 8006d12:	e7d6      	b.n	8006cc2 <_svfprintf_r+0x772>
 8006d14:	1d3b      	adds	r3, r7, #4
 8006d16:	9304      	str	r3, [sp, #16]
 8006d18:	2330      	movs	r3, #48	; 0x30
 8006d1a:	2278      	movs	r2, #120	; 0x78
 8006d1c:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8006d20:	4b14      	ldr	r3, [pc, #80]	; (8006d74 <_svfprintf_r+0x824>)
 8006d22:	683e      	ldr	r6, [r7, #0]
 8006d24:	9311      	str	r3, [sp, #68]	; 0x44
 8006d26:	2700      	movs	r7, #0
 8006d28:	f045 0502 	orr.w	r5, r5, #2
 8006d2c:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 8006d30:	2302      	movs	r3, #2
 8006d32:	9202      	str	r2, [sp, #8]
 8006d34:	e7c6      	b.n	8006cc4 <_svfprintf_r+0x774>
 8006d36:	1d3b      	adds	r3, r7, #4
 8006d38:	2600      	movs	r6, #0
 8006d3a:	f1b9 3fff 	cmp.w	r9, #4294967295
 8006d3e:	9304      	str	r3, [sp, #16]
 8006d40:	f8d7 8000 	ldr.w	r8, [r7]
 8006d44:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8006d48:	d00a      	beq.n	8006d60 <_svfprintf_r+0x810>
 8006d4a:	464a      	mov	r2, r9
 8006d4c:	4631      	mov	r1, r6
 8006d4e:	4640      	mov	r0, r8
 8006d50:	f7f9 fa46 	bl	80001e0 <memchr>
 8006d54:	2800      	cmp	r0, #0
 8006d56:	f000 808d 	beq.w	8006e74 <_svfprintf_r+0x924>
 8006d5a:	eba0 0908 	sub.w	r9, r0, r8
 8006d5e:	e5cb      	b.n	80068f8 <_svfprintf_r+0x3a8>
 8006d60:	4640      	mov	r0, r8
 8006d62:	f7f9 fa35 	bl	80001d0 <strlen>
 8006d66:	4681      	mov	r9, r0
 8006d68:	e5c6      	b.n	80068f8 <_svfprintf_r+0x3a8>
 8006d6a:	bf00      	nop
 8006d6c:	08009c84 	.word	0x08009c84
 8006d70:	08009c94 	.word	0x08009c94
 8006d74:	08009c71 	.word	0x08009c71
 8006d78:	f045 0510 	orr.w	r5, r5, #16
 8006d7c:	06a9      	lsls	r1, r5, #26
 8006d7e:	d509      	bpl.n	8006d94 <_svfprintf_r+0x844>
 8006d80:	3707      	adds	r7, #7
 8006d82:	f027 0707 	bic.w	r7, r7, #7
 8006d86:	f107 0308 	add.w	r3, r7, #8
 8006d8a:	e9d7 6700 	ldrd	r6, r7, [r7]
 8006d8e:	9304      	str	r3, [sp, #16]
 8006d90:	2301      	movs	r3, #1
 8006d92:	e797      	b.n	8006cc4 <_svfprintf_r+0x774>
 8006d94:	1d3b      	adds	r3, r7, #4
 8006d96:	f015 0f10 	tst.w	r5, #16
 8006d9a:	9304      	str	r3, [sp, #16]
 8006d9c:	d001      	beq.n	8006da2 <_svfprintf_r+0x852>
 8006d9e:	683e      	ldr	r6, [r7, #0]
 8006da0:	e002      	b.n	8006da8 <_svfprintf_r+0x858>
 8006da2:	066a      	lsls	r2, r5, #25
 8006da4:	d5fb      	bpl.n	8006d9e <_svfprintf_r+0x84e>
 8006da6:	883e      	ldrh	r6, [r7, #0]
 8006da8:	2700      	movs	r7, #0
 8006daa:	e7f1      	b.n	8006d90 <_svfprintf_r+0x840>
 8006dac:	b10b      	cbz	r3, 8006db2 <_svfprintf_r+0x862>
 8006dae:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8006db2:	4ba3      	ldr	r3, [pc, #652]	; (8007040 <_svfprintf_r+0xaf0>)
 8006db4:	e4c2      	b.n	800673c <_svfprintf_r+0x1ec>
 8006db6:	1d3b      	adds	r3, r7, #4
 8006db8:	f015 0f10 	tst.w	r5, #16
 8006dbc:	9304      	str	r3, [sp, #16]
 8006dbe:	d001      	beq.n	8006dc4 <_svfprintf_r+0x874>
 8006dc0:	683e      	ldr	r6, [r7, #0]
 8006dc2:	e002      	b.n	8006dca <_svfprintf_r+0x87a>
 8006dc4:	066e      	lsls	r6, r5, #25
 8006dc6:	d5fb      	bpl.n	8006dc0 <_svfprintf_r+0x870>
 8006dc8:	883e      	ldrh	r6, [r7, #0]
 8006dca:	2700      	movs	r7, #0
 8006dcc:	e4c2      	b.n	8006754 <_svfprintf_r+0x204>
 8006dce:	4643      	mov	r3, r8
 8006dd0:	e366      	b.n	80074a0 <_svfprintf_r+0xf50>
 8006dd2:	2f00      	cmp	r7, #0
 8006dd4:	bf08      	it	eq
 8006dd6:	2e0a      	cmpeq	r6, #10
 8006dd8:	d205      	bcs.n	8006de6 <_svfprintf_r+0x896>
 8006dda:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8006dde:	3630      	adds	r6, #48	; 0x30
 8006de0:	f808 6d41 	strb.w	r6, [r8, #-65]!
 8006de4:	e377      	b.n	80074d6 <_svfprintf_r+0xf86>
 8006de6:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8006dea:	4630      	mov	r0, r6
 8006dec:	4639      	mov	r1, r7
 8006dee:	220a      	movs	r2, #10
 8006df0:	2300      	movs	r3, #0
 8006df2:	f7f9 ff45 	bl	8000c80 <__aeabi_uldivmod>
 8006df6:	3230      	adds	r2, #48	; 0x30
 8006df8:	f808 2d01 	strb.w	r2, [r8, #-1]!
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	4630      	mov	r0, r6
 8006e00:	4639      	mov	r1, r7
 8006e02:	220a      	movs	r2, #10
 8006e04:	f7f9 ff3c 	bl	8000c80 <__aeabi_uldivmod>
 8006e08:	4606      	mov	r6, r0
 8006e0a:	460f      	mov	r7, r1
 8006e0c:	ea56 0307 	orrs.w	r3, r6, r7
 8006e10:	d1eb      	bne.n	8006dea <_svfprintf_r+0x89a>
 8006e12:	e360      	b.n	80074d6 <_svfprintf_r+0xf86>
 8006e14:	2600      	movs	r6, #0
 8006e16:	2700      	movs	r7, #0
 8006e18:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8006e1c:	f006 030f 	and.w	r3, r6, #15
 8006e20:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006e22:	5cd3      	ldrb	r3, [r2, r3]
 8006e24:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8006e28:	0933      	lsrs	r3, r6, #4
 8006e2a:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8006e2e:	093a      	lsrs	r2, r7, #4
 8006e30:	461e      	mov	r6, r3
 8006e32:	4617      	mov	r7, r2
 8006e34:	ea56 0307 	orrs.w	r3, r6, r7
 8006e38:	d1f0      	bne.n	8006e1c <_svfprintf_r+0x8cc>
 8006e3a:	e34c      	b.n	80074d6 <_svfprintf_r+0xf86>
 8006e3c:	b93b      	cbnz	r3, 8006e4e <_svfprintf_r+0x8fe>
 8006e3e:	07ea      	lsls	r2, r5, #31
 8006e40:	d505      	bpl.n	8006e4e <_svfprintf_r+0x8fe>
 8006e42:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8006e46:	2330      	movs	r3, #48	; 0x30
 8006e48:	f808 3d41 	strb.w	r3, [r8, #-65]!
 8006e4c:	e343      	b.n	80074d6 <_svfprintf_r+0xf86>
 8006e4e:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8006e52:	e340      	b.n	80074d6 <_svfprintf_r+0xf86>
 8006e54:	b10b      	cbz	r3, 8006e5a <_svfprintf_r+0x90a>
 8006e56:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8006e5a:	9b02      	ldr	r3, [sp, #8]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	f000 82f7 	beq.w	8007450 <_svfprintf_r+0xf00>
 8006e62:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8006e66:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8006e6a:	2600      	movs	r6, #0
 8006e6c:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8006e70:	9704      	str	r7, [sp, #16]
 8006e72:	e4e8      	b.n	8006846 <_svfprintf_r+0x2f6>
 8006e74:	4606      	mov	r6, r0
 8006e76:	e53f      	b.n	80068f8 <_svfprintf_r+0x3a8>
 8006e78:	2310      	movs	r3, #16
 8006e7a:	6063      	str	r3, [r4, #4]
 8006e7c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e7e:	3310      	adds	r3, #16
 8006e80:	9321      	str	r3, [sp, #132]	; 0x84
 8006e82:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006e84:	3301      	adds	r3, #1
 8006e86:	2b07      	cmp	r3, #7
 8006e88:	9320      	str	r3, [sp, #128]	; 0x80
 8006e8a:	dc04      	bgt.n	8006e96 <_svfprintf_r+0x946>
 8006e8c:	3408      	adds	r4, #8
 8006e8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e90:	3b10      	subs	r3, #16
 8006e92:	930c      	str	r3, [sp, #48]	; 0x30
 8006e94:	e615      	b.n	8006ac2 <_svfprintf_r+0x572>
 8006e96:	aa1f      	add	r2, sp, #124	; 0x7c
 8006e98:	4651      	mov	r1, sl
 8006e9a:	4658      	mov	r0, fp
 8006e9c:	f002 fae6 	bl	800946c <__ssprint_r>
 8006ea0:	2800      	cmp	r0, #0
 8006ea2:	f040 82b6 	bne.w	8007412 <_svfprintf_r+0xec2>
 8006ea6:	ac2c      	add	r4, sp, #176	; 0xb0
 8006ea8:	e7f1      	b.n	8006e8e <_svfprintf_r+0x93e>
 8006eaa:	aa1f      	add	r2, sp, #124	; 0x7c
 8006eac:	4651      	mov	r1, sl
 8006eae:	4658      	mov	r0, fp
 8006eb0:	f002 fadc 	bl	800946c <__ssprint_r>
 8006eb4:	2800      	cmp	r0, #0
 8006eb6:	f040 82ac 	bne.w	8007412 <_svfprintf_r+0xec2>
 8006eba:	ac2c      	add	r4, sp, #176	; 0xb0
 8006ebc:	e614      	b.n	8006ae8 <_svfprintf_r+0x598>
 8006ebe:	aa1f      	add	r2, sp, #124	; 0x7c
 8006ec0:	4651      	mov	r1, sl
 8006ec2:	4658      	mov	r0, fp
 8006ec4:	f002 fad2 	bl	800946c <__ssprint_r>
 8006ec8:	2800      	cmp	r0, #0
 8006eca:	f040 82a2 	bne.w	8007412 <_svfprintf_r+0xec2>
 8006ece:	ac2c      	add	r4, sp, #176	; 0xb0
 8006ed0:	e61c      	b.n	8006b0c <_svfprintf_r+0x5bc>
 8006ed2:	aa1f      	add	r2, sp, #124	; 0x7c
 8006ed4:	4651      	mov	r1, sl
 8006ed6:	4658      	mov	r0, fp
 8006ed8:	f002 fac8 	bl	800946c <__ssprint_r>
 8006edc:	2800      	cmp	r0, #0
 8006ede:	f040 8298 	bne.w	8007412 <_svfprintf_r+0xec2>
 8006ee2:	ac2c      	add	r4, sp, #176	; 0xb0
 8006ee4:	e622      	b.n	8006b2c <_svfprintf_r+0x5dc>
 8006ee6:	2210      	movs	r2, #16
 8006ee8:	6062      	str	r2, [r4, #4]
 8006eea:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006eec:	3210      	adds	r2, #16
 8006eee:	9221      	str	r2, [sp, #132]	; 0x84
 8006ef0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006ef2:	3201      	adds	r2, #1
 8006ef4:	2a07      	cmp	r2, #7
 8006ef6:	9220      	str	r2, [sp, #128]	; 0x80
 8006ef8:	dc02      	bgt.n	8006f00 <_svfprintf_r+0x9b0>
 8006efa:	3408      	adds	r4, #8
 8006efc:	3b10      	subs	r3, #16
 8006efe:	e61d      	b.n	8006b3c <_svfprintf_r+0x5ec>
 8006f00:	aa1f      	add	r2, sp, #124	; 0x7c
 8006f02:	4651      	mov	r1, sl
 8006f04:	4658      	mov	r0, fp
 8006f06:	930c      	str	r3, [sp, #48]	; 0x30
 8006f08:	f002 fab0 	bl	800946c <__ssprint_r>
 8006f0c:	2800      	cmp	r0, #0
 8006f0e:	f040 8280 	bne.w	8007412 <_svfprintf_r+0xec2>
 8006f12:	ac2c      	add	r4, sp, #176	; 0xb0
 8006f14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f16:	e7f1      	b.n	8006efc <_svfprintf_r+0x9ac>
 8006f18:	aa1f      	add	r2, sp, #124	; 0x7c
 8006f1a:	4651      	mov	r1, sl
 8006f1c:	4658      	mov	r0, fp
 8006f1e:	f002 faa5 	bl	800946c <__ssprint_r>
 8006f22:	2800      	cmp	r0, #0
 8006f24:	f040 8275 	bne.w	8007412 <_svfprintf_r+0xec2>
 8006f28:	ac2c      	add	r4, sp, #176	; 0xb0
 8006f2a:	e617      	b.n	8006b5c <_svfprintf_r+0x60c>
 8006f2c:	2310      	movs	r3, #16
 8006f2e:	6063      	str	r3, [r4, #4]
 8006f30:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f32:	3310      	adds	r3, #16
 8006f34:	9321      	str	r3, [sp, #132]	; 0x84
 8006f36:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006f38:	3301      	adds	r3, #1
 8006f3a:	2b07      	cmp	r3, #7
 8006f3c:	9320      	str	r3, [sp, #128]	; 0x80
 8006f3e:	dc02      	bgt.n	8006f46 <_svfprintf_r+0x9f6>
 8006f40:	3408      	adds	r4, #8
 8006f42:	3e10      	subs	r6, #16
 8006f44:	e60e      	b.n	8006b64 <_svfprintf_r+0x614>
 8006f46:	aa1f      	add	r2, sp, #124	; 0x7c
 8006f48:	4651      	mov	r1, sl
 8006f4a:	4658      	mov	r0, fp
 8006f4c:	f002 fa8e 	bl	800946c <__ssprint_r>
 8006f50:	2800      	cmp	r0, #0
 8006f52:	f040 825e 	bne.w	8007412 <_svfprintf_r+0xec2>
 8006f56:	ac2c      	add	r4, sp, #176	; 0xb0
 8006f58:	e7f3      	b.n	8006f42 <_svfprintf_r+0x9f2>
 8006f5a:	aa1f      	add	r2, sp, #124	; 0x7c
 8006f5c:	4651      	mov	r1, sl
 8006f5e:	4658      	mov	r0, fp
 8006f60:	f002 fa84 	bl	800946c <__ssprint_r>
 8006f64:	2800      	cmp	r0, #0
 8006f66:	f040 8254 	bne.w	8007412 <_svfprintf_r+0xec2>
 8006f6a:	ac2c      	add	r4, sp, #176	; 0xb0
 8006f6c:	e60a      	b.n	8006b84 <_svfprintf_r+0x634>
 8006f6e:	9b02      	ldr	r3, [sp, #8]
 8006f70:	2b65      	cmp	r3, #101	; 0x65
 8006f72:	f340 81a9 	ble.w	80072c8 <_svfprintf_r+0xd78>
 8006f76:	2200      	movs	r2, #0
 8006f78:	2300      	movs	r3, #0
 8006f7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f7e:	f7f9 fd9f 	bl	8000ac0 <__aeabi_dcmpeq>
 8006f82:	2800      	cmp	r0, #0
 8006f84:	d062      	beq.n	800704c <_svfprintf_r+0xafc>
 8006f86:	4b2f      	ldr	r3, [pc, #188]	; (8007044 <_svfprintf_r+0xaf4>)
 8006f88:	6023      	str	r3, [r4, #0]
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	6063      	str	r3, [r4, #4]
 8006f8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f90:	3301      	adds	r3, #1
 8006f92:	9321      	str	r3, [sp, #132]	; 0x84
 8006f94:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006f96:	3301      	adds	r3, #1
 8006f98:	2b07      	cmp	r3, #7
 8006f9a:	9320      	str	r3, [sp, #128]	; 0x80
 8006f9c:	dc25      	bgt.n	8006fea <_svfprintf_r+0xa9a>
 8006f9e:	3408      	adds	r4, #8
 8006fa0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006fa2:	9a03      	ldr	r2, [sp, #12]
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	db02      	blt.n	8006fae <_svfprintf_r+0xa5e>
 8006fa8:	07ee      	lsls	r6, r5, #31
 8006faa:	f57f ae02 	bpl.w	8006bb2 <_svfprintf_r+0x662>
 8006fae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006fb0:	6023      	str	r3, [r4, #0]
 8006fb2:	9b08      	ldr	r3, [sp, #32]
 8006fb4:	6063      	str	r3, [r4, #4]
 8006fb6:	9a08      	ldr	r2, [sp, #32]
 8006fb8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006fba:	4413      	add	r3, r2
 8006fbc:	9321      	str	r3, [sp, #132]	; 0x84
 8006fbe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006fc0:	3301      	adds	r3, #1
 8006fc2:	2b07      	cmp	r3, #7
 8006fc4:	9320      	str	r3, [sp, #128]	; 0x80
 8006fc6:	dc1a      	bgt.n	8006ffe <_svfprintf_r+0xaae>
 8006fc8:	3408      	adds	r4, #8
 8006fca:	9b03      	ldr	r3, [sp, #12]
 8006fcc:	1e5e      	subs	r6, r3, #1
 8006fce:	2e00      	cmp	r6, #0
 8006fd0:	f77f adef 	ble.w	8006bb2 <_svfprintf_r+0x662>
 8006fd4:	4f1c      	ldr	r7, [pc, #112]	; (8007048 <_svfprintf_r+0xaf8>)
 8006fd6:	f04f 0810 	mov.w	r8, #16
 8006fda:	2e10      	cmp	r6, #16
 8006fdc:	6027      	str	r7, [r4, #0]
 8006fde:	dc18      	bgt.n	8007012 <_svfprintf_r+0xac2>
 8006fe0:	6066      	str	r6, [r4, #4]
 8006fe2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006fe4:	441e      	add	r6, r3
 8006fe6:	9621      	str	r6, [sp, #132]	; 0x84
 8006fe8:	e5d4      	b.n	8006b94 <_svfprintf_r+0x644>
 8006fea:	aa1f      	add	r2, sp, #124	; 0x7c
 8006fec:	4651      	mov	r1, sl
 8006fee:	4658      	mov	r0, fp
 8006ff0:	f002 fa3c 	bl	800946c <__ssprint_r>
 8006ff4:	2800      	cmp	r0, #0
 8006ff6:	f040 820c 	bne.w	8007412 <_svfprintf_r+0xec2>
 8006ffa:	ac2c      	add	r4, sp, #176	; 0xb0
 8006ffc:	e7d0      	b.n	8006fa0 <_svfprintf_r+0xa50>
 8006ffe:	aa1f      	add	r2, sp, #124	; 0x7c
 8007000:	4651      	mov	r1, sl
 8007002:	4658      	mov	r0, fp
 8007004:	f002 fa32 	bl	800946c <__ssprint_r>
 8007008:	2800      	cmp	r0, #0
 800700a:	f040 8202 	bne.w	8007412 <_svfprintf_r+0xec2>
 800700e:	ac2c      	add	r4, sp, #176	; 0xb0
 8007010:	e7db      	b.n	8006fca <_svfprintf_r+0xa7a>
 8007012:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007014:	f8c4 8004 	str.w	r8, [r4, #4]
 8007018:	3310      	adds	r3, #16
 800701a:	9321      	str	r3, [sp, #132]	; 0x84
 800701c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800701e:	3301      	adds	r3, #1
 8007020:	2b07      	cmp	r3, #7
 8007022:	9320      	str	r3, [sp, #128]	; 0x80
 8007024:	dc02      	bgt.n	800702c <_svfprintf_r+0xadc>
 8007026:	3408      	adds	r4, #8
 8007028:	3e10      	subs	r6, #16
 800702a:	e7d6      	b.n	8006fda <_svfprintf_r+0xa8a>
 800702c:	aa1f      	add	r2, sp, #124	; 0x7c
 800702e:	4651      	mov	r1, sl
 8007030:	4658      	mov	r0, fp
 8007032:	f002 fa1b 	bl	800946c <__ssprint_r>
 8007036:	2800      	cmp	r0, #0
 8007038:	f040 81eb 	bne.w	8007412 <_svfprintf_r+0xec2>
 800703c:	ac2c      	add	r4, sp, #176	; 0xb0
 800703e:	e7f3      	b.n	8007028 <_svfprintf_r+0xad8>
 8007040:	08009c71 	.word	0x08009c71
 8007044:	08009c82 	.word	0x08009c82
 8007048:	08009c94 	.word	0x08009c94
 800704c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800704e:	2b00      	cmp	r3, #0
 8007050:	dc7a      	bgt.n	8007148 <_svfprintf_r+0xbf8>
 8007052:	4b9b      	ldr	r3, [pc, #620]	; (80072c0 <_svfprintf_r+0xd70>)
 8007054:	6023      	str	r3, [r4, #0]
 8007056:	2301      	movs	r3, #1
 8007058:	6063      	str	r3, [r4, #4]
 800705a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800705c:	3301      	adds	r3, #1
 800705e:	9321      	str	r3, [sp, #132]	; 0x84
 8007060:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007062:	3301      	adds	r3, #1
 8007064:	2b07      	cmp	r3, #7
 8007066:	9320      	str	r3, [sp, #128]	; 0x80
 8007068:	dc44      	bgt.n	80070f4 <_svfprintf_r+0xba4>
 800706a:	3408      	adds	r4, #8
 800706c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800706e:	b923      	cbnz	r3, 800707a <_svfprintf_r+0xb2a>
 8007070:	9b03      	ldr	r3, [sp, #12]
 8007072:	b913      	cbnz	r3, 800707a <_svfprintf_r+0xb2a>
 8007074:	07e8      	lsls	r0, r5, #31
 8007076:	f57f ad9c 	bpl.w	8006bb2 <_svfprintf_r+0x662>
 800707a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800707c:	6023      	str	r3, [r4, #0]
 800707e:	9b08      	ldr	r3, [sp, #32]
 8007080:	6063      	str	r3, [r4, #4]
 8007082:	9a08      	ldr	r2, [sp, #32]
 8007084:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007086:	4413      	add	r3, r2
 8007088:	9321      	str	r3, [sp, #132]	; 0x84
 800708a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800708c:	3301      	adds	r3, #1
 800708e:	2b07      	cmp	r3, #7
 8007090:	9320      	str	r3, [sp, #128]	; 0x80
 8007092:	dc39      	bgt.n	8007108 <_svfprintf_r+0xbb8>
 8007094:	f104 0308 	add.w	r3, r4, #8
 8007098:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800709a:	2e00      	cmp	r6, #0
 800709c:	da19      	bge.n	80070d2 <_svfprintf_r+0xb82>
 800709e:	4f89      	ldr	r7, [pc, #548]	; (80072c4 <_svfprintf_r+0xd74>)
 80070a0:	4276      	negs	r6, r6
 80070a2:	2410      	movs	r4, #16
 80070a4:	2e10      	cmp	r6, #16
 80070a6:	601f      	str	r7, [r3, #0]
 80070a8:	dc38      	bgt.n	800711c <_svfprintf_r+0xbcc>
 80070aa:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80070ac:	605e      	str	r6, [r3, #4]
 80070ae:	4416      	add	r6, r2
 80070b0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80070b2:	9621      	str	r6, [sp, #132]	; 0x84
 80070b4:	3201      	adds	r2, #1
 80070b6:	2a07      	cmp	r2, #7
 80070b8:	f103 0308 	add.w	r3, r3, #8
 80070bc:	9220      	str	r2, [sp, #128]	; 0x80
 80070be:	dd08      	ble.n	80070d2 <_svfprintf_r+0xb82>
 80070c0:	aa1f      	add	r2, sp, #124	; 0x7c
 80070c2:	4651      	mov	r1, sl
 80070c4:	4658      	mov	r0, fp
 80070c6:	f002 f9d1 	bl	800946c <__ssprint_r>
 80070ca:	2800      	cmp	r0, #0
 80070cc:	f040 81a1 	bne.w	8007412 <_svfprintf_r+0xec2>
 80070d0:	ab2c      	add	r3, sp, #176	; 0xb0
 80070d2:	9a03      	ldr	r2, [sp, #12]
 80070d4:	605a      	str	r2, [r3, #4]
 80070d6:	9903      	ldr	r1, [sp, #12]
 80070d8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80070da:	f8c3 8000 	str.w	r8, [r3]
 80070de:	440a      	add	r2, r1
 80070e0:	9221      	str	r2, [sp, #132]	; 0x84
 80070e2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80070e4:	3201      	adds	r2, #1
 80070e6:	2a07      	cmp	r2, #7
 80070e8:	9220      	str	r2, [sp, #128]	; 0x80
 80070ea:	f73f ad59 	bgt.w	8006ba0 <_svfprintf_r+0x650>
 80070ee:	f103 0408 	add.w	r4, r3, #8
 80070f2:	e55e      	b.n	8006bb2 <_svfprintf_r+0x662>
 80070f4:	aa1f      	add	r2, sp, #124	; 0x7c
 80070f6:	4651      	mov	r1, sl
 80070f8:	4658      	mov	r0, fp
 80070fa:	f002 f9b7 	bl	800946c <__ssprint_r>
 80070fe:	2800      	cmp	r0, #0
 8007100:	f040 8187 	bne.w	8007412 <_svfprintf_r+0xec2>
 8007104:	ac2c      	add	r4, sp, #176	; 0xb0
 8007106:	e7b1      	b.n	800706c <_svfprintf_r+0xb1c>
 8007108:	aa1f      	add	r2, sp, #124	; 0x7c
 800710a:	4651      	mov	r1, sl
 800710c:	4658      	mov	r0, fp
 800710e:	f002 f9ad 	bl	800946c <__ssprint_r>
 8007112:	2800      	cmp	r0, #0
 8007114:	f040 817d 	bne.w	8007412 <_svfprintf_r+0xec2>
 8007118:	ab2c      	add	r3, sp, #176	; 0xb0
 800711a:	e7bd      	b.n	8007098 <_svfprintf_r+0xb48>
 800711c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800711e:	605c      	str	r4, [r3, #4]
 8007120:	3210      	adds	r2, #16
 8007122:	9221      	str	r2, [sp, #132]	; 0x84
 8007124:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007126:	3201      	adds	r2, #1
 8007128:	2a07      	cmp	r2, #7
 800712a:	9220      	str	r2, [sp, #128]	; 0x80
 800712c:	dc02      	bgt.n	8007134 <_svfprintf_r+0xbe4>
 800712e:	3308      	adds	r3, #8
 8007130:	3e10      	subs	r6, #16
 8007132:	e7b7      	b.n	80070a4 <_svfprintf_r+0xb54>
 8007134:	aa1f      	add	r2, sp, #124	; 0x7c
 8007136:	4651      	mov	r1, sl
 8007138:	4658      	mov	r0, fp
 800713a:	f002 f997 	bl	800946c <__ssprint_r>
 800713e:	2800      	cmp	r0, #0
 8007140:	f040 8167 	bne.w	8007412 <_svfprintf_r+0xec2>
 8007144:	ab2c      	add	r3, sp, #176	; 0xb0
 8007146:	e7f3      	b.n	8007130 <_svfprintf_r+0xbe0>
 8007148:	9b03      	ldr	r3, [sp, #12]
 800714a:	42bb      	cmp	r3, r7
 800714c:	bfa8      	it	ge
 800714e:	463b      	movge	r3, r7
 8007150:	2b00      	cmp	r3, #0
 8007152:	461e      	mov	r6, r3
 8007154:	dd0b      	ble.n	800716e <_svfprintf_r+0xc1e>
 8007156:	6063      	str	r3, [r4, #4]
 8007158:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800715a:	f8c4 8000 	str.w	r8, [r4]
 800715e:	4433      	add	r3, r6
 8007160:	9321      	str	r3, [sp, #132]	; 0x84
 8007162:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007164:	3301      	adds	r3, #1
 8007166:	2b07      	cmp	r3, #7
 8007168:	9320      	str	r3, [sp, #128]	; 0x80
 800716a:	dc5f      	bgt.n	800722c <_svfprintf_r+0xcdc>
 800716c:	3408      	adds	r4, #8
 800716e:	2e00      	cmp	r6, #0
 8007170:	bfac      	ite	ge
 8007172:	1bbe      	subge	r6, r7, r6
 8007174:	463e      	movlt	r6, r7
 8007176:	2e00      	cmp	r6, #0
 8007178:	dd0f      	ble.n	800719a <_svfprintf_r+0xc4a>
 800717a:	f8df 9148 	ldr.w	r9, [pc, #328]	; 80072c4 <_svfprintf_r+0xd74>
 800717e:	f8c4 9000 	str.w	r9, [r4]
 8007182:	2e10      	cmp	r6, #16
 8007184:	dc5c      	bgt.n	8007240 <_svfprintf_r+0xcf0>
 8007186:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007188:	6066      	str	r6, [r4, #4]
 800718a:	441e      	add	r6, r3
 800718c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800718e:	9621      	str	r6, [sp, #132]	; 0x84
 8007190:	3301      	adds	r3, #1
 8007192:	2b07      	cmp	r3, #7
 8007194:	9320      	str	r3, [sp, #128]	; 0x80
 8007196:	dc6a      	bgt.n	800726e <_svfprintf_r+0xd1e>
 8007198:	3408      	adds	r4, #8
 800719a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800719c:	9a03      	ldr	r2, [sp, #12]
 800719e:	4293      	cmp	r3, r2
 80071a0:	db01      	blt.n	80071a6 <_svfprintf_r+0xc56>
 80071a2:	07e9      	lsls	r1, r5, #31
 80071a4:	d50d      	bpl.n	80071c2 <_svfprintf_r+0xc72>
 80071a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80071a8:	6023      	str	r3, [r4, #0]
 80071aa:	9b08      	ldr	r3, [sp, #32]
 80071ac:	6063      	str	r3, [r4, #4]
 80071ae:	9a08      	ldr	r2, [sp, #32]
 80071b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80071b2:	4413      	add	r3, r2
 80071b4:	9321      	str	r3, [sp, #132]	; 0x84
 80071b6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80071b8:	3301      	adds	r3, #1
 80071ba:	2b07      	cmp	r3, #7
 80071bc:	9320      	str	r3, [sp, #128]	; 0x80
 80071be:	dc60      	bgt.n	8007282 <_svfprintf_r+0xd32>
 80071c0:	3408      	adds	r4, #8
 80071c2:	9b03      	ldr	r3, [sp, #12]
 80071c4:	9a03      	ldr	r2, [sp, #12]
 80071c6:	1bde      	subs	r6, r3, r7
 80071c8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80071ca:	1ad3      	subs	r3, r2, r3
 80071cc:	429e      	cmp	r6, r3
 80071ce:	bfa8      	it	ge
 80071d0:	461e      	movge	r6, r3
 80071d2:	2e00      	cmp	r6, #0
 80071d4:	dd0b      	ble.n	80071ee <_svfprintf_r+0xc9e>
 80071d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80071d8:	6066      	str	r6, [r4, #4]
 80071da:	4433      	add	r3, r6
 80071dc:	9321      	str	r3, [sp, #132]	; 0x84
 80071de:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80071e0:	3301      	adds	r3, #1
 80071e2:	4447      	add	r7, r8
 80071e4:	2b07      	cmp	r3, #7
 80071e6:	6027      	str	r7, [r4, #0]
 80071e8:	9320      	str	r3, [sp, #128]	; 0x80
 80071ea:	dc54      	bgt.n	8007296 <_svfprintf_r+0xd46>
 80071ec:	3408      	adds	r4, #8
 80071ee:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80071f0:	9a03      	ldr	r2, [sp, #12]
 80071f2:	2e00      	cmp	r6, #0
 80071f4:	eba2 0303 	sub.w	r3, r2, r3
 80071f8:	bfac      	ite	ge
 80071fa:	1b9e      	subge	r6, r3, r6
 80071fc:	461e      	movlt	r6, r3
 80071fe:	2e00      	cmp	r6, #0
 8007200:	f77f acd7 	ble.w	8006bb2 <_svfprintf_r+0x662>
 8007204:	4f2f      	ldr	r7, [pc, #188]	; (80072c4 <_svfprintf_r+0xd74>)
 8007206:	f04f 0810 	mov.w	r8, #16
 800720a:	2e10      	cmp	r6, #16
 800720c:	6027      	str	r7, [r4, #0]
 800720e:	f77f aee7 	ble.w	8006fe0 <_svfprintf_r+0xa90>
 8007212:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007214:	f8c4 8004 	str.w	r8, [r4, #4]
 8007218:	3310      	adds	r3, #16
 800721a:	9321      	str	r3, [sp, #132]	; 0x84
 800721c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800721e:	3301      	adds	r3, #1
 8007220:	2b07      	cmp	r3, #7
 8007222:	9320      	str	r3, [sp, #128]	; 0x80
 8007224:	dc41      	bgt.n	80072aa <_svfprintf_r+0xd5a>
 8007226:	3408      	adds	r4, #8
 8007228:	3e10      	subs	r6, #16
 800722a:	e7ee      	b.n	800720a <_svfprintf_r+0xcba>
 800722c:	aa1f      	add	r2, sp, #124	; 0x7c
 800722e:	4651      	mov	r1, sl
 8007230:	4658      	mov	r0, fp
 8007232:	f002 f91b 	bl	800946c <__ssprint_r>
 8007236:	2800      	cmp	r0, #0
 8007238:	f040 80eb 	bne.w	8007412 <_svfprintf_r+0xec2>
 800723c:	ac2c      	add	r4, sp, #176	; 0xb0
 800723e:	e796      	b.n	800716e <_svfprintf_r+0xc1e>
 8007240:	2310      	movs	r3, #16
 8007242:	6063      	str	r3, [r4, #4]
 8007244:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007246:	3310      	adds	r3, #16
 8007248:	9321      	str	r3, [sp, #132]	; 0x84
 800724a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800724c:	3301      	adds	r3, #1
 800724e:	2b07      	cmp	r3, #7
 8007250:	9320      	str	r3, [sp, #128]	; 0x80
 8007252:	dc02      	bgt.n	800725a <_svfprintf_r+0xd0a>
 8007254:	3408      	adds	r4, #8
 8007256:	3e10      	subs	r6, #16
 8007258:	e791      	b.n	800717e <_svfprintf_r+0xc2e>
 800725a:	aa1f      	add	r2, sp, #124	; 0x7c
 800725c:	4651      	mov	r1, sl
 800725e:	4658      	mov	r0, fp
 8007260:	f002 f904 	bl	800946c <__ssprint_r>
 8007264:	2800      	cmp	r0, #0
 8007266:	f040 80d4 	bne.w	8007412 <_svfprintf_r+0xec2>
 800726a:	ac2c      	add	r4, sp, #176	; 0xb0
 800726c:	e7f3      	b.n	8007256 <_svfprintf_r+0xd06>
 800726e:	aa1f      	add	r2, sp, #124	; 0x7c
 8007270:	4651      	mov	r1, sl
 8007272:	4658      	mov	r0, fp
 8007274:	f002 f8fa 	bl	800946c <__ssprint_r>
 8007278:	2800      	cmp	r0, #0
 800727a:	f040 80ca 	bne.w	8007412 <_svfprintf_r+0xec2>
 800727e:	ac2c      	add	r4, sp, #176	; 0xb0
 8007280:	e78b      	b.n	800719a <_svfprintf_r+0xc4a>
 8007282:	aa1f      	add	r2, sp, #124	; 0x7c
 8007284:	4651      	mov	r1, sl
 8007286:	4658      	mov	r0, fp
 8007288:	f002 f8f0 	bl	800946c <__ssprint_r>
 800728c:	2800      	cmp	r0, #0
 800728e:	f040 80c0 	bne.w	8007412 <_svfprintf_r+0xec2>
 8007292:	ac2c      	add	r4, sp, #176	; 0xb0
 8007294:	e795      	b.n	80071c2 <_svfprintf_r+0xc72>
 8007296:	aa1f      	add	r2, sp, #124	; 0x7c
 8007298:	4651      	mov	r1, sl
 800729a:	4658      	mov	r0, fp
 800729c:	f002 f8e6 	bl	800946c <__ssprint_r>
 80072a0:	2800      	cmp	r0, #0
 80072a2:	f040 80b6 	bne.w	8007412 <_svfprintf_r+0xec2>
 80072a6:	ac2c      	add	r4, sp, #176	; 0xb0
 80072a8:	e7a1      	b.n	80071ee <_svfprintf_r+0xc9e>
 80072aa:	aa1f      	add	r2, sp, #124	; 0x7c
 80072ac:	4651      	mov	r1, sl
 80072ae:	4658      	mov	r0, fp
 80072b0:	f002 f8dc 	bl	800946c <__ssprint_r>
 80072b4:	2800      	cmp	r0, #0
 80072b6:	f040 80ac 	bne.w	8007412 <_svfprintf_r+0xec2>
 80072ba:	ac2c      	add	r4, sp, #176	; 0xb0
 80072bc:	e7b4      	b.n	8007228 <_svfprintf_r+0xcd8>
 80072be:	bf00      	nop
 80072c0:	08009c82 	.word	0x08009c82
 80072c4:	08009c94 	.word	0x08009c94
 80072c8:	9b03      	ldr	r3, [sp, #12]
 80072ca:	2b01      	cmp	r3, #1
 80072cc:	dc01      	bgt.n	80072d2 <_svfprintf_r+0xd82>
 80072ce:	07ea      	lsls	r2, r5, #31
 80072d0:	d576      	bpl.n	80073c0 <_svfprintf_r+0xe70>
 80072d2:	2301      	movs	r3, #1
 80072d4:	6063      	str	r3, [r4, #4]
 80072d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80072d8:	f8c4 8000 	str.w	r8, [r4]
 80072dc:	3301      	adds	r3, #1
 80072de:	9321      	str	r3, [sp, #132]	; 0x84
 80072e0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80072e2:	3301      	adds	r3, #1
 80072e4:	2b07      	cmp	r3, #7
 80072e6:	9320      	str	r3, [sp, #128]	; 0x80
 80072e8:	dc36      	bgt.n	8007358 <_svfprintf_r+0xe08>
 80072ea:	3408      	adds	r4, #8
 80072ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80072ee:	6023      	str	r3, [r4, #0]
 80072f0:	9b08      	ldr	r3, [sp, #32]
 80072f2:	6063      	str	r3, [r4, #4]
 80072f4:	9a08      	ldr	r2, [sp, #32]
 80072f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80072f8:	4413      	add	r3, r2
 80072fa:	9321      	str	r3, [sp, #132]	; 0x84
 80072fc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80072fe:	3301      	adds	r3, #1
 8007300:	2b07      	cmp	r3, #7
 8007302:	9320      	str	r3, [sp, #128]	; 0x80
 8007304:	dc31      	bgt.n	800736a <_svfprintf_r+0xe1a>
 8007306:	3408      	adds	r4, #8
 8007308:	2300      	movs	r3, #0
 800730a:	2200      	movs	r2, #0
 800730c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007310:	f7f9 fbd6 	bl	8000ac0 <__aeabi_dcmpeq>
 8007314:	9b03      	ldr	r3, [sp, #12]
 8007316:	1e5e      	subs	r6, r3, #1
 8007318:	2800      	cmp	r0, #0
 800731a:	d12f      	bne.n	800737c <_svfprintf_r+0xe2c>
 800731c:	f108 0301 	add.w	r3, r8, #1
 8007320:	e884 0048 	stmia.w	r4, {r3, r6}
 8007324:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007326:	9a03      	ldr	r2, [sp, #12]
 8007328:	3b01      	subs	r3, #1
 800732a:	4413      	add	r3, r2
 800732c:	9321      	str	r3, [sp, #132]	; 0x84
 800732e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007330:	3301      	adds	r3, #1
 8007332:	2b07      	cmp	r3, #7
 8007334:	9320      	str	r3, [sp, #128]	; 0x80
 8007336:	dd4a      	ble.n	80073ce <_svfprintf_r+0xe7e>
 8007338:	aa1f      	add	r2, sp, #124	; 0x7c
 800733a:	4651      	mov	r1, sl
 800733c:	4658      	mov	r0, fp
 800733e:	f002 f895 	bl	800946c <__ssprint_r>
 8007342:	2800      	cmp	r0, #0
 8007344:	d165      	bne.n	8007412 <_svfprintf_r+0xec2>
 8007346:	ac2c      	add	r4, sp, #176	; 0xb0
 8007348:	ab1b      	add	r3, sp, #108	; 0x6c
 800734a:	6023      	str	r3, [r4, #0]
 800734c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800734e:	6063      	str	r3, [r4, #4]
 8007350:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007352:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007354:	4413      	add	r3, r2
 8007356:	e41c      	b.n	8006b92 <_svfprintf_r+0x642>
 8007358:	aa1f      	add	r2, sp, #124	; 0x7c
 800735a:	4651      	mov	r1, sl
 800735c:	4658      	mov	r0, fp
 800735e:	f002 f885 	bl	800946c <__ssprint_r>
 8007362:	2800      	cmp	r0, #0
 8007364:	d155      	bne.n	8007412 <_svfprintf_r+0xec2>
 8007366:	ac2c      	add	r4, sp, #176	; 0xb0
 8007368:	e7c0      	b.n	80072ec <_svfprintf_r+0xd9c>
 800736a:	aa1f      	add	r2, sp, #124	; 0x7c
 800736c:	4651      	mov	r1, sl
 800736e:	4658      	mov	r0, fp
 8007370:	f002 f87c 	bl	800946c <__ssprint_r>
 8007374:	2800      	cmp	r0, #0
 8007376:	d14c      	bne.n	8007412 <_svfprintf_r+0xec2>
 8007378:	ac2c      	add	r4, sp, #176	; 0xb0
 800737a:	e7c5      	b.n	8007308 <_svfprintf_r+0xdb8>
 800737c:	2e00      	cmp	r6, #0
 800737e:	dde3      	ble.n	8007348 <_svfprintf_r+0xdf8>
 8007380:	4f59      	ldr	r7, [pc, #356]	; (80074e8 <_svfprintf_r+0xf98>)
 8007382:	f04f 0810 	mov.w	r8, #16
 8007386:	2e10      	cmp	r6, #16
 8007388:	6027      	str	r7, [r4, #0]
 800738a:	dc04      	bgt.n	8007396 <_svfprintf_r+0xe46>
 800738c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800738e:	6066      	str	r6, [r4, #4]
 8007390:	441e      	add	r6, r3
 8007392:	9621      	str	r6, [sp, #132]	; 0x84
 8007394:	e7cb      	b.n	800732e <_svfprintf_r+0xdde>
 8007396:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007398:	f8c4 8004 	str.w	r8, [r4, #4]
 800739c:	3310      	adds	r3, #16
 800739e:	9321      	str	r3, [sp, #132]	; 0x84
 80073a0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80073a2:	3301      	adds	r3, #1
 80073a4:	2b07      	cmp	r3, #7
 80073a6:	9320      	str	r3, [sp, #128]	; 0x80
 80073a8:	dc02      	bgt.n	80073b0 <_svfprintf_r+0xe60>
 80073aa:	3408      	adds	r4, #8
 80073ac:	3e10      	subs	r6, #16
 80073ae:	e7ea      	b.n	8007386 <_svfprintf_r+0xe36>
 80073b0:	aa1f      	add	r2, sp, #124	; 0x7c
 80073b2:	4651      	mov	r1, sl
 80073b4:	4658      	mov	r0, fp
 80073b6:	f002 f859 	bl	800946c <__ssprint_r>
 80073ba:	bb50      	cbnz	r0, 8007412 <_svfprintf_r+0xec2>
 80073bc:	ac2c      	add	r4, sp, #176	; 0xb0
 80073be:	e7f5      	b.n	80073ac <_svfprintf_r+0xe5c>
 80073c0:	2301      	movs	r3, #1
 80073c2:	6063      	str	r3, [r4, #4]
 80073c4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80073c6:	f8c4 8000 	str.w	r8, [r4]
 80073ca:	3301      	adds	r3, #1
 80073cc:	e7ae      	b.n	800732c <_svfprintf_r+0xddc>
 80073ce:	3408      	adds	r4, #8
 80073d0:	e7ba      	b.n	8007348 <_svfprintf_r+0xdf8>
 80073d2:	3408      	adds	r4, #8
 80073d4:	f7ff bbed 	b.w	8006bb2 <_svfprintf_r+0x662>
 80073d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80073dc:	1a9d      	subs	r5, r3, r2
 80073de:	2d00      	cmp	r5, #0
 80073e0:	f77f abea 	ble.w	8006bb8 <_svfprintf_r+0x668>
 80073e4:	2610      	movs	r6, #16
 80073e6:	4b41      	ldr	r3, [pc, #260]	; (80074ec <_svfprintf_r+0xf9c>)
 80073e8:	6023      	str	r3, [r4, #0]
 80073ea:	2d10      	cmp	r5, #16
 80073ec:	dc1b      	bgt.n	8007426 <_svfprintf_r+0xed6>
 80073ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80073f0:	6065      	str	r5, [r4, #4]
 80073f2:	441d      	add	r5, r3
 80073f4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80073f6:	9521      	str	r5, [sp, #132]	; 0x84
 80073f8:	3301      	adds	r3, #1
 80073fa:	2b07      	cmp	r3, #7
 80073fc:	9320      	str	r3, [sp, #128]	; 0x80
 80073fe:	f77f abdb 	ble.w	8006bb8 <_svfprintf_r+0x668>
 8007402:	aa1f      	add	r2, sp, #124	; 0x7c
 8007404:	4651      	mov	r1, sl
 8007406:	4658      	mov	r0, fp
 8007408:	f002 f830 	bl	800946c <__ssprint_r>
 800740c:	2800      	cmp	r0, #0
 800740e:	f43f abd3 	beq.w	8006bb8 <_svfprintf_r+0x668>
 8007412:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8007416:	f013 0f40 	tst.w	r3, #64	; 0x40
 800741a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800741c:	bf18      	it	ne
 800741e:	f04f 33ff 	movne.w	r3, #4294967295
 8007422:	f7ff b8b9 	b.w	8006598 <_svfprintf_r+0x48>
 8007426:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007428:	6066      	str	r6, [r4, #4]
 800742a:	3310      	adds	r3, #16
 800742c:	9321      	str	r3, [sp, #132]	; 0x84
 800742e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007430:	3301      	adds	r3, #1
 8007432:	2b07      	cmp	r3, #7
 8007434:	9320      	str	r3, [sp, #128]	; 0x80
 8007436:	dc02      	bgt.n	800743e <_svfprintf_r+0xeee>
 8007438:	3408      	adds	r4, #8
 800743a:	3d10      	subs	r5, #16
 800743c:	e7d3      	b.n	80073e6 <_svfprintf_r+0xe96>
 800743e:	aa1f      	add	r2, sp, #124	; 0x7c
 8007440:	4651      	mov	r1, sl
 8007442:	4658      	mov	r0, fp
 8007444:	f002 f812 	bl	800946c <__ssprint_r>
 8007448:	2800      	cmp	r0, #0
 800744a:	d1e2      	bne.n	8007412 <_svfprintf_r+0xec2>
 800744c:	ac2c      	add	r4, sp, #176	; 0xb0
 800744e:	e7f4      	b.n	800743a <_svfprintf_r+0xeea>
 8007450:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007452:	2b00      	cmp	r3, #0
 8007454:	d0dd      	beq.n	8007412 <_svfprintf_r+0xec2>
 8007456:	aa1f      	add	r2, sp, #124	; 0x7c
 8007458:	4651      	mov	r1, sl
 800745a:	4658      	mov	r0, fp
 800745c:	f002 f806 	bl	800946c <__ssprint_r>
 8007460:	e7d7      	b.n	8007412 <_svfprintf_r+0xec2>
 8007462:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007466:	4610      	mov	r0, r2
 8007468:	4619      	mov	r1, r3
 800746a:	f7f9 fb5b 	bl	8000b24 <__aeabi_dcmpun>
 800746e:	2800      	cmp	r0, #0
 8007470:	f43f aa44 	beq.w	80068fc <_svfprintf_r+0x3ac>
 8007474:	4b1e      	ldr	r3, [pc, #120]	; (80074f0 <_svfprintf_r+0xfa0>)
 8007476:	4a1f      	ldr	r2, [pc, #124]	; (80074f4 <_svfprintf_r+0xfa4>)
 8007478:	f7ff ba34 	b.w	80068e4 <_svfprintf_r+0x394>
 800747c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800747e:	eba3 0308 	sub.w	r3, r3, r8
 8007482:	9303      	str	r3, [sp, #12]
 8007484:	f7ff bab5 	b.w	80069f2 <_svfprintf_r+0x4a2>
 8007488:	ea56 0207 	orrs.w	r2, r6, r7
 800748c:	950b      	str	r5, [sp, #44]	; 0x2c
 800748e:	f43f ac2b 	beq.w	8006ce8 <_svfprintf_r+0x798>
 8007492:	2b01      	cmp	r3, #1
 8007494:	f43f ac9d 	beq.w	8006dd2 <_svfprintf_r+0x882>
 8007498:	2b02      	cmp	r3, #2
 800749a:	f43f acbd 	beq.w	8006e18 <_svfprintf_r+0x8c8>
 800749e:	ab2c      	add	r3, sp, #176	; 0xb0
 80074a0:	08f1      	lsrs	r1, r6, #3
 80074a2:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 80074a6:	08f8      	lsrs	r0, r7, #3
 80074a8:	f006 0207 	and.w	r2, r6, #7
 80074ac:	4607      	mov	r7, r0
 80074ae:	460e      	mov	r6, r1
 80074b0:	3230      	adds	r2, #48	; 0x30
 80074b2:	ea56 0107 	orrs.w	r1, r6, r7
 80074b6:	f103 38ff 	add.w	r8, r3, #4294967295
 80074ba:	f803 2c01 	strb.w	r2, [r3, #-1]
 80074be:	f47f ac86 	bne.w	8006dce <_svfprintf_r+0x87e>
 80074c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80074c4:	07c9      	lsls	r1, r1, #31
 80074c6:	d506      	bpl.n	80074d6 <_svfprintf_r+0xf86>
 80074c8:	2a30      	cmp	r2, #48	; 0x30
 80074ca:	d004      	beq.n	80074d6 <_svfprintf_r+0xf86>
 80074cc:	2230      	movs	r2, #48	; 0x30
 80074ce:	f808 2c01 	strb.w	r2, [r8, #-1]
 80074d2:	f1a3 0802 	sub.w	r8, r3, #2
 80074d6:	464e      	mov	r6, r9
 80074d8:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 80074dc:	eba9 0908 	sub.w	r9, r9, r8
 80074e0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80074e2:	2700      	movs	r7, #0
 80074e4:	f7ff bad1 	b.w	8006a8a <_svfprintf_r+0x53a>
 80074e8:	08009c94 	.word	0x08009c94
 80074ec:	08009c84 	.word	0x08009c84
 80074f0:	08009c58 	.word	0x08009c58
 80074f4:	08009c5c 	.word	0x08009c5c

080074f8 <quorem>:
 80074f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074fc:	6903      	ldr	r3, [r0, #16]
 80074fe:	690c      	ldr	r4, [r1, #16]
 8007500:	429c      	cmp	r4, r3
 8007502:	4680      	mov	r8, r0
 8007504:	f300 8082 	bgt.w	800760c <quorem+0x114>
 8007508:	3c01      	subs	r4, #1
 800750a:	f101 0714 	add.w	r7, r1, #20
 800750e:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8007512:	f100 0614 	add.w	r6, r0, #20
 8007516:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800751a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800751e:	eb06 030e 	add.w	r3, r6, lr
 8007522:	3501      	adds	r5, #1
 8007524:	eb07 090e 	add.w	r9, r7, lr
 8007528:	9301      	str	r3, [sp, #4]
 800752a:	fbb0 f5f5 	udiv	r5, r0, r5
 800752e:	b395      	cbz	r5, 8007596 <quorem+0x9e>
 8007530:	f04f 0a00 	mov.w	sl, #0
 8007534:	4638      	mov	r0, r7
 8007536:	46b4      	mov	ip, r6
 8007538:	46d3      	mov	fp, sl
 800753a:	f850 2b04 	ldr.w	r2, [r0], #4
 800753e:	b293      	uxth	r3, r2
 8007540:	fb05 a303 	mla	r3, r5, r3, sl
 8007544:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007548:	b29b      	uxth	r3, r3
 800754a:	ebab 0303 	sub.w	r3, fp, r3
 800754e:	0c12      	lsrs	r2, r2, #16
 8007550:	f8bc b000 	ldrh.w	fp, [ip]
 8007554:	fb05 a202 	mla	r2, r5, r2, sl
 8007558:	fa13 f38b 	uxtah	r3, r3, fp
 800755c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007560:	fa1f fb82 	uxth.w	fp, r2
 8007564:	f8dc 2000 	ldr.w	r2, [ip]
 8007568:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800756c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007570:	b29b      	uxth	r3, r3
 8007572:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007576:	4581      	cmp	r9, r0
 8007578:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800757c:	f84c 3b04 	str.w	r3, [ip], #4
 8007580:	d2db      	bcs.n	800753a <quorem+0x42>
 8007582:	f856 300e 	ldr.w	r3, [r6, lr]
 8007586:	b933      	cbnz	r3, 8007596 <quorem+0x9e>
 8007588:	9b01      	ldr	r3, [sp, #4]
 800758a:	3b04      	subs	r3, #4
 800758c:	429e      	cmp	r6, r3
 800758e:	461a      	mov	r2, r3
 8007590:	d330      	bcc.n	80075f4 <quorem+0xfc>
 8007592:	f8c8 4010 	str.w	r4, [r8, #16]
 8007596:	4640      	mov	r0, r8
 8007598:	f001 fdb3 	bl	8009102 <__mcmp>
 800759c:	2800      	cmp	r0, #0
 800759e:	db25      	blt.n	80075ec <quorem+0xf4>
 80075a0:	3501      	adds	r5, #1
 80075a2:	4630      	mov	r0, r6
 80075a4:	f04f 0e00 	mov.w	lr, #0
 80075a8:	f857 2b04 	ldr.w	r2, [r7], #4
 80075ac:	f8d0 c000 	ldr.w	ip, [r0]
 80075b0:	b293      	uxth	r3, r2
 80075b2:	ebae 0303 	sub.w	r3, lr, r3
 80075b6:	0c12      	lsrs	r2, r2, #16
 80075b8:	fa13 f38c 	uxtah	r3, r3, ip
 80075bc:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80075c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80075ca:	45b9      	cmp	r9, r7
 80075cc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80075d0:	f840 3b04 	str.w	r3, [r0], #4
 80075d4:	d2e8      	bcs.n	80075a8 <quorem+0xb0>
 80075d6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80075da:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80075de:	b92a      	cbnz	r2, 80075ec <quorem+0xf4>
 80075e0:	3b04      	subs	r3, #4
 80075e2:	429e      	cmp	r6, r3
 80075e4:	461a      	mov	r2, r3
 80075e6:	d30b      	bcc.n	8007600 <quorem+0x108>
 80075e8:	f8c8 4010 	str.w	r4, [r8, #16]
 80075ec:	4628      	mov	r0, r5
 80075ee:	b003      	add	sp, #12
 80075f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075f4:	6812      	ldr	r2, [r2, #0]
 80075f6:	3b04      	subs	r3, #4
 80075f8:	2a00      	cmp	r2, #0
 80075fa:	d1ca      	bne.n	8007592 <quorem+0x9a>
 80075fc:	3c01      	subs	r4, #1
 80075fe:	e7c5      	b.n	800758c <quorem+0x94>
 8007600:	6812      	ldr	r2, [r2, #0]
 8007602:	3b04      	subs	r3, #4
 8007604:	2a00      	cmp	r2, #0
 8007606:	d1ef      	bne.n	80075e8 <quorem+0xf0>
 8007608:	3c01      	subs	r4, #1
 800760a:	e7ea      	b.n	80075e2 <quorem+0xea>
 800760c:	2000      	movs	r0, #0
 800760e:	e7ee      	b.n	80075ee <quorem+0xf6>

08007610 <_dtoa_r>:
 8007610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007614:	ec57 6b10 	vmov	r6, r7, d0
 8007618:	b097      	sub	sp, #92	; 0x5c
 800761a:	e9cd 6700 	strd	r6, r7, [sp]
 800761e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007620:	9107      	str	r1, [sp, #28]
 8007622:	4604      	mov	r4, r0
 8007624:	920a      	str	r2, [sp, #40]	; 0x28
 8007626:	930f      	str	r3, [sp, #60]	; 0x3c
 8007628:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800762a:	b93e      	cbnz	r6, 800763c <_dtoa_r+0x2c>
 800762c:	2010      	movs	r0, #16
 800762e:	f001 f8ed 	bl	800880c <malloc>
 8007632:	6260      	str	r0, [r4, #36]	; 0x24
 8007634:	6046      	str	r6, [r0, #4]
 8007636:	6086      	str	r6, [r0, #8]
 8007638:	6006      	str	r6, [r0, #0]
 800763a:	60c6      	str	r6, [r0, #12]
 800763c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800763e:	6819      	ldr	r1, [r3, #0]
 8007640:	b151      	cbz	r1, 8007658 <_dtoa_r+0x48>
 8007642:	685a      	ldr	r2, [r3, #4]
 8007644:	604a      	str	r2, [r1, #4]
 8007646:	2301      	movs	r3, #1
 8007648:	4093      	lsls	r3, r2
 800764a:	608b      	str	r3, [r1, #8]
 800764c:	4620      	mov	r0, r4
 800764e:	f001 fb45 	bl	8008cdc <_Bfree>
 8007652:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007654:	2200      	movs	r2, #0
 8007656:	601a      	str	r2, [r3, #0]
 8007658:	9b01      	ldr	r3, [sp, #4]
 800765a:	2b00      	cmp	r3, #0
 800765c:	bfbf      	itttt	lt
 800765e:	2301      	movlt	r3, #1
 8007660:	602b      	strlt	r3, [r5, #0]
 8007662:	9b01      	ldrlt	r3, [sp, #4]
 8007664:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007668:	bfb2      	itee	lt
 800766a:	9301      	strlt	r3, [sp, #4]
 800766c:	2300      	movge	r3, #0
 800766e:	602b      	strge	r3, [r5, #0]
 8007670:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007674:	4ba8      	ldr	r3, [pc, #672]	; (8007918 <_dtoa_r+0x308>)
 8007676:	ea33 0308 	bics.w	r3, r3, r8
 800767a:	d11b      	bne.n	80076b4 <_dtoa_r+0xa4>
 800767c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800767e:	f242 730f 	movw	r3, #9999	; 0x270f
 8007682:	6013      	str	r3, [r2, #0]
 8007684:	9b00      	ldr	r3, [sp, #0]
 8007686:	b923      	cbnz	r3, 8007692 <_dtoa_r+0x82>
 8007688:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800768c:	2800      	cmp	r0, #0
 800768e:	f000 8578 	beq.w	8008182 <_dtoa_r+0xb72>
 8007692:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007694:	b953      	cbnz	r3, 80076ac <_dtoa_r+0x9c>
 8007696:	4ba1      	ldr	r3, [pc, #644]	; (800791c <_dtoa_r+0x30c>)
 8007698:	e021      	b.n	80076de <_dtoa_r+0xce>
 800769a:	4ba1      	ldr	r3, [pc, #644]	; (8007920 <_dtoa_r+0x310>)
 800769c:	9302      	str	r3, [sp, #8]
 800769e:	3308      	adds	r3, #8
 80076a0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80076a2:	6013      	str	r3, [r2, #0]
 80076a4:	9802      	ldr	r0, [sp, #8]
 80076a6:	b017      	add	sp, #92	; 0x5c
 80076a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076ac:	4b9b      	ldr	r3, [pc, #620]	; (800791c <_dtoa_r+0x30c>)
 80076ae:	9302      	str	r3, [sp, #8]
 80076b0:	3303      	adds	r3, #3
 80076b2:	e7f5      	b.n	80076a0 <_dtoa_r+0x90>
 80076b4:	e9dd 6700 	ldrd	r6, r7, [sp]
 80076b8:	2200      	movs	r2, #0
 80076ba:	2300      	movs	r3, #0
 80076bc:	4630      	mov	r0, r6
 80076be:	4639      	mov	r1, r7
 80076c0:	f7f9 f9fe 	bl	8000ac0 <__aeabi_dcmpeq>
 80076c4:	4681      	mov	r9, r0
 80076c6:	b160      	cbz	r0, 80076e2 <_dtoa_r+0xd2>
 80076c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80076ca:	2301      	movs	r3, #1
 80076cc:	6013      	str	r3, [r2, #0]
 80076ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	f000 8553 	beq.w	800817c <_dtoa_r+0xb6c>
 80076d6:	4b93      	ldr	r3, [pc, #588]	; (8007924 <_dtoa_r+0x314>)
 80076d8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80076da:	6013      	str	r3, [r2, #0]
 80076dc:	3b01      	subs	r3, #1
 80076de:	9302      	str	r3, [sp, #8]
 80076e0:	e7e0      	b.n	80076a4 <_dtoa_r+0x94>
 80076e2:	aa14      	add	r2, sp, #80	; 0x50
 80076e4:	a915      	add	r1, sp, #84	; 0x54
 80076e6:	ec47 6b10 	vmov	d0, r6, r7
 80076ea:	4620      	mov	r0, r4
 80076ec:	f001 fdf8 	bl	80092e0 <__d2b>
 80076f0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80076f4:	4682      	mov	sl, r0
 80076f6:	2d00      	cmp	r5, #0
 80076f8:	d07e      	beq.n	80077f8 <_dtoa_r+0x1e8>
 80076fa:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80076fe:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8007702:	4630      	mov	r0, r6
 8007704:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007708:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800770c:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 8007710:	2200      	movs	r2, #0
 8007712:	4b85      	ldr	r3, [pc, #532]	; (8007928 <_dtoa_r+0x318>)
 8007714:	f7f8 fdb8 	bl	8000288 <__aeabi_dsub>
 8007718:	a379      	add	r3, pc, #484	; (adr r3, 8007900 <_dtoa_r+0x2f0>)
 800771a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800771e:	f7f8 ff67 	bl	80005f0 <__aeabi_dmul>
 8007722:	a379      	add	r3, pc, #484	; (adr r3, 8007908 <_dtoa_r+0x2f8>)
 8007724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007728:	f7f8 fdb0 	bl	800028c <__adddf3>
 800772c:	4606      	mov	r6, r0
 800772e:	4628      	mov	r0, r5
 8007730:	460f      	mov	r7, r1
 8007732:	f7f8 fef7 	bl	8000524 <__aeabi_i2d>
 8007736:	a376      	add	r3, pc, #472	; (adr r3, 8007910 <_dtoa_r+0x300>)
 8007738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800773c:	f7f8 ff58 	bl	80005f0 <__aeabi_dmul>
 8007740:	4602      	mov	r2, r0
 8007742:	460b      	mov	r3, r1
 8007744:	4630      	mov	r0, r6
 8007746:	4639      	mov	r1, r7
 8007748:	f7f8 fda0 	bl	800028c <__adddf3>
 800774c:	4606      	mov	r6, r0
 800774e:	460f      	mov	r7, r1
 8007750:	f7f9 f9fe 	bl	8000b50 <__aeabi_d2iz>
 8007754:	2200      	movs	r2, #0
 8007756:	4683      	mov	fp, r0
 8007758:	2300      	movs	r3, #0
 800775a:	4630      	mov	r0, r6
 800775c:	4639      	mov	r1, r7
 800775e:	f7f9 f9b9 	bl	8000ad4 <__aeabi_dcmplt>
 8007762:	b158      	cbz	r0, 800777c <_dtoa_r+0x16c>
 8007764:	4658      	mov	r0, fp
 8007766:	f7f8 fedd 	bl	8000524 <__aeabi_i2d>
 800776a:	4602      	mov	r2, r0
 800776c:	460b      	mov	r3, r1
 800776e:	4630      	mov	r0, r6
 8007770:	4639      	mov	r1, r7
 8007772:	f7f9 f9a5 	bl	8000ac0 <__aeabi_dcmpeq>
 8007776:	b908      	cbnz	r0, 800777c <_dtoa_r+0x16c>
 8007778:	f10b 3bff 	add.w	fp, fp, #4294967295
 800777c:	f1bb 0f16 	cmp.w	fp, #22
 8007780:	d859      	bhi.n	8007836 <_dtoa_r+0x226>
 8007782:	496a      	ldr	r1, [pc, #424]	; (800792c <_dtoa_r+0x31c>)
 8007784:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8007788:	e9dd 2300 	ldrd	r2, r3, [sp]
 800778c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007790:	f7f9 f9be 	bl	8000b10 <__aeabi_dcmpgt>
 8007794:	2800      	cmp	r0, #0
 8007796:	d050      	beq.n	800783a <_dtoa_r+0x22a>
 8007798:	f10b 3bff 	add.w	fp, fp, #4294967295
 800779c:	2300      	movs	r3, #0
 800779e:	930e      	str	r3, [sp, #56]	; 0x38
 80077a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80077a2:	1b5d      	subs	r5, r3, r5
 80077a4:	1e6b      	subs	r3, r5, #1
 80077a6:	9306      	str	r3, [sp, #24]
 80077a8:	bf45      	ittet	mi
 80077aa:	f1c5 0301 	rsbmi	r3, r5, #1
 80077ae:	9305      	strmi	r3, [sp, #20]
 80077b0:	2300      	movpl	r3, #0
 80077b2:	2300      	movmi	r3, #0
 80077b4:	bf4c      	ite	mi
 80077b6:	9306      	strmi	r3, [sp, #24]
 80077b8:	9305      	strpl	r3, [sp, #20]
 80077ba:	f1bb 0f00 	cmp.w	fp, #0
 80077be:	db3e      	blt.n	800783e <_dtoa_r+0x22e>
 80077c0:	9b06      	ldr	r3, [sp, #24]
 80077c2:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80077c6:	445b      	add	r3, fp
 80077c8:	9306      	str	r3, [sp, #24]
 80077ca:	2300      	movs	r3, #0
 80077cc:	9308      	str	r3, [sp, #32]
 80077ce:	9b07      	ldr	r3, [sp, #28]
 80077d0:	2b09      	cmp	r3, #9
 80077d2:	f200 80af 	bhi.w	8007934 <_dtoa_r+0x324>
 80077d6:	2b05      	cmp	r3, #5
 80077d8:	bfc4      	itt	gt
 80077da:	3b04      	subgt	r3, #4
 80077dc:	9307      	strgt	r3, [sp, #28]
 80077de:	9b07      	ldr	r3, [sp, #28]
 80077e0:	f1a3 0302 	sub.w	r3, r3, #2
 80077e4:	bfcc      	ite	gt
 80077e6:	2600      	movgt	r6, #0
 80077e8:	2601      	movle	r6, #1
 80077ea:	2b03      	cmp	r3, #3
 80077ec:	f200 80ae 	bhi.w	800794c <_dtoa_r+0x33c>
 80077f0:	e8df f003 	tbb	[pc, r3]
 80077f4:	772f8482 	.word	0x772f8482
 80077f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80077fa:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80077fc:	441d      	add	r5, r3
 80077fe:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007802:	2b20      	cmp	r3, #32
 8007804:	dd11      	ble.n	800782a <_dtoa_r+0x21a>
 8007806:	9a00      	ldr	r2, [sp, #0]
 8007808:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800780c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8007810:	fa22 f000 	lsr.w	r0, r2, r0
 8007814:	fa08 f303 	lsl.w	r3, r8, r3
 8007818:	4318      	orrs	r0, r3
 800781a:	f7f8 fe73 	bl	8000504 <__aeabi_ui2d>
 800781e:	2301      	movs	r3, #1
 8007820:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007824:	3d01      	subs	r5, #1
 8007826:	9312      	str	r3, [sp, #72]	; 0x48
 8007828:	e772      	b.n	8007710 <_dtoa_r+0x100>
 800782a:	f1c3 0020 	rsb	r0, r3, #32
 800782e:	9b00      	ldr	r3, [sp, #0]
 8007830:	fa03 f000 	lsl.w	r0, r3, r0
 8007834:	e7f1      	b.n	800781a <_dtoa_r+0x20a>
 8007836:	2301      	movs	r3, #1
 8007838:	e7b1      	b.n	800779e <_dtoa_r+0x18e>
 800783a:	900e      	str	r0, [sp, #56]	; 0x38
 800783c:	e7b0      	b.n	80077a0 <_dtoa_r+0x190>
 800783e:	9b05      	ldr	r3, [sp, #20]
 8007840:	eba3 030b 	sub.w	r3, r3, fp
 8007844:	9305      	str	r3, [sp, #20]
 8007846:	f1cb 0300 	rsb	r3, fp, #0
 800784a:	9308      	str	r3, [sp, #32]
 800784c:	2300      	movs	r3, #0
 800784e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007850:	e7bd      	b.n	80077ce <_dtoa_r+0x1be>
 8007852:	2301      	movs	r3, #1
 8007854:	9309      	str	r3, [sp, #36]	; 0x24
 8007856:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007858:	2b00      	cmp	r3, #0
 800785a:	dd7a      	ble.n	8007952 <_dtoa_r+0x342>
 800785c:	9304      	str	r3, [sp, #16]
 800785e:	9303      	str	r3, [sp, #12]
 8007860:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007862:	2200      	movs	r2, #0
 8007864:	606a      	str	r2, [r5, #4]
 8007866:	2104      	movs	r1, #4
 8007868:	f101 0214 	add.w	r2, r1, #20
 800786c:	429a      	cmp	r2, r3
 800786e:	d975      	bls.n	800795c <_dtoa_r+0x34c>
 8007870:	6869      	ldr	r1, [r5, #4]
 8007872:	4620      	mov	r0, r4
 8007874:	f001 f9fe 	bl	8008c74 <_Balloc>
 8007878:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800787a:	6028      	str	r0, [r5, #0]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	9302      	str	r3, [sp, #8]
 8007880:	9b03      	ldr	r3, [sp, #12]
 8007882:	2b0e      	cmp	r3, #14
 8007884:	f200 80e5 	bhi.w	8007a52 <_dtoa_r+0x442>
 8007888:	2e00      	cmp	r6, #0
 800788a:	f000 80e2 	beq.w	8007a52 <_dtoa_r+0x442>
 800788e:	ed9d 7b00 	vldr	d7, [sp]
 8007892:	f1bb 0f00 	cmp.w	fp, #0
 8007896:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800789a:	dd74      	ble.n	8007986 <_dtoa_r+0x376>
 800789c:	4a23      	ldr	r2, [pc, #140]	; (800792c <_dtoa_r+0x31c>)
 800789e:	f00b 030f 	and.w	r3, fp, #15
 80078a2:	ea4f 162b 	mov.w	r6, fp, asr #4
 80078a6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80078aa:	06f0      	lsls	r0, r6, #27
 80078ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 80078b0:	d559      	bpl.n	8007966 <_dtoa_r+0x356>
 80078b2:	4b1f      	ldr	r3, [pc, #124]	; (8007930 <_dtoa_r+0x320>)
 80078b4:	ec51 0b17 	vmov	r0, r1, d7
 80078b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80078bc:	f7f8 ffc2 	bl	8000844 <__aeabi_ddiv>
 80078c0:	e9cd 0100 	strd	r0, r1, [sp]
 80078c4:	f006 060f 	and.w	r6, r6, #15
 80078c8:	2503      	movs	r5, #3
 80078ca:	4f19      	ldr	r7, [pc, #100]	; (8007930 <_dtoa_r+0x320>)
 80078cc:	2e00      	cmp	r6, #0
 80078ce:	d14c      	bne.n	800796a <_dtoa_r+0x35a>
 80078d0:	4642      	mov	r2, r8
 80078d2:	464b      	mov	r3, r9
 80078d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80078d8:	f7f8 ffb4 	bl	8000844 <__aeabi_ddiv>
 80078dc:	e9cd 0100 	strd	r0, r1, [sp]
 80078e0:	e06a      	b.n	80079b8 <_dtoa_r+0x3a8>
 80078e2:	2301      	movs	r3, #1
 80078e4:	9309      	str	r3, [sp, #36]	; 0x24
 80078e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078e8:	445b      	add	r3, fp
 80078ea:	9304      	str	r3, [sp, #16]
 80078ec:	3301      	adds	r3, #1
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	9303      	str	r3, [sp, #12]
 80078f2:	bfb8      	it	lt
 80078f4:	2301      	movlt	r3, #1
 80078f6:	e7b3      	b.n	8007860 <_dtoa_r+0x250>
 80078f8:	2300      	movs	r3, #0
 80078fa:	e7ab      	b.n	8007854 <_dtoa_r+0x244>
 80078fc:	2300      	movs	r3, #0
 80078fe:	e7f1      	b.n	80078e4 <_dtoa_r+0x2d4>
 8007900:	636f4361 	.word	0x636f4361
 8007904:	3fd287a7 	.word	0x3fd287a7
 8007908:	8b60c8b3 	.word	0x8b60c8b3
 800790c:	3fc68a28 	.word	0x3fc68a28
 8007910:	509f79fb 	.word	0x509f79fb
 8007914:	3fd34413 	.word	0x3fd34413
 8007918:	7ff00000 	.word	0x7ff00000
 800791c:	08009cad 	.word	0x08009cad
 8007920:	08009ca4 	.word	0x08009ca4
 8007924:	08009c83 	.word	0x08009c83
 8007928:	3ff80000 	.word	0x3ff80000
 800792c:	08009ce8 	.word	0x08009ce8
 8007930:	08009cc0 	.word	0x08009cc0
 8007934:	2601      	movs	r6, #1
 8007936:	2300      	movs	r3, #0
 8007938:	9307      	str	r3, [sp, #28]
 800793a:	9609      	str	r6, [sp, #36]	; 0x24
 800793c:	f04f 33ff 	mov.w	r3, #4294967295
 8007940:	9304      	str	r3, [sp, #16]
 8007942:	9303      	str	r3, [sp, #12]
 8007944:	2200      	movs	r2, #0
 8007946:	2312      	movs	r3, #18
 8007948:	920a      	str	r2, [sp, #40]	; 0x28
 800794a:	e789      	b.n	8007860 <_dtoa_r+0x250>
 800794c:	2301      	movs	r3, #1
 800794e:	9309      	str	r3, [sp, #36]	; 0x24
 8007950:	e7f4      	b.n	800793c <_dtoa_r+0x32c>
 8007952:	2301      	movs	r3, #1
 8007954:	9304      	str	r3, [sp, #16]
 8007956:	9303      	str	r3, [sp, #12]
 8007958:	461a      	mov	r2, r3
 800795a:	e7f5      	b.n	8007948 <_dtoa_r+0x338>
 800795c:	686a      	ldr	r2, [r5, #4]
 800795e:	3201      	adds	r2, #1
 8007960:	606a      	str	r2, [r5, #4]
 8007962:	0049      	lsls	r1, r1, #1
 8007964:	e780      	b.n	8007868 <_dtoa_r+0x258>
 8007966:	2502      	movs	r5, #2
 8007968:	e7af      	b.n	80078ca <_dtoa_r+0x2ba>
 800796a:	07f1      	lsls	r1, r6, #31
 800796c:	d508      	bpl.n	8007980 <_dtoa_r+0x370>
 800796e:	4640      	mov	r0, r8
 8007970:	4649      	mov	r1, r9
 8007972:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007976:	f7f8 fe3b 	bl	80005f0 <__aeabi_dmul>
 800797a:	3501      	adds	r5, #1
 800797c:	4680      	mov	r8, r0
 800797e:	4689      	mov	r9, r1
 8007980:	1076      	asrs	r6, r6, #1
 8007982:	3708      	adds	r7, #8
 8007984:	e7a2      	b.n	80078cc <_dtoa_r+0x2bc>
 8007986:	f000 809d 	beq.w	8007ac4 <_dtoa_r+0x4b4>
 800798a:	f1cb 0600 	rsb	r6, fp, #0
 800798e:	4b9f      	ldr	r3, [pc, #636]	; (8007c0c <_dtoa_r+0x5fc>)
 8007990:	4f9f      	ldr	r7, [pc, #636]	; (8007c10 <_dtoa_r+0x600>)
 8007992:	f006 020f 	and.w	r2, r6, #15
 8007996:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800799a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800799e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80079a2:	f7f8 fe25 	bl	80005f0 <__aeabi_dmul>
 80079a6:	e9cd 0100 	strd	r0, r1, [sp]
 80079aa:	1136      	asrs	r6, r6, #4
 80079ac:	2300      	movs	r3, #0
 80079ae:	2502      	movs	r5, #2
 80079b0:	2e00      	cmp	r6, #0
 80079b2:	d17c      	bne.n	8007aae <_dtoa_r+0x49e>
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d191      	bne.n	80078dc <_dtoa_r+0x2cc>
 80079b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	f000 8084 	beq.w	8007ac8 <_dtoa_r+0x4b8>
 80079c0:	e9dd 8900 	ldrd	r8, r9, [sp]
 80079c4:	2200      	movs	r2, #0
 80079c6:	4b93      	ldr	r3, [pc, #588]	; (8007c14 <_dtoa_r+0x604>)
 80079c8:	4640      	mov	r0, r8
 80079ca:	4649      	mov	r1, r9
 80079cc:	f7f9 f882 	bl	8000ad4 <__aeabi_dcmplt>
 80079d0:	2800      	cmp	r0, #0
 80079d2:	d079      	beq.n	8007ac8 <_dtoa_r+0x4b8>
 80079d4:	9b03      	ldr	r3, [sp, #12]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d076      	beq.n	8007ac8 <_dtoa_r+0x4b8>
 80079da:	9b04      	ldr	r3, [sp, #16]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	dd34      	ble.n	8007a4a <_dtoa_r+0x43a>
 80079e0:	2200      	movs	r2, #0
 80079e2:	4b8d      	ldr	r3, [pc, #564]	; (8007c18 <_dtoa_r+0x608>)
 80079e4:	4640      	mov	r0, r8
 80079e6:	4649      	mov	r1, r9
 80079e8:	f7f8 fe02 	bl	80005f0 <__aeabi_dmul>
 80079ec:	e9cd 0100 	strd	r0, r1, [sp]
 80079f0:	9e04      	ldr	r6, [sp, #16]
 80079f2:	f10b 37ff 	add.w	r7, fp, #4294967295
 80079f6:	3501      	adds	r5, #1
 80079f8:	4628      	mov	r0, r5
 80079fa:	f7f8 fd93 	bl	8000524 <__aeabi_i2d>
 80079fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a02:	f7f8 fdf5 	bl	80005f0 <__aeabi_dmul>
 8007a06:	2200      	movs	r2, #0
 8007a08:	4b84      	ldr	r3, [pc, #528]	; (8007c1c <_dtoa_r+0x60c>)
 8007a0a:	f7f8 fc3f 	bl	800028c <__adddf3>
 8007a0e:	4680      	mov	r8, r0
 8007a10:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8007a14:	2e00      	cmp	r6, #0
 8007a16:	d15a      	bne.n	8007ace <_dtoa_r+0x4be>
 8007a18:	2200      	movs	r2, #0
 8007a1a:	4b81      	ldr	r3, [pc, #516]	; (8007c20 <_dtoa_r+0x610>)
 8007a1c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a20:	f7f8 fc32 	bl	8000288 <__aeabi_dsub>
 8007a24:	4642      	mov	r2, r8
 8007a26:	464b      	mov	r3, r9
 8007a28:	e9cd 0100 	strd	r0, r1, [sp]
 8007a2c:	f7f9 f870 	bl	8000b10 <__aeabi_dcmpgt>
 8007a30:	2800      	cmp	r0, #0
 8007a32:	f040 829b 	bne.w	8007f6c <_dtoa_r+0x95c>
 8007a36:	4642      	mov	r2, r8
 8007a38:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007a3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a40:	f7f9 f848 	bl	8000ad4 <__aeabi_dcmplt>
 8007a44:	2800      	cmp	r0, #0
 8007a46:	f040 828f 	bne.w	8007f68 <_dtoa_r+0x958>
 8007a4a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007a4e:	e9cd 2300 	strd	r2, r3, [sp]
 8007a52:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	f2c0 8150 	blt.w	8007cfa <_dtoa_r+0x6ea>
 8007a5a:	f1bb 0f0e 	cmp.w	fp, #14
 8007a5e:	f300 814c 	bgt.w	8007cfa <_dtoa_r+0x6ea>
 8007a62:	4b6a      	ldr	r3, [pc, #424]	; (8007c0c <_dtoa_r+0x5fc>)
 8007a64:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007a68:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007a6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	f280 80da 	bge.w	8007c28 <_dtoa_r+0x618>
 8007a74:	9b03      	ldr	r3, [sp, #12]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	f300 80d6 	bgt.w	8007c28 <_dtoa_r+0x618>
 8007a7c:	f040 8273 	bne.w	8007f66 <_dtoa_r+0x956>
 8007a80:	2200      	movs	r2, #0
 8007a82:	4b67      	ldr	r3, [pc, #412]	; (8007c20 <_dtoa_r+0x610>)
 8007a84:	4640      	mov	r0, r8
 8007a86:	4649      	mov	r1, r9
 8007a88:	f7f8 fdb2 	bl	80005f0 <__aeabi_dmul>
 8007a8c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a90:	f7f9 f834 	bl	8000afc <__aeabi_dcmpge>
 8007a94:	9e03      	ldr	r6, [sp, #12]
 8007a96:	4637      	mov	r7, r6
 8007a98:	2800      	cmp	r0, #0
 8007a9a:	f040 824a 	bne.w	8007f32 <_dtoa_r+0x922>
 8007a9e:	9b02      	ldr	r3, [sp, #8]
 8007aa0:	9a02      	ldr	r2, [sp, #8]
 8007aa2:	1c5d      	adds	r5, r3, #1
 8007aa4:	2331      	movs	r3, #49	; 0x31
 8007aa6:	7013      	strb	r3, [r2, #0]
 8007aa8:	f10b 0b01 	add.w	fp, fp, #1
 8007aac:	e245      	b.n	8007f3a <_dtoa_r+0x92a>
 8007aae:	07f2      	lsls	r2, r6, #31
 8007ab0:	d505      	bpl.n	8007abe <_dtoa_r+0x4ae>
 8007ab2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ab6:	f7f8 fd9b 	bl	80005f0 <__aeabi_dmul>
 8007aba:	3501      	adds	r5, #1
 8007abc:	2301      	movs	r3, #1
 8007abe:	1076      	asrs	r6, r6, #1
 8007ac0:	3708      	adds	r7, #8
 8007ac2:	e775      	b.n	80079b0 <_dtoa_r+0x3a0>
 8007ac4:	2502      	movs	r5, #2
 8007ac6:	e777      	b.n	80079b8 <_dtoa_r+0x3a8>
 8007ac8:	465f      	mov	r7, fp
 8007aca:	9e03      	ldr	r6, [sp, #12]
 8007acc:	e794      	b.n	80079f8 <_dtoa_r+0x3e8>
 8007ace:	9a02      	ldr	r2, [sp, #8]
 8007ad0:	4b4e      	ldr	r3, [pc, #312]	; (8007c0c <_dtoa_r+0x5fc>)
 8007ad2:	4432      	add	r2, r6
 8007ad4:	9213      	str	r2, [sp, #76]	; 0x4c
 8007ad6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ad8:	1e71      	subs	r1, r6, #1
 8007ada:	2a00      	cmp	r2, #0
 8007adc:	d048      	beq.n	8007b70 <_dtoa_r+0x560>
 8007ade:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8007ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae6:	2000      	movs	r0, #0
 8007ae8:	494e      	ldr	r1, [pc, #312]	; (8007c24 <_dtoa_r+0x614>)
 8007aea:	f7f8 feab 	bl	8000844 <__aeabi_ddiv>
 8007aee:	4642      	mov	r2, r8
 8007af0:	464b      	mov	r3, r9
 8007af2:	f7f8 fbc9 	bl	8000288 <__aeabi_dsub>
 8007af6:	9d02      	ldr	r5, [sp, #8]
 8007af8:	4680      	mov	r8, r0
 8007afa:	4689      	mov	r9, r1
 8007afc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b00:	f7f9 f826 	bl	8000b50 <__aeabi_d2iz>
 8007b04:	4606      	mov	r6, r0
 8007b06:	f7f8 fd0d 	bl	8000524 <__aeabi_i2d>
 8007b0a:	4602      	mov	r2, r0
 8007b0c:	460b      	mov	r3, r1
 8007b0e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b12:	f7f8 fbb9 	bl	8000288 <__aeabi_dsub>
 8007b16:	3630      	adds	r6, #48	; 0x30
 8007b18:	f805 6b01 	strb.w	r6, [r5], #1
 8007b1c:	4642      	mov	r2, r8
 8007b1e:	464b      	mov	r3, r9
 8007b20:	e9cd 0100 	strd	r0, r1, [sp]
 8007b24:	f7f8 ffd6 	bl	8000ad4 <__aeabi_dcmplt>
 8007b28:	2800      	cmp	r0, #0
 8007b2a:	d165      	bne.n	8007bf8 <_dtoa_r+0x5e8>
 8007b2c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b30:	2000      	movs	r0, #0
 8007b32:	4938      	ldr	r1, [pc, #224]	; (8007c14 <_dtoa_r+0x604>)
 8007b34:	f7f8 fba8 	bl	8000288 <__aeabi_dsub>
 8007b38:	4642      	mov	r2, r8
 8007b3a:	464b      	mov	r3, r9
 8007b3c:	f7f8 ffca 	bl	8000ad4 <__aeabi_dcmplt>
 8007b40:	2800      	cmp	r0, #0
 8007b42:	f040 80ba 	bne.w	8007cba <_dtoa_r+0x6aa>
 8007b46:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007b48:	429d      	cmp	r5, r3
 8007b4a:	f43f af7e 	beq.w	8007a4a <_dtoa_r+0x43a>
 8007b4e:	2200      	movs	r2, #0
 8007b50:	4b31      	ldr	r3, [pc, #196]	; (8007c18 <_dtoa_r+0x608>)
 8007b52:	4640      	mov	r0, r8
 8007b54:	4649      	mov	r1, r9
 8007b56:	f7f8 fd4b 	bl	80005f0 <__aeabi_dmul>
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	4680      	mov	r8, r0
 8007b5e:	4689      	mov	r9, r1
 8007b60:	4b2d      	ldr	r3, [pc, #180]	; (8007c18 <_dtoa_r+0x608>)
 8007b62:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b66:	f7f8 fd43 	bl	80005f0 <__aeabi_dmul>
 8007b6a:	e9cd 0100 	strd	r0, r1, [sp]
 8007b6e:	e7c5      	b.n	8007afc <_dtoa_r+0x4ec>
 8007b70:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8007b74:	4642      	mov	r2, r8
 8007b76:	464b      	mov	r3, r9
 8007b78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b7c:	f7f8 fd38 	bl	80005f0 <__aeabi_dmul>
 8007b80:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007b84:	9d02      	ldr	r5, [sp, #8]
 8007b86:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b8a:	f7f8 ffe1 	bl	8000b50 <__aeabi_d2iz>
 8007b8e:	4606      	mov	r6, r0
 8007b90:	f7f8 fcc8 	bl	8000524 <__aeabi_i2d>
 8007b94:	3630      	adds	r6, #48	; 0x30
 8007b96:	4602      	mov	r2, r0
 8007b98:	460b      	mov	r3, r1
 8007b9a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b9e:	f7f8 fb73 	bl	8000288 <__aeabi_dsub>
 8007ba2:	f805 6b01 	strb.w	r6, [r5], #1
 8007ba6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007ba8:	42ab      	cmp	r3, r5
 8007baa:	4680      	mov	r8, r0
 8007bac:	4689      	mov	r9, r1
 8007bae:	f04f 0200 	mov.w	r2, #0
 8007bb2:	d125      	bne.n	8007c00 <_dtoa_r+0x5f0>
 8007bb4:	4b1b      	ldr	r3, [pc, #108]	; (8007c24 <_dtoa_r+0x614>)
 8007bb6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007bba:	f7f8 fb67 	bl	800028c <__adddf3>
 8007bbe:	4602      	mov	r2, r0
 8007bc0:	460b      	mov	r3, r1
 8007bc2:	4640      	mov	r0, r8
 8007bc4:	4649      	mov	r1, r9
 8007bc6:	f7f8 ffa3 	bl	8000b10 <__aeabi_dcmpgt>
 8007bca:	2800      	cmp	r0, #0
 8007bcc:	d175      	bne.n	8007cba <_dtoa_r+0x6aa>
 8007bce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007bd2:	2000      	movs	r0, #0
 8007bd4:	4913      	ldr	r1, [pc, #76]	; (8007c24 <_dtoa_r+0x614>)
 8007bd6:	f7f8 fb57 	bl	8000288 <__aeabi_dsub>
 8007bda:	4602      	mov	r2, r0
 8007bdc:	460b      	mov	r3, r1
 8007bde:	4640      	mov	r0, r8
 8007be0:	4649      	mov	r1, r9
 8007be2:	f7f8 ff77 	bl	8000ad4 <__aeabi_dcmplt>
 8007be6:	2800      	cmp	r0, #0
 8007be8:	f43f af2f 	beq.w	8007a4a <_dtoa_r+0x43a>
 8007bec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007bf0:	2b30      	cmp	r3, #48	; 0x30
 8007bf2:	f105 32ff 	add.w	r2, r5, #4294967295
 8007bf6:	d001      	beq.n	8007bfc <_dtoa_r+0x5ec>
 8007bf8:	46bb      	mov	fp, r7
 8007bfa:	e04d      	b.n	8007c98 <_dtoa_r+0x688>
 8007bfc:	4615      	mov	r5, r2
 8007bfe:	e7f5      	b.n	8007bec <_dtoa_r+0x5dc>
 8007c00:	4b05      	ldr	r3, [pc, #20]	; (8007c18 <_dtoa_r+0x608>)
 8007c02:	f7f8 fcf5 	bl	80005f0 <__aeabi_dmul>
 8007c06:	e9cd 0100 	strd	r0, r1, [sp]
 8007c0a:	e7bc      	b.n	8007b86 <_dtoa_r+0x576>
 8007c0c:	08009ce8 	.word	0x08009ce8
 8007c10:	08009cc0 	.word	0x08009cc0
 8007c14:	3ff00000 	.word	0x3ff00000
 8007c18:	40240000 	.word	0x40240000
 8007c1c:	401c0000 	.word	0x401c0000
 8007c20:	40140000 	.word	0x40140000
 8007c24:	3fe00000 	.word	0x3fe00000
 8007c28:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007c2c:	9d02      	ldr	r5, [sp, #8]
 8007c2e:	4642      	mov	r2, r8
 8007c30:	464b      	mov	r3, r9
 8007c32:	4630      	mov	r0, r6
 8007c34:	4639      	mov	r1, r7
 8007c36:	f7f8 fe05 	bl	8000844 <__aeabi_ddiv>
 8007c3a:	f7f8 ff89 	bl	8000b50 <__aeabi_d2iz>
 8007c3e:	9000      	str	r0, [sp, #0]
 8007c40:	f7f8 fc70 	bl	8000524 <__aeabi_i2d>
 8007c44:	4642      	mov	r2, r8
 8007c46:	464b      	mov	r3, r9
 8007c48:	f7f8 fcd2 	bl	80005f0 <__aeabi_dmul>
 8007c4c:	4602      	mov	r2, r0
 8007c4e:	460b      	mov	r3, r1
 8007c50:	4630      	mov	r0, r6
 8007c52:	4639      	mov	r1, r7
 8007c54:	f7f8 fb18 	bl	8000288 <__aeabi_dsub>
 8007c58:	9e00      	ldr	r6, [sp, #0]
 8007c5a:	9f03      	ldr	r7, [sp, #12]
 8007c5c:	3630      	adds	r6, #48	; 0x30
 8007c5e:	f805 6b01 	strb.w	r6, [r5], #1
 8007c62:	9e02      	ldr	r6, [sp, #8]
 8007c64:	1bae      	subs	r6, r5, r6
 8007c66:	42b7      	cmp	r7, r6
 8007c68:	4602      	mov	r2, r0
 8007c6a:	460b      	mov	r3, r1
 8007c6c:	d138      	bne.n	8007ce0 <_dtoa_r+0x6d0>
 8007c6e:	f7f8 fb0d 	bl	800028c <__adddf3>
 8007c72:	4606      	mov	r6, r0
 8007c74:	460f      	mov	r7, r1
 8007c76:	4602      	mov	r2, r0
 8007c78:	460b      	mov	r3, r1
 8007c7a:	4640      	mov	r0, r8
 8007c7c:	4649      	mov	r1, r9
 8007c7e:	f7f8 ff29 	bl	8000ad4 <__aeabi_dcmplt>
 8007c82:	b9c8      	cbnz	r0, 8007cb8 <_dtoa_r+0x6a8>
 8007c84:	4632      	mov	r2, r6
 8007c86:	463b      	mov	r3, r7
 8007c88:	4640      	mov	r0, r8
 8007c8a:	4649      	mov	r1, r9
 8007c8c:	f7f8 ff18 	bl	8000ac0 <__aeabi_dcmpeq>
 8007c90:	b110      	cbz	r0, 8007c98 <_dtoa_r+0x688>
 8007c92:	9b00      	ldr	r3, [sp, #0]
 8007c94:	07db      	lsls	r3, r3, #31
 8007c96:	d40f      	bmi.n	8007cb8 <_dtoa_r+0x6a8>
 8007c98:	4651      	mov	r1, sl
 8007c9a:	4620      	mov	r0, r4
 8007c9c:	f001 f81e 	bl	8008cdc <_Bfree>
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007ca4:	702b      	strb	r3, [r5, #0]
 8007ca6:	f10b 0301 	add.w	r3, fp, #1
 8007caa:	6013      	str	r3, [r2, #0]
 8007cac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	f43f acf8 	beq.w	80076a4 <_dtoa_r+0x94>
 8007cb4:	601d      	str	r5, [r3, #0]
 8007cb6:	e4f5      	b.n	80076a4 <_dtoa_r+0x94>
 8007cb8:	465f      	mov	r7, fp
 8007cba:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007cbe:	2a39      	cmp	r2, #57	; 0x39
 8007cc0:	f105 33ff 	add.w	r3, r5, #4294967295
 8007cc4:	d106      	bne.n	8007cd4 <_dtoa_r+0x6c4>
 8007cc6:	9a02      	ldr	r2, [sp, #8]
 8007cc8:	429a      	cmp	r2, r3
 8007cca:	d107      	bne.n	8007cdc <_dtoa_r+0x6cc>
 8007ccc:	2330      	movs	r3, #48	; 0x30
 8007cce:	7013      	strb	r3, [r2, #0]
 8007cd0:	3701      	adds	r7, #1
 8007cd2:	4613      	mov	r3, r2
 8007cd4:	781a      	ldrb	r2, [r3, #0]
 8007cd6:	3201      	adds	r2, #1
 8007cd8:	701a      	strb	r2, [r3, #0]
 8007cda:	e78d      	b.n	8007bf8 <_dtoa_r+0x5e8>
 8007cdc:	461d      	mov	r5, r3
 8007cde:	e7ec      	b.n	8007cba <_dtoa_r+0x6aa>
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	4ba4      	ldr	r3, [pc, #656]	; (8007f74 <_dtoa_r+0x964>)
 8007ce4:	f7f8 fc84 	bl	80005f0 <__aeabi_dmul>
 8007ce8:	2200      	movs	r2, #0
 8007cea:	2300      	movs	r3, #0
 8007cec:	4606      	mov	r6, r0
 8007cee:	460f      	mov	r7, r1
 8007cf0:	f7f8 fee6 	bl	8000ac0 <__aeabi_dcmpeq>
 8007cf4:	2800      	cmp	r0, #0
 8007cf6:	d09a      	beq.n	8007c2e <_dtoa_r+0x61e>
 8007cf8:	e7ce      	b.n	8007c98 <_dtoa_r+0x688>
 8007cfa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007cfc:	2a00      	cmp	r2, #0
 8007cfe:	f000 80cd 	beq.w	8007e9c <_dtoa_r+0x88c>
 8007d02:	9a07      	ldr	r2, [sp, #28]
 8007d04:	2a01      	cmp	r2, #1
 8007d06:	f300 80af 	bgt.w	8007e68 <_dtoa_r+0x858>
 8007d0a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007d0c:	2a00      	cmp	r2, #0
 8007d0e:	f000 80a7 	beq.w	8007e60 <_dtoa_r+0x850>
 8007d12:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007d16:	9e08      	ldr	r6, [sp, #32]
 8007d18:	9d05      	ldr	r5, [sp, #20]
 8007d1a:	9a05      	ldr	r2, [sp, #20]
 8007d1c:	441a      	add	r2, r3
 8007d1e:	9205      	str	r2, [sp, #20]
 8007d20:	9a06      	ldr	r2, [sp, #24]
 8007d22:	2101      	movs	r1, #1
 8007d24:	441a      	add	r2, r3
 8007d26:	4620      	mov	r0, r4
 8007d28:	9206      	str	r2, [sp, #24]
 8007d2a:	f001 f8b5 	bl	8008e98 <__i2b>
 8007d2e:	4607      	mov	r7, r0
 8007d30:	2d00      	cmp	r5, #0
 8007d32:	dd0c      	ble.n	8007d4e <_dtoa_r+0x73e>
 8007d34:	9b06      	ldr	r3, [sp, #24]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	dd09      	ble.n	8007d4e <_dtoa_r+0x73e>
 8007d3a:	42ab      	cmp	r3, r5
 8007d3c:	9a05      	ldr	r2, [sp, #20]
 8007d3e:	bfa8      	it	ge
 8007d40:	462b      	movge	r3, r5
 8007d42:	1ad2      	subs	r2, r2, r3
 8007d44:	9205      	str	r2, [sp, #20]
 8007d46:	9a06      	ldr	r2, [sp, #24]
 8007d48:	1aed      	subs	r5, r5, r3
 8007d4a:	1ad3      	subs	r3, r2, r3
 8007d4c:	9306      	str	r3, [sp, #24]
 8007d4e:	9b08      	ldr	r3, [sp, #32]
 8007d50:	b1f3      	cbz	r3, 8007d90 <_dtoa_r+0x780>
 8007d52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	f000 80a5 	beq.w	8007ea4 <_dtoa_r+0x894>
 8007d5a:	2e00      	cmp	r6, #0
 8007d5c:	dd10      	ble.n	8007d80 <_dtoa_r+0x770>
 8007d5e:	4639      	mov	r1, r7
 8007d60:	4632      	mov	r2, r6
 8007d62:	4620      	mov	r0, r4
 8007d64:	f001 f92e 	bl	8008fc4 <__pow5mult>
 8007d68:	4652      	mov	r2, sl
 8007d6a:	4601      	mov	r1, r0
 8007d6c:	4607      	mov	r7, r0
 8007d6e:	4620      	mov	r0, r4
 8007d70:	f001 f89b 	bl	8008eaa <__multiply>
 8007d74:	4651      	mov	r1, sl
 8007d76:	4680      	mov	r8, r0
 8007d78:	4620      	mov	r0, r4
 8007d7a:	f000 ffaf 	bl	8008cdc <_Bfree>
 8007d7e:	46c2      	mov	sl, r8
 8007d80:	9b08      	ldr	r3, [sp, #32]
 8007d82:	1b9a      	subs	r2, r3, r6
 8007d84:	d004      	beq.n	8007d90 <_dtoa_r+0x780>
 8007d86:	4651      	mov	r1, sl
 8007d88:	4620      	mov	r0, r4
 8007d8a:	f001 f91b 	bl	8008fc4 <__pow5mult>
 8007d8e:	4682      	mov	sl, r0
 8007d90:	2101      	movs	r1, #1
 8007d92:	4620      	mov	r0, r4
 8007d94:	f001 f880 	bl	8008e98 <__i2b>
 8007d98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	4606      	mov	r6, r0
 8007d9e:	f340 8083 	ble.w	8007ea8 <_dtoa_r+0x898>
 8007da2:	461a      	mov	r2, r3
 8007da4:	4601      	mov	r1, r0
 8007da6:	4620      	mov	r0, r4
 8007da8:	f001 f90c 	bl	8008fc4 <__pow5mult>
 8007dac:	9b07      	ldr	r3, [sp, #28]
 8007dae:	2b01      	cmp	r3, #1
 8007db0:	4606      	mov	r6, r0
 8007db2:	dd7c      	ble.n	8007eae <_dtoa_r+0x89e>
 8007db4:	f04f 0800 	mov.w	r8, #0
 8007db8:	6933      	ldr	r3, [r6, #16]
 8007dba:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007dbe:	6918      	ldr	r0, [r3, #16]
 8007dc0:	f001 f81c 	bl	8008dfc <__hi0bits>
 8007dc4:	f1c0 0020 	rsb	r0, r0, #32
 8007dc8:	9b06      	ldr	r3, [sp, #24]
 8007dca:	4418      	add	r0, r3
 8007dcc:	f010 001f 	ands.w	r0, r0, #31
 8007dd0:	f000 8096 	beq.w	8007f00 <_dtoa_r+0x8f0>
 8007dd4:	f1c0 0320 	rsb	r3, r0, #32
 8007dd8:	2b04      	cmp	r3, #4
 8007dda:	f340 8087 	ble.w	8007eec <_dtoa_r+0x8dc>
 8007dde:	9b05      	ldr	r3, [sp, #20]
 8007de0:	f1c0 001c 	rsb	r0, r0, #28
 8007de4:	4403      	add	r3, r0
 8007de6:	9305      	str	r3, [sp, #20]
 8007de8:	9b06      	ldr	r3, [sp, #24]
 8007dea:	4405      	add	r5, r0
 8007dec:	4403      	add	r3, r0
 8007dee:	9306      	str	r3, [sp, #24]
 8007df0:	9b05      	ldr	r3, [sp, #20]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	dd05      	ble.n	8007e02 <_dtoa_r+0x7f2>
 8007df6:	4651      	mov	r1, sl
 8007df8:	461a      	mov	r2, r3
 8007dfa:	4620      	mov	r0, r4
 8007dfc:	f001 f930 	bl	8009060 <__lshift>
 8007e00:	4682      	mov	sl, r0
 8007e02:	9b06      	ldr	r3, [sp, #24]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	dd05      	ble.n	8007e14 <_dtoa_r+0x804>
 8007e08:	4631      	mov	r1, r6
 8007e0a:	461a      	mov	r2, r3
 8007e0c:	4620      	mov	r0, r4
 8007e0e:	f001 f927 	bl	8009060 <__lshift>
 8007e12:	4606      	mov	r6, r0
 8007e14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d074      	beq.n	8007f04 <_dtoa_r+0x8f4>
 8007e1a:	4631      	mov	r1, r6
 8007e1c:	4650      	mov	r0, sl
 8007e1e:	f001 f970 	bl	8009102 <__mcmp>
 8007e22:	2800      	cmp	r0, #0
 8007e24:	da6e      	bge.n	8007f04 <_dtoa_r+0x8f4>
 8007e26:	2300      	movs	r3, #0
 8007e28:	4651      	mov	r1, sl
 8007e2a:	220a      	movs	r2, #10
 8007e2c:	4620      	mov	r0, r4
 8007e2e:	f000 ff6c 	bl	8008d0a <__multadd>
 8007e32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e34:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007e38:	4682      	mov	sl, r0
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	f000 81a8 	beq.w	8008190 <_dtoa_r+0xb80>
 8007e40:	2300      	movs	r3, #0
 8007e42:	4639      	mov	r1, r7
 8007e44:	220a      	movs	r2, #10
 8007e46:	4620      	mov	r0, r4
 8007e48:	f000 ff5f 	bl	8008d0a <__multadd>
 8007e4c:	9b04      	ldr	r3, [sp, #16]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	4607      	mov	r7, r0
 8007e52:	f300 80c8 	bgt.w	8007fe6 <_dtoa_r+0x9d6>
 8007e56:	9b07      	ldr	r3, [sp, #28]
 8007e58:	2b02      	cmp	r3, #2
 8007e5a:	f340 80c4 	ble.w	8007fe6 <_dtoa_r+0x9d6>
 8007e5e:	e059      	b.n	8007f14 <_dtoa_r+0x904>
 8007e60:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007e62:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007e66:	e756      	b.n	8007d16 <_dtoa_r+0x706>
 8007e68:	9b03      	ldr	r3, [sp, #12]
 8007e6a:	1e5e      	subs	r6, r3, #1
 8007e6c:	9b08      	ldr	r3, [sp, #32]
 8007e6e:	42b3      	cmp	r3, r6
 8007e70:	bfbf      	itttt	lt
 8007e72:	9b08      	ldrlt	r3, [sp, #32]
 8007e74:	9608      	strlt	r6, [sp, #32]
 8007e76:	1af2      	sublt	r2, r6, r3
 8007e78:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8007e7a:	bfb6      	itet	lt
 8007e7c:	189b      	addlt	r3, r3, r2
 8007e7e:	1b9e      	subge	r6, r3, r6
 8007e80:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8007e82:	9b03      	ldr	r3, [sp, #12]
 8007e84:	bfb8      	it	lt
 8007e86:	2600      	movlt	r6, #0
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	bfb9      	ittee	lt
 8007e8c:	9b05      	ldrlt	r3, [sp, #20]
 8007e8e:	9a03      	ldrlt	r2, [sp, #12]
 8007e90:	9d05      	ldrge	r5, [sp, #20]
 8007e92:	9b03      	ldrge	r3, [sp, #12]
 8007e94:	bfbc      	itt	lt
 8007e96:	1a9d      	sublt	r5, r3, r2
 8007e98:	2300      	movlt	r3, #0
 8007e9a:	e73e      	b.n	8007d1a <_dtoa_r+0x70a>
 8007e9c:	9e08      	ldr	r6, [sp, #32]
 8007e9e:	9d05      	ldr	r5, [sp, #20]
 8007ea0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007ea2:	e745      	b.n	8007d30 <_dtoa_r+0x720>
 8007ea4:	9a08      	ldr	r2, [sp, #32]
 8007ea6:	e76e      	b.n	8007d86 <_dtoa_r+0x776>
 8007ea8:	9b07      	ldr	r3, [sp, #28]
 8007eaa:	2b01      	cmp	r3, #1
 8007eac:	dc19      	bgt.n	8007ee2 <_dtoa_r+0x8d2>
 8007eae:	9b00      	ldr	r3, [sp, #0]
 8007eb0:	b9bb      	cbnz	r3, 8007ee2 <_dtoa_r+0x8d2>
 8007eb2:	9b01      	ldr	r3, [sp, #4]
 8007eb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007eb8:	b99b      	cbnz	r3, 8007ee2 <_dtoa_r+0x8d2>
 8007eba:	9b01      	ldr	r3, [sp, #4]
 8007ebc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007ec0:	0d1b      	lsrs	r3, r3, #20
 8007ec2:	051b      	lsls	r3, r3, #20
 8007ec4:	b183      	cbz	r3, 8007ee8 <_dtoa_r+0x8d8>
 8007ec6:	9b05      	ldr	r3, [sp, #20]
 8007ec8:	3301      	adds	r3, #1
 8007eca:	9305      	str	r3, [sp, #20]
 8007ecc:	9b06      	ldr	r3, [sp, #24]
 8007ece:	3301      	adds	r3, #1
 8007ed0:	9306      	str	r3, [sp, #24]
 8007ed2:	f04f 0801 	mov.w	r8, #1
 8007ed6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	f47f af6d 	bne.w	8007db8 <_dtoa_r+0x7a8>
 8007ede:	2001      	movs	r0, #1
 8007ee0:	e772      	b.n	8007dc8 <_dtoa_r+0x7b8>
 8007ee2:	f04f 0800 	mov.w	r8, #0
 8007ee6:	e7f6      	b.n	8007ed6 <_dtoa_r+0x8c6>
 8007ee8:	4698      	mov	r8, r3
 8007eea:	e7f4      	b.n	8007ed6 <_dtoa_r+0x8c6>
 8007eec:	d080      	beq.n	8007df0 <_dtoa_r+0x7e0>
 8007eee:	9a05      	ldr	r2, [sp, #20]
 8007ef0:	331c      	adds	r3, #28
 8007ef2:	441a      	add	r2, r3
 8007ef4:	9205      	str	r2, [sp, #20]
 8007ef6:	9a06      	ldr	r2, [sp, #24]
 8007ef8:	441a      	add	r2, r3
 8007efa:	441d      	add	r5, r3
 8007efc:	4613      	mov	r3, r2
 8007efe:	e776      	b.n	8007dee <_dtoa_r+0x7de>
 8007f00:	4603      	mov	r3, r0
 8007f02:	e7f4      	b.n	8007eee <_dtoa_r+0x8de>
 8007f04:	9b03      	ldr	r3, [sp, #12]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	dc36      	bgt.n	8007f78 <_dtoa_r+0x968>
 8007f0a:	9b07      	ldr	r3, [sp, #28]
 8007f0c:	2b02      	cmp	r3, #2
 8007f0e:	dd33      	ble.n	8007f78 <_dtoa_r+0x968>
 8007f10:	9b03      	ldr	r3, [sp, #12]
 8007f12:	9304      	str	r3, [sp, #16]
 8007f14:	9b04      	ldr	r3, [sp, #16]
 8007f16:	b963      	cbnz	r3, 8007f32 <_dtoa_r+0x922>
 8007f18:	4631      	mov	r1, r6
 8007f1a:	2205      	movs	r2, #5
 8007f1c:	4620      	mov	r0, r4
 8007f1e:	f000 fef4 	bl	8008d0a <__multadd>
 8007f22:	4601      	mov	r1, r0
 8007f24:	4606      	mov	r6, r0
 8007f26:	4650      	mov	r0, sl
 8007f28:	f001 f8eb 	bl	8009102 <__mcmp>
 8007f2c:	2800      	cmp	r0, #0
 8007f2e:	f73f adb6 	bgt.w	8007a9e <_dtoa_r+0x48e>
 8007f32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f34:	9d02      	ldr	r5, [sp, #8]
 8007f36:	ea6f 0b03 	mvn.w	fp, r3
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	9303      	str	r3, [sp, #12]
 8007f3e:	4631      	mov	r1, r6
 8007f40:	4620      	mov	r0, r4
 8007f42:	f000 fecb 	bl	8008cdc <_Bfree>
 8007f46:	2f00      	cmp	r7, #0
 8007f48:	f43f aea6 	beq.w	8007c98 <_dtoa_r+0x688>
 8007f4c:	9b03      	ldr	r3, [sp, #12]
 8007f4e:	b12b      	cbz	r3, 8007f5c <_dtoa_r+0x94c>
 8007f50:	42bb      	cmp	r3, r7
 8007f52:	d003      	beq.n	8007f5c <_dtoa_r+0x94c>
 8007f54:	4619      	mov	r1, r3
 8007f56:	4620      	mov	r0, r4
 8007f58:	f000 fec0 	bl	8008cdc <_Bfree>
 8007f5c:	4639      	mov	r1, r7
 8007f5e:	4620      	mov	r0, r4
 8007f60:	f000 febc 	bl	8008cdc <_Bfree>
 8007f64:	e698      	b.n	8007c98 <_dtoa_r+0x688>
 8007f66:	2600      	movs	r6, #0
 8007f68:	4637      	mov	r7, r6
 8007f6a:	e7e2      	b.n	8007f32 <_dtoa_r+0x922>
 8007f6c:	46bb      	mov	fp, r7
 8007f6e:	4637      	mov	r7, r6
 8007f70:	e595      	b.n	8007a9e <_dtoa_r+0x48e>
 8007f72:	bf00      	nop
 8007f74:	40240000 	.word	0x40240000
 8007f78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f7a:	bb93      	cbnz	r3, 8007fe2 <_dtoa_r+0x9d2>
 8007f7c:	9b03      	ldr	r3, [sp, #12]
 8007f7e:	9304      	str	r3, [sp, #16]
 8007f80:	9d02      	ldr	r5, [sp, #8]
 8007f82:	4631      	mov	r1, r6
 8007f84:	4650      	mov	r0, sl
 8007f86:	f7ff fab7 	bl	80074f8 <quorem>
 8007f8a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007f8e:	f805 9b01 	strb.w	r9, [r5], #1
 8007f92:	9b02      	ldr	r3, [sp, #8]
 8007f94:	9a04      	ldr	r2, [sp, #16]
 8007f96:	1aeb      	subs	r3, r5, r3
 8007f98:	429a      	cmp	r2, r3
 8007f9a:	f300 80dc 	bgt.w	8008156 <_dtoa_r+0xb46>
 8007f9e:	9b02      	ldr	r3, [sp, #8]
 8007fa0:	2a01      	cmp	r2, #1
 8007fa2:	bfac      	ite	ge
 8007fa4:	189b      	addge	r3, r3, r2
 8007fa6:	3301      	addlt	r3, #1
 8007fa8:	4698      	mov	r8, r3
 8007faa:	2300      	movs	r3, #0
 8007fac:	9303      	str	r3, [sp, #12]
 8007fae:	4651      	mov	r1, sl
 8007fb0:	2201      	movs	r2, #1
 8007fb2:	4620      	mov	r0, r4
 8007fb4:	f001 f854 	bl	8009060 <__lshift>
 8007fb8:	4631      	mov	r1, r6
 8007fba:	4682      	mov	sl, r0
 8007fbc:	f001 f8a1 	bl	8009102 <__mcmp>
 8007fc0:	2800      	cmp	r0, #0
 8007fc2:	f300 808d 	bgt.w	80080e0 <_dtoa_r+0xad0>
 8007fc6:	d103      	bne.n	8007fd0 <_dtoa_r+0x9c0>
 8007fc8:	f019 0f01 	tst.w	r9, #1
 8007fcc:	f040 8088 	bne.w	80080e0 <_dtoa_r+0xad0>
 8007fd0:	4645      	mov	r5, r8
 8007fd2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007fd6:	2b30      	cmp	r3, #48	; 0x30
 8007fd8:	f105 32ff 	add.w	r2, r5, #4294967295
 8007fdc:	d1af      	bne.n	8007f3e <_dtoa_r+0x92e>
 8007fde:	4615      	mov	r5, r2
 8007fe0:	e7f7      	b.n	8007fd2 <_dtoa_r+0x9c2>
 8007fe2:	9b03      	ldr	r3, [sp, #12]
 8007fe4:	9304      	str	r3, [sp, #16]
 8007fe6:	2d00      	cmp	r5, #0
 8007fe8:	dd05      	ble.n	8007ff6 <_dtoa_r+0x9e6>
 8007fea:	4639      	mov	r1, r7
 8007fec:	462a      	mov	r2, r5
 8007fee:	4620      	mov	r0, r4
 8007ff0:	f001 f836 	bl	8009060 <__lshift>
 8007ff4:	4607      	mov	r7, r0
 8007ff6:	f1b8 0f00 	cmp.w	r8, #0
 8007ffa:	d04c      	beq.n	8008096 <_dtoa_r+0xa86>
 8007ffc:	6879      	ldr	r1, [r7, #4]
 8007ffe:	4620      	mov	r0, r4
 8008000:	f000 fe38 	bl	8008c74 <_Balloc>
 8008004:	693a      	ldr	r2, [r7, #16]
 8008006:	3202      	adds	r2, #2
 8008008:	4605      	mov	r5, r0
 800800a:	0092      	lsls	r2, r2, #2
 800800c:	f107 010c 	add.w	r1, r7, #12
 8008010:	300c      	adds	r0, #12
 8008012:	f7fd fb7f 	bl	8005714 <memcpy>
 8008016:	2201      	movs	r2, #1
 8008018:	4629      	mov	r1, r5
 800801a:	4620      	mov	r0, r4
 800801c:	f001 f820 	bl	8009060 <__lshift>
 8008020:	9b00      	ldr	r3, [sp, #0]
 8008022:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008026:	9703      	str	r7, [sp, #12]
 8008028:	f003 0301 	and.w	r3, r3, #1
 800802c:	4607      	mov	r7, r0
 800802e:	9305      	str	r3, [sp, #20]
 8008030:	4631      	mov	r1, r6
 8008032:	4650      	mov	r0, sl
 8008034:	f7ff fa60 	bl	80074f8 <quorem>
 8008038:	9903      	ldr	r1, [sp, #12]
 800803a:	4605      	mov	r5, r0
 800803c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008040:	4650      	mov	r0, sl
 8008042:	f001 f85e 	bl	8009102 <__mcmp>
 8008046:	463a      	mov	r2, r7
 8008048:	9000      	str	r0, [sp, #0]
 800804a:	4631      	mov	r1, r6
 800804c:	4620      	mov	r0, r4
 800804e:	f001 f872 	bl	8009136 <__mdiff>
 8008052:	68c3      	ldr	r3, [r0, #12]
 8008054:	4602      	mov	r2, r0
 8008056:	bb03      	cbnz	r3, 800809a <_dtoa_r+0xa8a>
 8008058:	4601      	mov	r1, r0
 800805a:	9006      	str	r0, [sp, #24]
 800805c:	4650      	mov	r0, sl
 800805e:	f001 f850 	bl	8009102 <__mcmp>
 8008062:	9a06      	ldr	r2, [sp, #24]
 8008064:	4603      	mov	r3, r0
 8008066:	4611      	mov	r1, r2
 8008068:	4620      	mov	r0, r4
 800806a:	9306      	str	r3, [sp, #24]
 800806c:	f000 fe36 	bl	8008cdc <_Bfree>
 8008070:	9b06      	ldr	r3, [sp, #24]
 8008072:	b9a3      	cbnz	r3, 800809e <_dtoa_r+0xa8e>
 8008074:	9a07      	ldr	r2, [sp, #28]
 8008076:	b992      	cbnz	r2, 800809e <_dtoa_r+0xa8e>
 8008078:	9a05      	ldr	r2, [sp, #20]
 800807a:	b982      	cbnz	r2, 800809e <_dtoa_r+0xa8e>
 800807c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008080:	d029      	beq.n	80080d6 <_dtoa_r+0xac6>
 8008082:	9b00      	ldr	r3, [sp, #0]
 8008084:	2b00      	cmp	r3, #0
 8008086:	dd01      	ble.n	800808c <_dtoa_r+0xa7c>
 8008088:	f105 0931 	add.w	r9, r5, #49	; 0x31
 800808c:	f108 0501 	add.w	r5, r8, #1
 8008090:	f888 9000 	strb.w	r9, [r8]
 8008094:	e753      	b.n	8007f3e <_dtoa_r+0x92e>
 8008096:	4638      	mov	r0, r7
 8008098:	e7c2      	b.n	8008020 <_dtoa_r+0xa10>
 800809a:	2301      	movs	r3, #1
 800809c:	e7e3      	b.n	8008066 <_dtoa_r+0xa56>
 800809e:	9a00      	ldr	r2, [sp, #0]
 80080a0:	2a00      	cmp	r2, #0
 80080a2:	db04      	blt.n	80080ae <_dtoa_r+0xa9e>
 80080a4:	d125      	bne.n	80080f2 <_dtoa_r+0xae2>
 80080a6:	9a07      	ldr	r2, [sp, #28]
 80080a8:	bb1a      	cbnz	r2, 80080f2 <_dtoa_r+0xae2>
 80080aa:	9a05      	ldr	r2, [sp, #20]
 80080ac:	bb0a      	cbnz	r2, 80080f2 <_dtoa_r+0xae2>
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	ddec      	ble.n	800808c <_dtoa_r+0xa7c>
 80080b2:	4651      	mov	r1, sl
 80080b4:	2201      	movs	r2, #1
 80080b6:	4620      	mov	r0, r4
 80080b8:	f000 ffd2 	bl	8009060 <__lshift>
 80080bc:	4631      	mov	r1, r6
 80080be:	4682      	mov	sl, r0
 80080c0:	f001 f81f 	bl	8009102 <__mcmp>
 80080c4:	2800      	cmp	r0, #0
 80080c6:	dc03      	bgt.n	80080d0 <_dtoa_r+0xac0>
 80080c8:	d1e0      	bne.n	800808c <_dtoa_r+0xa7c>
 80080ca:	f019 0f01 	tst.w	r9, #1
 80080ce:	d0dd      	beq.n	800808c <_dtoa_r+0xa7c>
 80080d0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80080d4:	d1d8      	bne.n	8008088 <_dtoa_r+0xa78>
 80080d6:	2339      	movs	r3, #57	; 0x39
 80080d8:	f888 3000 	strb.w	r3, [r8]
 80080dc:	f108 0801 	add.w	r8, r8, #1
 80080e0:	4645      	mov	r5, r8
 80080e2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80080e6:	2b39      	cmp	r3, #57	; 0x39
 80080e8:	f105 32ff 	add.w	r2, r5, #4294967295
 80080ec:	d03b      	beq.n	8008166 <_dtoa_r+0xb56>
 80080ee:	3301      	adds	r3, #1
 80080f0:	e040      	b.n	8008174 <_dtoa_r+0xb64>
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	f108 0501 	add.w	r5, r8, #1
 80080f8:	dd05      	ble.n	8008106 <_dtoa_r+0xaf6>
 80080fa:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80080fe:	d0ea      	beq.n	80080d6 <_dtoa_r+0xac6>
 8008100:	f109 0901 	add.w	r9, r9, #1
 8008104:	e7c4      	b.n	8008090 <_dtoa_r+0xa80>
 8008106:	9b02      	ldr	r3, [sp, #8]
 8008108:	9a04      	ldr	r2, [sp, #16]
 800810a:	f805 9c01 	strb.w	r9, [r5, #-1]
 800810e:	1aeb      	subs	r3, r5, r3
 8008110:	4293      	cmp	r3, r2
 8008112:	46a8      	mov	r8, r5
 8008114:	f43f af4b 	beq.w	8007fae <_dtoa_r+0x99e>
 8008118:	4651      	mov	r1, sl
 800811a:	2300      	movs	r3, #0
 800811c:	220a      	movs	r2, #10
 800811e:	4620      	mov	r0, r4
 8008120:	f000 fdf3 	bl	8008d0a <__multadd>
 8008124:	9b03      	ldr	r3, [sp, #12]
 8008126:	9903      	ldr	r1, [sp, #12]
 8008128:	42bb      	cmp	r3, r7
 800812a:	4682      	mov	sl, r0
 800812c:	f04f 0300 	mov.w	r3, #0
 8008130:	f04f 020a 	mov.w	r2, #10
 8008134:	4620      	mov	r0, r4
 8008136:	d104      	bne.n	8008142 <_dtoa_r+0xb32>
 8008138:	f000 fde7 	bl	8008d0a <__multadd>
 800813c:	9003      	str	r0, [sp, #12]
 800813e:	4607      	mov	r7, r0
 8008140:	e776      	b.n	8008030 <_dtoa_r+0xa20>
 8008142:	f000 fde2 	bl	8008d0a <__multadd>
 8008146:	2300      	movs	r3, #0
 8008148:	9003      	str	r0, [sp, #12]
 800814a:	220a      	movs	r2, #10
 800814c:	4639      	mov	r1, r7
 800814e:	4620      	mov	r0, r4
 8008150:	f000 fddb 	bl	8008d0a <__multadd>
 8008154:	e7f3      	b.n	800813e <_dtoa_r+0xb2e>
 8008156:	4651      	mov	r1, sl
 8008158:	2300      	movs	r3, #0
 800815a:	220a      	movs	r2, #10
 800815c:	4620      	mov	r0, r4
 800815e:	f000 fdd4 	bl	8008d0a <__multadd>
 8008162:	4682      	mov	sl, r0
 8008164:	e70d      	b.n	8007f82 <_dtoa_r+0x972>
 8008166:	9b02      	ldr	r3, [sp, #8]
 8008168:	4293      	cmp	r3, r2
 800816a:	d105      	bne.n	8008178 <_dtoa_r+0xb68>
 800816c:	9a02      	ldr	r2, [sp, #8]
 800816e:	f10b 0b01 	add.w	fp, fp, #1
 8008172:	2331      	movs	r3, #49	; 0x31
 8008174:	7013      	strb	r3, [r2, #0]
 8008176:	e6e2      	b.n	8007f3e <_dtoa_r+0x92e>
 8008178:	4615      	mov	r5, r2
 800817a:	e7b2      	b.n	80080e2 <_dtoa_r+0xad2>
 800817c:	4b09      	ldr	r3, [pc, #36]	; (80081a4 <_dtoa_r+0xb94>)
 800817e:	f7ff baae 	b.w	80076de <_dtoa_r+0xce>
 8008182:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008184:	2b00      	cmp	r3, #0
 8008186:	f47f aa88 	bne.w	800769a <_dtoa_r+0x8a>
 800818a:	4b07      	ldr	r3, [pc, #28]	; (80081a8 <_dtoa_r+0xb98>)
 800818c:	f7ff baa7 	b.w	80076de <_dtoa_r+0xce>
 8008190:	9b04      	ldr	r3, [sp, #16]
 8008192:	2b00      	cmp	r3, #0
 8008194:	f73f aef4 	bgt.w	8007f80 <_dtoa_r+0x970>
 8008198:	9b07      	ldr	r3, [sp, #28]
 800819a:	2b02      	cmp	r3, #2
 800819c:	f77f aef0 	ble.w	8007f80 <_dtoa_r+0x970>
 80081a0:	e6b8      	b.n	8007f14 <_dtoa_r+0x904>
 80081a2:	bf00      	nop
 80081a4:	08009c82 	.word	0x08009c82
 80081a8:	08009ca4 	.word	0x08009ca4

080081ac <rshift>:
 80081ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081ae:	6906      	ldr	r6, [r0, #16]
 80081b0:	114b      	asrs	r3, r1, #5
 80081b2:	42b3      	cmp	r3, r6
 80081b4:	f100 0514 	add.w	r5, r0, #20
 80081b8:	da2b      	bge.n	8008212 <rshift+0x66>
 80081ba:	f011 011f 	ands.w	r1, r1, #31
 80081be:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 80081c2:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 80081c6:	d108      	bne.n	80081da <rshift+0x2e>
 80081c8:	4629      	mov	r1, r5
 80081ca:	42b2      	cmp	r2, r6
 80081cc:	460b      	mov	r3, r1
 80081ce:	d210      	bcs.n	80081f2 <rshift+0x46>
 80081d0:	f852 3b04 	ldr.w	r3, [r2], #4
 80081d4:	f841 3b04 	str.w	r3, [r1], #4
 80081d8:	e7f7      	b.n	80081ca <rshift+0x1e>
 80081da:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
 80081de:	f1c1 0e20 	rsb	lr, r1, #32
 80081e2:	3204      	adds	r2, #4
 80081e4:	40cc      	lsrs	r4, r1
 80081e6:	462b      	mov	r3, r5
 80081e8:	42b2      	cmp	r2, r6
 80081ea:	d308      	bcc.n	80081fe <rshift+0x52>
 80081ec:	601c      	str	r4, [r3, #0]
 80081ee:	b104      	cbz	r4, 80081f2 <rshift+0x46>
 80081f0:	3304      	adds	r3, #4
 80081f2:	1b5b      	subs	r3, r3, r5
 80081f4:	109b      	asrs	r3, r3, #2
 80081f6:	6103      	str	r3, [r0, #16]
 80081f8:	b903      	cbnz	r3, 80081fc <rshift+0x50>
 80081fa:	6143      	str	r3, [r0, #20]
 80081fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081fe:	6817      	ldr	r7, [r2, #0]
 8008200:	fa07 f70e 	lsl.w	r7, r7, lr
 8008204:	433c      	orrs	r4, r7
 8008206:	f843 4b04 	str.w	r4, [r3], #4
 800820a:	f852 4b04 	ldr.w	r4, [r2], #4
 800820e:	40cc      	lsrs	r4, r1
 8008210:	e7ea      	b.n	80081e8 <rshift+0x3c>
 8008212:	462b      	mov	r3, r5
 8008214:	e7ed      	b.n	80081f2 <rshift+0x46>

08008216 <__hexdig_fun>:
 8008216:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800821a:	2b09      	cmp	r3, #9
 800821c:	d802      	bhi.n	8008224 <__hexdig_fun+0xe>
 800821e:	3820      	subs	r0, #32
 8008220:	b2c0      	uxtb	r0, r0
 8008222:	4770      	bx	lr
 8008224:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008228:	2b05      	cmp	r3, #5
 800822a:	d801      	bhi.n	8008230 <__hexdig_fun+0x1a>
 800822c:	3847      	subs	r0, #71	; 0x47
 800822e:	e7f7      	b.n	8008220 <__hexdig_fun+0xa>
 8008230:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008234:	2b05      	cmp	r3, #5
 8008236:	d801      	bhi.n	800823c <__hexdig_fun+0x26>
 8008238:	3827      	subs	r0, #39	; 0x27
 800823a:	e7f1      	b.n	8008220 <__hexdig_fun+0xa>
 800823c:	2000      	movs	r0, #0
 800823e:	4770      	bx	lr

08008240 <__gethex>:
 8008240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008244:	b08b      	sub	sp, #44	; 0x2c
 8008246:	468a      	mov	sl, r1
 8008248:	9002      	str	r0, [sp, #8]
 800824a:	9816      	ldr	r0, [sp, #88]	; 0x58
 800824c:	9306      	str	r3, [sp, #24]
 800824e:	4690      	mov	r8, r2
 8008250:	f000 facc 	bl	80087ec <__localeconv_l>
 8008254:	6803      	ldr	r3, [r0, #0]
 8008256:	9303      	str	r3, [sp, #12]
 8008258:	4618      	mov	r0, r3
 800825a:	f7f7 ffb9 	bl	80001d0 <strlen>
 800825e:	9b03      	ldr	r3, [sp, #12]
 8008260:	9001      	str	r0, [sp, #4]
 8008262:	4403      	add	r3, r0
 8008264:	f04f 0b00 	mov.w	fp, #0
 8008268:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800826c:	9307      	str	r3, [sp, #28]
 800826e:	f8da 3000 	ldr.w	r3, [sl]
 8008272:	3302      	adds	r3, #2
 8008274:	461f      	mov	r7, r3
 8008276:	f813 0b01 	ldrb.w	r0, [r3], #1
 800827a:	2830      	cmp	r0, #48	; 0x30
 800827c:	d06c      	beq.n	8008358 <__gethex+0x118>
 800827e:	f7ff ffca 	bl	8008216 <__hexdig_fun>
 8008282:	4604      	mov	r4, r0
 8008284:	2800      	cmp	r0, #0
 8008286:	d16a      	bne.n	800835e <__gethex+0x11e>
 8008288:	9a01      	ldr	r2, [sp, #4]
 800828a:	9903      	ldr	r1, [sp, #12]
 800828c:	4638      	mov	r0, r7
 800828e:	f7fd fa97 	bl	80057c0 <strncmp>
 8008292:	2800      	cmp	r0, #0
 8008294:	d166      	bne.n	8008364 <__gethex+0x124>
 8008296:	9b01      	ldr	r3, [sp, #4]
 8008298:	5cf8      	ldrb	r0, [r7, r3]
 800829a:	18fe      	adds	r6, r7, r3
 800829c:	f7ff ffbb 	bl	8008216 <__hexdig_fun>
 80082a0:	2800      	cmp	r0, #0
 80082a2:	d062      	beq.n	800836a <__gethex+0x12a>
 80082a4:	4633      	mov	r3, r6
 80082a6:	7818      	ldrb	r0, [r3, #0]
 80082a8:	2830      	cmp	r0, #48	; 0x30
 80082aa:	461f      	mov	r7, r3
 80082ac:	f103 0301 	add.w	r3, r3, #1
 80082b0:	d0f9      	beq.n	80082a6 <__gethex+0x66>
 80082b2:	f7ff ffb0 	bl	8008216 <__hexdig_fun>
 80082b6:	fab0 f580 	clz	r5, r0
 80082ba:	096d      	lsrs	r5, r5, #5
 80082bc:	4634      	mov	r4, r6
 80082be:	f04f 0b01 	mov.w	fp, #1
 80082c2:	463a      	mov	r2, r7
 80082c4:	4616      	mov	r6, r2
 80082c6:	3201      	adds	r2, #1
 80082c8:	7830      	ldrb	r0, [r6, #0]
 80082ca:	f7ff ffa4 	bl	8008216 <__hexdig_fun>
 80082ce:	2800      	cmp	r0, #0
 80082d0:	d1f8      	bne.n	80082c4 <__gethex+0x84>
 80082d2:	9a01      	ldr	r2, [sp, #4]
 80082d4:	9903      	ldr	r1, [sp, #12]
 80082d6:	4630      	mov	r0, r6
 80082d8:	f7fd fa72 	bl	80057c0 <strncmp>
 80082dc:	b950      	cbnz	r0, 80082f4 <__gethex+0xb4>
 80082de:	b954      	cbnz	r4, 80082f6 <__gethex+0xb6>
 80082e0:	9b01      	ldr	r3, [sp, #4]
 80082e2:	18f4      	adds	r4, r6, r3
 80082e4:	4622      	mov	r2, r4
 80082e6:	4616      	mov	r6, r2
 80082e8:	3201      	adds	r2, #1
 80082ea:	7830      	ldrb	r0, [r6, #0]
 80082ec:	f7ff ff93 	bl	8008216 <__hexdig_fun>
 80082f0:	2800      	cmp	r0, #0
 80082f2:	d1f8      	bne.n	80082e6 <__gethex+0xa6>
 80082f4:	b10c      	cbz	r4, 80082fa <__gethex+0xba>
 80082f6:	1ba4      	subs	r4, r4, r6
 80082f8:	00a4      	lsls	r4, r4, #2
 80082fa:	7833      	ldrb	r3, [r6, #0]
 80082fc:	2b50      	cmp	r3, #80	; 0x50
 80082fe:	d001      	beq.n	8008304 <__gethex+0xc4>
 8008300:	2b70      	cmp	r3, #112	; 0x70
 8008302:	d140      	bne.n	8008386 <__gethex+0x146>
 8008304:	7873      	ldrb	r3, [r6, #1]
 8008306:	2b2b      	cmp	r3, #43	; 0x2b
 8008308:	d035      	beq.n	8008376 <__gethex+0x136>
 800830a:	2b2d      	cmp	r3, #45	; 0x2d
 800830c:	d02f      	beq.n	800836e <__gethex+0x12e>
 800830e:	1c71      	adds	r1, r6, #1
 8008310:	f04f 0900 	mov.w	r9, #0
 8008314:	7808      	ldrb	r0, [r1, #0]
 8008316:	f7ff ff7e 	bl	8008216 <__hexdig_fun>
 800831a:	1e43      	subs	r3, r0, #1
 800831c:	b2db      	uxtb	r3, r3
 800831e:	2b18      	cmp	r3, #24
 8008320:	d831      	bhi.n	8008386 <__gethex+0x146>
 8008322:	f1a0 0210 	sub.w	r2, r0, #16
 8008326:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800832a:	f7ff ff74 	bl	8008216 <__hexdig_fun>
 800832e:	1e43      	subs	r3, r0, #1
 8008330:	b2db      	uxtb	r3, r3
 8008332:	2b18      	cmp	r3, #24
 8008334:	d922      	bls.n	800837c <__gethex+0x13c>
 8008336:	f1b9 0f00 	cmp.w	r9, #0
 800833a:	d000      	beq.n	800833e <__gethex+0xfe>
 800833c:	4252      	negs	r2, r2
 800833e:	4414      	add	r4, r2
 8008340:	f8ca 1000 	str.w	r1, [sl]
 8008344:	b30d      	cbz	r5, 800838a <__gethex+0x14a>
 8008346:	f1bb 0f00 	cmp.w	fp, #0
 800834a:	bf14      	ite	ne
 800834c:	2700      	movne	r7, #0
 800834e:	2706      	moveq	r7, #6
 8008350:	4638      	mov	r0, r7
 8008352:	b00b      	add	sp, #44	; 0x2c
 8008354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008358:	f10b 0b01 	add.w	fp, fp, #1
 800835c:	e78a      	b.n	8008274 <__gethex+0x34>
 800835e:	2500      	movs	r5, #0
 8008360:	462c      	mov	r4, r5
 8008362:	e7ae      	b.n	80082c2 <__gethex+0x82>
 8008364:	463e      	mov	r6, r7
 8008366:	2501      	movs	r5, #1
 8008368:	e7c7      	b.n	80082fa <__gethex+0xba>
 800836a:	4604      	mov	r4, r0
 800836c:	e7fb      	b.n	8008366 <__gethex+0x126>
 800836e:	f04f 0901 	mov.w	r9, #1
 8008372:	1cb1      	adds	r1, r6, #2
 8008374:	e7ce      	b.n	8008314 <__gethex+0xd4>
 8008376:	f04f 0900 	mov.w	r9, #0
 800837a:	e7fa      	b.n	8008372 <__gethex+0x132>
 800837c:	230a      	movs	r3, #10
 800837e:	fb03 0202 	mla	r2, r3, r2, r0
 8008382:	3a10      	subs	r2, #16
 8008384:	e7cf      	b.n	8008326 <__gethex+0xe6>
 8008386:	4631      	mov	r1, r6
 8008388:	e7da      	b.n	8008340 <__gethex+0x100>
 800838a:	1bf3      	subs	r3, r6, r7
 800838c:	3b01      	subs	r3, #1
 800838e:	4629      	mov	r1, r5
 8008390:	2b07      	cmp	r3, #7
 8008392:	dc49      	bgt.n	8008428 <__gethex+0x1e8>
 8008394:	9802      	ldr	r0, [sp, #8]
 8008396:	f000 fc6d 	bl	8008c74 <_Balloc>
 800839a:	9b01      	ldr	r3, [sp, #4]
 800839c:	f100 0914 	add.w	r9, r0, #20
 80083a0:	f04f 0b00 	mov.w	fp, #0
 80083a4:	f1c3 0301 	rsb	r3, r3, #1
 80083a8:	4605      	mov	r5, r0
 80083aa:	f8cd 9010 	str.w	r9, [sp, #16]
 80083ae:	46da      	mov	sl, fp
 80083b0:	9308      	str	r3, [sp, #32]
 80083b2:	42b7      	cmp	r7, r6
 80083b4:	d33b      	bcc.n	800842e <__gethex+0x1ee>
 80083b6:	9804      	ldr	r0, [sp, #16]
 80083b8:	f840 ab04 	str.w	sl, [r0], #4
 80083bc:	eba0 0009 	sub.w	r0, r0, r9
 80083c0:	1080      	asrs	r0, r0, #2
 80083c2:	6128      	str	r0, [r5, #16]
 80083c4:	0147      	lsls	r7, r0, #5
 80083c6:	4650      	mov	r0, sl
 80083c8:	f000 fd18 	bl	8008dfc <__hi0bits>
 80083cc:	f8d8 6000 	ldr.w	r6, [r8]
 80083d0:	1a3f      	subs	r7, r7, r0
 80083d2:	42b7      	cmp	r7, r6
 80083d4:	dd64      	ble.n	80084a0 <__gethex+0x260>
 80083d6:	1bbf      	subs	r7, r7, r6
 80083d8:	4639      	mov	r1, r7
 80083da:	4628      	mov	r0, r5
 80083dc:	f001 f815 	bl	800940a <__any_on>
 80083e0:	4682      	mov	sl, r0
 80083e2:	b178      	cbz	r0, 8008404 <__gethex+0x1c4>
 80083e4:	1e7b      	subs	r3, r7, #1
 80083e6:	1159      	asrs	r1, r3, #5
 80083e8:	f003 021f 	and.w	r2, r3, #31
 80083ec:	f04f 0a01 	mov.w	sl, #1
 80083f0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80083f4:	fa0a f202 	lsl.w	r2, sl, r2
 80083f8:	420a      	tst	r2, r1
 80083fa:	d003      	beq.n	8008404 <__gethex+0x1c4>
 80083fc:	4553      	cmp	r3, sl
 80083fe:	dc46      	bgt.n	800848e <__gethex+0x24e>
 8008400:	f04f 0a02 	mov.w	sl, #2
 8008404:	4639      	mov	r1, r7
 8008406:	4628      	mov	r0, r5
 8008408:	f7ff fed0 	bl	80081ac <rshift>
 800840c:	443c      	add	r4, r7
 800840e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008412:	429c      	cmp	r4, r3
 8008414:	dd52      	ble.n	80084bc <__gethex+0x27c>
 8008416:	4629      	mov	r1, r5
 8008418:	9802      	ldr	r0, [sp, #8]
 800841a:	f000 fc5f 	bl	8008cdc <_Bfree>
 800841e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008420:	2300      	movs	r3, #0
 8008422:	6013      	str	r3, [r2, #0]
 8008424:	27a3      	movs	r7, #163	; 0xa3
 8008426:	e793      	b.n	8008350 <__gethex+0x110>
 8008428:	3101      	adds	r1, #1
 800842a:	105b      	asrs	r3, r3, #1
 800842c:	e7b0      	b.n	8008390 <__gethex+0x150>
 800842e:	1e73      	subs	r3, r6, #1
 8008430:	9305      	str	r3, [sp, #20]
 8008432:	9a07      	ldr	r2, [sp, #28]
 8008434:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008438:	4293      	cmp	r3, r2
 800843a:	d018      	beq.n	800846e <__gethex+0x22e>
 800843c:	f1bb 0f20 	cmp.w	fp, #32
 8008440:	d107      	bne.n	8008452 <__gethex+0x212>
 8008442:	9b04      	ldr	r3, [sp, #16]
 8008444:	f8c3 a000 	str.w	sl, [r3]
 8008448:	3304      	adds	r3, #4
 800844a:	f04f 0a00 	mov.w	sl, #0
 800844e:	9304      	str	r3, [sp, #16]
 8008450:	46d3      	mov	fp, sl
 8008452:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008456:	f7ff fede 	bl	8008216 <__hexdig_fun>
 800845a:	f000 000f 	and.w	r0, r0, #15
 800845e:	fa00 f00b 	lsl.w	r0, r0, fp
 8008462:	ea4a 0a00 	orr.w	sl, sl, r0
 8008466:	f10b 0b04 	add.w	fp, fp, #4
 800846a:	9b05      	ldr	r3, [sp, #20]
 800846c:	e00d      	b.n	800848a <__gethex+0x24a>
 800846e:	9b05      	ldr	r3, [sp, #20]
 8008470:	9a08      	ldr	r2, [sp, #32]
 8008472:	4413      	add	r3, r2
 8008474:	429f      	cmp	r7, r3
 8008476:	d8e1      	bhi.n	800843c <__gethex+0x1fc>
 8008478:	4618      	mov	r0, r3
 800847a:	9a01      	ldr	r2, [sp, #4]
 800847c:	9903      	ldr	r1, [sp, #12]
 800847e:	9309      	str	r3, [sp, #36]	; 0x24
 8008480:	f7fd f99e 	bl	80057c0 <strncmp>
 8008484:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008486:	2800      	cmp	r0, #0
 8008488:	d1d8      	bne.n	800843c <__gethex+0x1fc>
 800848a:	461e      	mov	r6, r3
 800848c:	e791      	b.n	80083b2 <__gethex+0x172>
 800848e:	1eb9      	subs	r1, r7, #2
 8008490:	4628      	mov	r0, r5
 8008492:	f000 ffba 	bl	800940a <__any_on>
 8008496:	2800      	cmp	r0, #0
 8008498:	d0b2      	beq.n	8008400 <__gethex+0x1c0>
 800849a:	f04f 0a03 	mov.w	sl, #3
 800849e:	e7b1      	b.n	8008404 <__gethex+0x1c4>
 80084a0:	da09      	bge.n	80084b6 <__gethex+0x276>
 80084a2:	1bf7      	subs	r7, r6, r7
 80084a4:	4629      	mov	r1, r5
 80084a6:	463a      	mov	r2, r7
 80084a8:	9802      	ldr	r0, [sp, #8]
 80084aa:	f000 fdd9 	bl	8009060 <__lshift>
 80084ae:	1be4      	subs	r4, r4, r7
 80084b0:	4605      	mov	r5, r0
 80084b2:	f100 0914 	add.w	r9, r0, #20
 80084b6:	f04f 0a00 	mov.w	sl, #0
 80084ba:	e7a8      	b.n	800840e <__gethex+0x1ce>
 80084bc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80084c0:	4284      	cmp	r4, r0
 80084c2:	da6a      	bge.n	800859a <__gethex+0x35a>
 80084c4:	1b04      	subs	r4, r0, r4
 80084c6:	42a6      	cmp	r6, r4
 80084c8:	dc2e      	bgt.n	8008528 <__gethex+0x2e8>
 80084ca:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80084ce:	2b02      	cmp	r3, #2
 80084d0:	d022      	beq.n	8008518 <__gethex+0x2d8>
 80084d2:	2b03      	cmp	r3, #3
 80084d4:	d024      	beq.n	8008520 <__gethex+0x2e0>
 80084d6:	2b01      	cmp	r3, #1
 80084d8:	d115      	bne.n	8008506 <__gethex+0x2c6>
 80084da:	42a6      	cmp	r6, r4
 80084dc:	d113      	bne.n	8008506 <__gethex+0x2c6>
 80084de:	2e01      	cmp	r6, #1
 80084e0:	dc0b      	bgt.n	80084fa <__gethex+0x2ba>
 80084e2:	9a06      	ldr	r2, [sp, #24]
 80084e4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80084e8:	6013      	str	r3, [r2, #0]
 80084ea:	2301      	movs	r3, #1
 80084ec:	612b      	str	r3, [r5, #16]
 80084ee:	f8c9 3000 	str.w	r3, [r9]
 80084f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80084f4:	2762      	movs	r7, #98	; 0x62
 80084f6:	601d      	str	r5, [r3, #0]
 80084f8:	e72a      	b.n	8008350 <__gethex+0x110>
 80084fa:	1e71      	subs	r1, r6, #1
 80084fc:	4628      	mov	r0, r5
 80084fe:	f000 ff84 	bl	800940a <__any_on>
 8008502:	2800      	cmp	r0, #0
 8008504:	d1ed      	bne.n	80084e2 <__gethex+0x2a2>
 8008506:	4629      	mov	r1, r5
 8008508:	9802      	ldr	r0, [sp, #8]
 800850a:	f000 fbe7 	bl	8008cdc <_Bfree>
 800850e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008510:	2300      	movs	r3, #0
 8008512:	6013      	str	r3, [r2, #0]
 8008514:	2750      	movs	r7, #80	; 0x50
 8008516:	e71b      	b.n	8008350 <__gethex+0x110>
 8008518:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800851a:	2b00      	cmp	r3, #0
 800851c:	d0e1      	beq.n	80084e2 <__gethex+0x2a2>
 800851e:	e7f2      	b.n	8008506 <__gethex+0x2c6>
 8008520:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008522:	2b00      	cmp	r3, #0
 8008524:	d1dd      	bne.n	80084e2 <__gethex+0x2a2>
 8008526:	e7ee      	b.n	8008506 <__gethex+0x2c6>
 8008528:	1e67      	subs	r7, r4, #1
 800852a:	f1ba 0f00 	cmp.w	sl, #0
 800852e:	d131      	bne.n	8008594 <__gethex+0x354>
 8008530:	b127      	cbz	r7, 800853c <__gethex+0x2fc>
 8008532:	4639      	mov	r1, r7
 8008534:	4628      	mov	r0, r5
 8008536:	f000 ff68 	bl	800940a <__any_on>
 800853a:	4682      	mov	sl, r0
 800853c:	117a      	asrs	r2, r7, #5
 800853e:	2301      	movs	r3, #1
 8008540:	f007 071f 	and.w	r7, r7, #31
 8008544:	fa03 f707 	lsl.w	r7, r3, r7
 8008548:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800854c:	4621      	mov	r1, r4
 800854e:	421f      	tst	r7, r3
 8008550:	4628      	mov	r0, r5
 8008552:	bf18      	it	ne
 8008554:	f04a 0a02 	orrne.w	sl, sl, #2
 8008558:	1b36      	subs	r6, r6, r4
 800855a:	f7ff fe27 	bl	80081ac <rshift>
 800855e:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8008562:	2702      	movs	r7, #2
 8008564:	f1ba 0f00 	cmp.w	sl, #0
 8008568:	d045      	beq.n	80085f6 <__gethex+0x3b6>
 800856a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800856e:	2b02      	cmp	r3, #2
 8008570:	d015      	beq.n	800859e <__gethex+0x35e>
 8008572:	2b03      	cmp	r3, #3
 8008574:	d017      	beq.n	80085a6 <__gethex+0x366>
 8008576:	2b01      	cmp	r3, #1
 8008578:	d109      	bne.n	800858e <__gethex+0x34e>
 800857a:	f01a 0f02 	tst.w	sl, #2
 800857e:	d006      	beq.n	800858e <__gethex+0x34e>
 8008580:	f8d9 3000 	ldr.w	r3, [r9]
 8008584:	ea4a 0a03 	orr.w	sl, sl, r3
 8008588:	f01a 0f01 	tst.w	sl, #1
 800858c:	d10e      	bne.n	80085ac <__gethex+0x36c>
 800858e:	f047 0710 	orr.w	r7, r7, #16
 8008592:	e030      	b.n	80085f6 <__gethex+0x3b6>
 8008594:	f04f 0a01 	mov.w	sl, #1
 8008598:	e7d0      	b.n	800853c <__gethex+0x2fc>
 800859a:	2701      	movs	r7, #1
 800859c:	e7e2      	b.n	8008564 <__gethex+0x324>
 800859e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80085a0:	f1c3 0301 	rsb	r3, r3, #1
 80085a4:	9315      	str	r3, [sp, #84]	; 0x54
 80085a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d0f0      	beq.n	800858e <__gethex+0x34e>
 80085ac:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80085b0:	f105 0314 	add.w	r3, r5, #20
 80085b4:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80085b8:	eb03 010a 	add.w	r1, r3, sl
 80085bc:	2000      	movs	r0, #0
 80085be:	681a      	ldr	r2, [r3, #0]
 80085c0:	f1b2 3fff 	cmp.w	r2, #4294967295
 80085c4:	d01c      	beq.n	8008600 <__gethex+0x3c0>
 80085c6:	3201      	adds	r2, #1
 80085c8:	601a      	str	r2, [r3, #0]
 80085ca:	2f02      	cmp	r7, #2
 80085cc:	f105 0314 	add.w	r3, r5, #20
 80085d0:	d138      	bne.n	8008644 <__gethex+0x404>
 80085d2:	f8d8 2000 	ldr.w	r2, [r8]
 80085d6:	3a01      	subs	r2, #1
 80085d8:	4296      	cmp	r6, r2
 80085da:	d10a      	bne.n	80085f2 <__gethex+0x3b2>
 80085dc:	1171      	asrs	r1, r6, #5
 80085de:	2201      	movs	r2, #1
 80085e0:	f006 061f 	and.w	r6, r6, #31
 80085e4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80085e8:	fa02 f606 	lsl.w	r6, r2, r6
 80085ec:	421e      	tst	r6, r3
 80085ee:	bf18      	it	ne
 80085f0:	4617      	movne	r7, r2
 80085f2:	f047 0720 	orr.w	r7, r7, #32
 80085f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80085f8:	601d      	str	r5, [r3, #0]
 80085fa:	9b06      	ldr	r3, [sp, #24]
 80085fc:	601c      	str	r4, [r3, #0]
 80085fe:	e6a7      	b.n	8008350 <__gethex+0x110>
 8008600:	f843 0b04 	str.w	r0, [r3], #4
 8008604:	4299      	cmp	r1, r3
 8008606:	d8da      	bhi.n	80085be <__gethex+0x37e>
 8008608:	68ab      	ldr	r3, [r5, #8]
 800860a:	4599      	cmp	r9, r3
 800860c:	db12      	blt.n	8008634 <__gethex+0x3f4>
 800860e:	6869      	ldr	r1, [r5, #4]
 8008610:	9802      	ldr	r0, [sp, #8]
 8008612:	3101      	adds	r1, #1
 8008614:	f000 fb2e 	bl	8008c74 <_Balloc>
 8008618:	692a      	ldr	r2, [r5, #16]
 800861a:	3202      	adds	r2, #2
 800861c:	f105 010c 	add.w	r1, r5, #12
 8008620:	4683      	mov	fp, r0
 8008622:	0092      	lsls	r2, r2, #2
 8008624:	300c      	adds	r0, #12
 8008626:	f7fd f875 	bl	8005714 <memcpy>
 800862a:	4629      	mov	r1, r5
 800862c:	9802      	ldr	r0, [sp, #8]
 800862e:	f000 fb55 	bl	8008cdc <_Bfree>
 8008632:	465d      	mov	r5, fp
 8008634:	692b      	ldr	r3, [r5, #16]
 8008636:	1c5a      	adds	r2, r3, #1
 8008638:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800863c:	612a      	str	r2, [r5, #16]
 800863e:	2201      	movs	r2, #1
 8008640:	615a      	str	r2, [r3, #20]
 8008642:	e7c2      	b.n	80085ca <__gethex+0x38a>
 8008644:	692a      	ldr	r2, [r5, #16]
 8008646:	4591      	cmp	r9, r2
 8008648:	da0b      	bge.n	8008662 <__gethex+0x422>
 800864a:	2101      	movs	r1, #1
 800864c:	4628      	mov	r0, r5
 800864e:	f7ff fdad 	bl	80081ac <rshift>
 8008652:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008656:	3401      	adds	r4, #1
 8008658:	429c      	cmp	r4, r3
 800865a:	f73f aedc 	bgt.w	8008416 <__gethex+0x1d6>
 800865e:	2701      	movs	r7, #1
 8008660:	e7c7      	b.n	80085f2 <__gethex+0x3b2>
 8008662:	f016 061f 	ands.w	r6, r6, #31
 8008666:	d0fa      	beq.n	800865e <__gethex+0x41e>
 8008668:	449a      	add	sl, r3
 800866a:	f1c6 0620 	rsb	r6, r6, #32
 800866e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8008672:	f000 fbc3 	bl	8008dfc <__hi0bits>
 8008676:	42b0      	cmp	r0, r6
 8008678:	dbe7      	blt.n	800864a <__gethex+0x40a>
 800867a:	e7f0      	b.n	800865e <__gethex+0x41e>

0800867c <L_shift>:
 800867c:	f1c2 0208 	rsb	r2, r2, #8
 8008680:	0092      	lsls	r2, r2, #2
 8008682:	b570      	push	{r4, r5, r6, lr}
 8008684:	f1c2 0620 	rsb	r6, r2, #32
 8008688:	6843      	ldr	r3, [r0, #4]
 800868a:	6804      	ldr	r4, [r0, #0]
 800868c:	fa03 f506 	lsl.w	r5, r3, r6
 8008690:	432c      	orrs	r4, r5
 8008692:	40d3      	lsrs	r3, r2
 8008694:	6004      	str	r4, [r0, #0]
 8008696:	f840 3f04 	str.w	r3, [r0, #4]!
 800869a:	4288      	cmp	r0, r1
 800869c:	d3f4      	bcc.n	8008688 <L_shift+0xc>
 800869e:	bd70      	pop	{r4, r5, r6, pc}

080086a0 <__match>:
 80086a0:	b530      	push	{r4, r5, lr}
 80086a2:	6803      	ldr	r3, [r0, #0]
 80086a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086a8:	3301      	adds	r3, #1
 80086aa:	b914      	cbnz	r4, 80086b2 <__match+0x12>
 80086ac:	6003      	str	r3, [r0, #0]
 80086ae:	2001      	movs	r0, #1
 80086b0:	bd30      	pop	{r4, r5, pc}
 80086b2:	781a      	ldrb	r2, [r3, #0]
 80086b4:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80086b8:	2d19      	cmp	r5, #25
 80086ba:	bf98      	it	ls
 80086bc:	3220      	addls	r2, #32
 80086be:	42a2      	cmp	r2, r4
 80086c0:	d0f0      	beq.n	80086a4 <__match+0x4>
 80086c2:	2000      	movs	r0, #0
 80086c4:	bd30      	pop	{r4, r5, pc}

080086c6 <__hexnan>:
 80086c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086ca:	680b      	ldr	r3, [r1, #0]
 80086cc:	6801      	ldr	r1, [r0, #0]
 80086ce:	115f      	asrs	r7, r3, #5
 80086d0:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80086d4:	f013 031f 	ands.w	r3, r3, #31
 80086d8:	b087      	sub	sp, #28
 80086da:	bf18      	it	ne
 80086dc:	3704      	addne	r7, #4
 80086de:	2500      	movs	r5, #0
 80086e0:	1f3e      	subs	r6, r7, #4
 80086e2:	4682      	mov	sl, r0
 80086e4:	4690      	mov	r8, r2
 80086e6:	9302      	str	r3, [sp, #8]
 80086e8:	f847 5c04 	str.w	r5, [r7, #-4]
 80086ec:	46b1      	mov	r9, r6
 80086ee:	4634      	mov	r4, r6
 80086f0:	9501      	str	r5, [sp, #4]
 80086f2:	46ab      	mov	fp, r5
 80086f4:	784a      	ldrb	r2, [r1, #1]
 80086f6:	1c4b      	adds	r3, r1, #1
 80086f8:	9303      	str	r3, [sp, #12]
 80086fa:	b342      	cbz	r2, 800874e <__hexnan+0x88>
 80086fc:	4610      	mov	r0, r2
 80086fe:	9105      	str	r1, [sp, #20]
 8008700:	9204      	str	r2, [sp, #16]
 8008702:	f7ff fd88 	bl	8008216 <__hexdig_fun>
 8008706:	2800      	cmp	r0, #0
 8008708:	d143      	bne.n	8008792 <__hexnan+0xcc>
 800870a:	9a04      	ldr	r2, [sp, #16]
 800870c:	9905      	ldr	r1, [sp, #20]
 800870e:	2a20      	cmp	r2, #32
 8008710:	d818      	bhi.n	8008744 <__hexnan+0x7e>
 8008712:	9b01      	ldr	r3, [sp, #4]
 8008714:	459b      	cmp	fp, r3
 8008716:	dd13      	ble.n	8008740 <__hexnan+0x7a>
 8008718:	454c      	cmp	r4, r9
 800871a:	d206      	bcs.n	800872a <__hexnan+0x64>
 800871c:	2d07      	cmp	r5, #7
 800871e:	dc04      	bgt.n	800872a <__hexnan+0x64>
 8008720:	462a      	mov	r2, r5
 8008722:	4649      	mov	r1, r9
 8008724:	4620      	mov	r0, r4
 8008726:	f7ff ffa9 	bl	800867c <L_shift>
 800872a:	4544      	cmp	r4, r8
 800872c:	d944      	bls.n	80087b8 <__hexnan+0xf2>
 800872e:	2300      	movs	r3, #0
 8008730:	f1a4 0904 	sub.w	r9, r4, #4
 8008734:	f844 3c04 	str.w	r3, [r4, #-4]
 8008738:	f8cd b004 	str.w	fp, [sp, #4]
 800873c:	464c      	mov	r4, r9
 800873e:	461d      	mov	r5, r3
 8008740:	9903      	ldr	r1, [sp, #12]
 8008742:	e7d7      	b.n	80086f4 <__hexnan+0x2e>
 8008744:	2a29      	cmp	r2, #41	; 0x29
 8008746:	d14a      	bne.n	80087de <__hexnan+0x118>
 8008748:	3102      	adds	r1, #2
 800874a:	f8ca 1000 	str.w	r1, [sl]
 800874e:	f1bb 0f00 	cmp.w	fp, #0
 8008752:	d044      	beq.n	80087de <__hexnan+0x118>
 8008754:	454c      	cmp	r4, r9
 8008756:	d206      	bcs.n	8008766 <__hexnan+0xa0>
 8008758:	2d07      	cmp	r5, #7
 800875a:	dc04      	bgt.n	8008766 <__hexnan+0xa0>
 800875c:	462a      	mov	r2, r5
 800875e:	4649      	mov	r1, r9
 8008760:	4620      	mov	r0, r4
 8008762:	f7ff ff8b 	bl	800867c <L_shift>
 8008766:	4544      	cmp	r4, r8
 8008768:	d928      	bls.n	80087bc <__hexnan+0xf6>
 800876a:	4643      	mov	r3, r8
 800876c:	f854 2b04 	ldr.w	r2, [r4], #4
 8008770:	f843 2b04 	str.w	r2, [r3], #4
 8008774:	42a6      	cmp	r6, r4
 8008776:	d2f9      	bcs.n	800876c <__hexnan+0xa6>
 8008778:	2200      	movs	r2, #0
 800877a:	f843 2b04 	str.w	r2, [r3], #4
 800877e:	429e      	cmp	r6, r3
 8008780:	d2fb      	bcs.n	800877a <__hexnan+0xb4>
 8008782:	6833      	ldr	r3, [r6, #0]
 8008784:	b91b      	cbnz	r3, 800878e <__hexnan+0xc8>
 8008786:	4546      	cmp	r6, r8
 8008788:	d127      	bne.n	80087da <__hexnan+0x114>
 800878a:	2301      	movs	r3, #1
 800878c:	6033      	str	r3, [r6, #0]
 800878e:	2005      	movs	r0, #5
 8008790:	e026      	b.n	80087e0 <__hexnan+0x11a>
 8008792:	3501      	adds	r5, #1
 8008794:	2d08      	cmp	r5, #8
 8008796:	f10b 0b01 	add.w	fp, fp, #1
 800879a:	dd06      	ble.n	80087aa <__hexnan+0xe4>
 800879c:	4544      	cmp	r4, r8
 800879e:	d9cf      	bls.n	8008740 <__hexnan+0x7a>
 80087a0:	2300      	movs	r3, #0
 80087a2:	f844 3c04 	str.w	r3, [r4, #-4]
 80087a6:	2501      	movs	r5, #1
 80087a8:	3c04      	subs	r4, #4
 80087aa:	6822      	ldr	r2, [r4, #0]
 80087ac:	f000 000f 	and.w	r0, r0, #15
 80087b0:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80087b4:	6020      	str	r0, [r4, #0]
 80087b6:	e7c3      	b.n	8008740 <__hexnan+0x7a>
 80087b8:	2508      	movs	r5, #8
 80087ba:	e7c1      	b.n	8008740 <__hexnan+0x7a>
 80087bc:	9b02      	ldr	r3, [sp, #8]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d0df      	beq.n	8008782 <__hexnan+0xbc>
 80087c2:	f04f 32ff 	mov.w	r2, #4294967295
 80087c6:	f1c3 0320 	rsb	r3, r3, #32
 80087ca:	fa22 f303 	lsr.w	r3, r2, r3
 80087ce:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80087d2:	401a      	ands	r2, r3
 80087d4:	f847 2c04 	str.w	r2, [r7, #-4]
 80087d8:	e7d3      	b.n	8008782 <__hexnan+0xbc>
 80087da:	3e04      	subs	r6, #4
 80087dc:	e7d1      	b.n	8008782 <__hexnan+0xbc>
 80087de:	2004      	movs	r0, #4
 80087e0:	b007      	add	sp, #28
 80087e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080087e6 <__locale_ctype_ptr_l>:
 80087e6:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80087ea:	4770      	bx	lr

080087ec <__localeconv_l>:
 80087ec:	30f0      	adds	r0, #240	; 0xf0
 80087ee:	4770      	bx	lr

080087f0 <_localeconv_r>:
 80087f0:	4b04      	ldr	r3, [pc, #16]	; (8008804 <_localeconv_r+0x14>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	6a18      	ldr	r0, [r3, #32]
 80087f6:	4b04      	ldr	r3, [pc, #16]	; (8008808 <_localeconv_r+0x18>)
 80087f8:	2800      	cmp	r0, #0
 80087fa:	bf08      	it	eq
 80087fc:	4618      	moveq	r0, r3
 80087fe:	30f0      	adds	r0, #240	; 0xf0
 8008800:	4770      	bx	lr
 8008802:	bf00      	nop
 8008804:	20000010 	.word	0x20000010
 8008808:	20000104 	.word	0x20000104

0800880c <malloc>:
 800880c:	4b02      	ldr	r3, [pc, #8]	; (8008818 <malloc+0xc>)
 800880e:	4601      	mov	r1, r0
 8008810:	6818      	ldr	r0, [r3, #0]
 8008812:	f000 b803 	b.w	800881c <_malloc_r>
 8008816:	bf00      	nop
 8008818:	20000010 	.word	0x20000010

0800881c <_malloc_r>:
 800881c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008820:	f101 040b 	add.w	r4, r1, #11
 8008824:	2c16      	cmp	r4, #22
 8008826:	4681      	mov	r9, r0
 8008828:	d907      	bls.n	800883a <_malloc_r+0x1e>
 800882a:	f034 0407 	bics.w	r4, r4, #7
 800882e:	d505      	bpl.n	800883c <_malloc_r+0x20>
 8008830:	230c      	movs	r3, #12
 8008832:	f8c9 3000 	str.w	r3, [r9]
 8008836:	2600      	movs	r6, #0
 8008838:	e131      	b.n	8008a9e <_malloc_r+0x282>
 800883a:	2410      	movs	r4, #16
 800883c:	428c      	cmp	r4, r1
 800883e:	d3f7      	bcc.n	8008830 <_malloc_r+0x14>
 8008840:	4648      	mov	r0, r9
 8008842:	f000 fa0b 	bl	8008c5c <__malloc_lock>
 8008846:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 800884a:	4d9c      	ldr	r5, [pc, #624]	; (8008abc <_malloc_r+0x2a0>)
 800884c:	d236      	bcs.n	80088bc <_malloc_r+0xa0>
 800884e:	f104 0208 	add.w	r2, r4, #8
 8008852:	442a      	add	r2, r5
 8008854:	f1a2 0108 	sub.w	r1, r2, #8
 8008858:	6856      	ldr	r6, [r2, #4]
 800885a:	428e      	cmp	r6, r1
 800885c:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8008860:	d102      	bne.n	8008868 <_malloc_r+0x4c>
 8008862:	68d6      	ldr	r6, [r2, #12]
 8008864:	42b2      	cmp	r2, r6
 8008866:	d010      	beq.n	800888a <_malloc_r+0x6e>
 8008868:	6873      	ldr	r3, [r6, #4]
 800886a:	68f2      	ldr	r2, [r6, #12]
 800886c:	68b1      	ldr	r1, [r6, #8]
 800886e:	f023 0303 	bic.w	r3, r3, #3
 8008872:	60ca      	str	r2, [r1, #12]
 8008874:	4433      	add	r3, r6
 8008876:	6091      	str	r1, [r2, #8]
 8008878:	685a      	ldr	r2, [r3, #4]
 800887a:	f042 0201 	orr.w	r2, r2, #1
 800887e:	605a      	str	r2, [r3, #4]
 8008880:	4648      	mov	r0, r9
 8008882:	f000 f9f1 	bl	8008c68 <__malloc_unlock>
 8008886:	3608      	adds	r6, #8
 8008888:	e109      	b.n	8008a9e <_malloc_r+0x282>
 800888a:	3302      	adds	r3, #2
 800888c:	4a8c      	ldr	r2, [pc, #560]	; (8008ac0 <_malloc_r+0x2a4>)
 800888e:	692e      	ldr	r6, [r5, #16]
 8008890:	4296      	cmp	r6, r2
 8008892:	4611      	mov	r1, r2
 8008894:	d06d      	beq.n	8008972 <_malloc_r+0x156>
 8008896:	6870      	ldr	r0, [r6, #4]
 8008898:	f020 0003 	bic.w	r0, r0, #3
 800889c:	1b07      	subs	r7, r0, r4
 800889e:	2f0f      	cmp	r7, #15
 80088a0:	dd47      	ble.n	8008932 <_malloc_r+0x116>
 80088a2:	1933      	adds	r3, r6, r4
 80088a4:	f044 0401 	orr.w	r4, r4, #1
 80088a8:	6074      	str	r4, [r6, #4]
 80088aa:	616b      	str	r3, [r5, #20]
 80088ac:	612b      	str	r3, [r5, #16]
 80088ae:	60da      	str	r2, [r3, #12]
 80088b0:	609a      	str	r2, [r3, #8]
 80088b2:	f047 0201 	orr.w	r2, r7, #1
 80088b6:	605a      	str	r2, [r3, #4]
 80088b8:	5037      	str	r7, [r6, r0]
 80088ba:	e7e1      	b.n	8008880 <_malloc_r+0x64>
 80088bc:	0a63      	lsrs	r3, r4, #9
 80088be:	d02a      	beq.n	8008916 <_malloc_r+0xfa>
 80088c0:	2b04      	cmp	r3, #4
 80088c2:	d812      	bhi.n	80088ea <_malloc_r+0xce>
 80088c4:	09a3      	lsrs	r3, r4, #6
 80088c6:	3338      	adds	r3, #56	; 0x38
 80088c8:	1c5a      	adds	r2, r3, #1
 80088ca:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80088ce:	f1a2 0008 	sub.w	r0, r2, #8
 80088d2:	6856      	ldr	r6, [r2, #4]
 80088d4:	4286      	cmp	r6, r0
 80088d6:	d006      	beq.n	80088e6 <_malloc_r+0xca>
 80088d8:	6872      	ldr	r2, [r6, #4]
 80088da:	f022 0203 	bic.w	r2, r2, #3
 80088de:	1b11      	subs	r1, r2, r4
 80088e0:	290f      	cmp	r1, #15
 80088e2:	dd1c      	ble.n	800891e <_malloc_r+0x102>
 80088e4:	3b01      	subs	r3, #1
 80088e6:	3301      	adds	r3, #1
 80088e8:	e7d0      	b.n	800888c <_malloc_r+0x70>
 80088ea:	2b14      	cmp	r3, #20
 80088ec:	d801      	bhi.n	80088f2 <_malloc_r+0xd6>
 80088ee:	335b      	adds	r3, #91	; 0x5b
 80088f0:	e7ea      	b.n	80088c8 <_malloc_r+0xac>
 80088f2:	2b54      	cmp	r3, #84	; 0x54
 80088f4:	d802      	bhi.n	80088fc <_malloc_r+0xe0>
 80088f6:	0b23      	lsrs	r3, r4, #12
 80088f8:	336e      	adds	r3, #110	; 0x6e
 80088fa:	e7e5      	b.n	80088c8 <_malloc_r+0xac>
 80088fc:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8008900:	d802      	bhi.n	8008908 <_malloc_r+0xec>
 8008902:	0be3      	lsrs	r3, r4, #15
 8008904:	3377      	adds	r3, #119	; 0x77
 8008906:	e7df      	b.n	80088c8 <_malloc_r+0xac>
 8008908:	f240 5254 	movw	r2, #1364	; 0x554
 800890c:	4293      	cmp	r3, r2
 800890e:	d804      	bhi.n	800891a <_malloc_r+0xfe>
 8008910:	0ca3      	lsrs	r3, r4, #18
 8008912:	337c      	adds	r3, #124	; 0x7c
 8008914:	e7d8      	b.n	80088c8 <_malloc_r+0xac>
 8008916:	233f      	movs	r3, #63	; 0x3f
 8008918:	e7d6      	b.n	80088c8 <_malloc_r+0xac>
 800891a:	237e      	movs	r3, #126	; 0x7e
 800891c:	e7d4      	b.n	80088c8 <_malloc_r+0xac>
 800891e:	2900      	cmp	r1, #0
 8008920:	68f1      	ldr	r1, [r6, #12]
 8008922:	db04      	blt.n	800892e <_malloc_r+0x112>
 8008924:	68b3      	ldr	r3, [r6, #8]
 8008926:	60d9      	str	r1, [r3, #12]
 8008928:	608b      	str	r3, [r1, #8]
 800892a:	18b3      	adds	r3, r6, r2
 800892c:	e7a4      	b.n	8008878 <_malloc_r+0x5c>
 800892e:	460e      	mov	r6, r1
 8008930:	e7d0      	b.n	80088d4 <_malloc_r+0xb8>
 8008932:	2f00      	cmp	r7, #0
 8008934:	616a      	str	r2, [r5, #20]
 8008936:	612a      	str	r2, [r5, #16]
 8008938:	db05      	blt.n	8008946 <_malloc_r+0x12a>
 800893a:	4430      	add	r0, r6
 800893c:	6843      	ldr	r3, [r0, #4]
 800893e:	f043 0301 	orr.w	r3, r3, #1
 8008942:	6043      	str	r3, [r0, #4]
 8008944:	e79c      	b.n	8008880 <_malloc_r+0x64>
 8008946:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800894a:	d244      	bcs.n	80089d6 <_malloc_r+0x1ba>
 800894c:	08c0      	lsrs	r0, r0, #3
 800894e:	1087      	asrs	r7, r0, #2
 8008950:	2201      	movs	r2, #1
 8008952:	fa02 f707 	lsl.w	r7, r2, r7
 8008956:	686a      	ldr	r2, [r5, #4]
 8008958:	3001      	adds	r0, #1
 800895a:	433a      	orrs	r2, r7
 800895c:	606a      	str	r2, [r5, #4]
 800895e:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8008962:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 8008966:	60b7      	str	r7, [r6, #8]
 8008968:	3a08      	subs	r2, #8
 800896a:	60f2      	str	r2, [r6, #12]
 800896c:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 8008970:	60fe      	str	r6, [r7, #12]
 8008972:	2001      	movs	r0, #1
 8008974:	109a      	asrs	r2, r3, #2
 8008976:	fa00 f202 	lsl.w	r2, r0, r2
 800897a:	6868      	ldr	r0, [r5, #4]
 800897c:	4282      	cmp	r2, r0
 800897e:	f200 80a1 	bhi.w	8008ac4 <_malloc_r+0x2a8>
 8008982:	4202      	tst	r2, r0
 8008984:	d106      	bne.n	8008994 <_malloc_r+0x178>
 8008986:	f023 0303 	bic.w	r3, r3, #3
 800898a:	0052      	lsls	r2, r2, #1
 800898c:	4202      	tst	r2, r0
 800898e:	f103 0304 	add.w	r3, r3, #4
 8008992:	d0fa      	beq.n	800898a <_malloc_r+0x16e>
 8008994:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 8008998:	46e0      	mov	r8, ip
 800899a:	469e      	mov	lr, r3
 800899c:	f8d8 600c 	ldr.w	r6, [r8, #12]
 80089a0:	4546      	cmp	r6, r8
 80089a2:	d153      	bne.n	8008a4c <_malloc_r+0x230>
 80089a4:	f10e 0e01 	add.w	lr, lr, #1
 80089a8:	f01e 0f03 	tst.w	lr, #3
 80089ac:	f108 0808 	add.w	r8, r8, #8
 80089b0:	d1f4      	bne.n	800899c <_malloc_r+0x180>
 80089b2:	0798      	lsls	r0, r3, #30
 80089b4:	d179      	bne.n	8008aaa <_malloc_r+0x28e>
 80089b6:	686b      	ldr	r3, [r5, #4]
 80089b8:	ea23 0302 	bic.w	r3, r3, r2
 80089bc:	606b      	str	r3, [r5, #4]
 80089be:	6868      	ldr	r0, [r5, #4]
 80089c0:	0052      	lsls	r2, r2, #1
 80089c2:	4282      	cmp	r2, r0
 80089c4:	d87e      	bhi.n	8008ac4 <_malloc_r+0x2a8>
 80089c6:	2a00      	cmp	r2, #0
 80089c8:	d07c      	beq.n	8008ac4 <_malloc_r+0x2a8>
 80089ca:	4673      	mov	r3, lr
 80089cc:	4202      	tst	r2, r0
 80089ce:	d1e1      	bne.n	8008994 <_malloc_r+0x178>
 80089d0:	3304      	adds	r3, #4
 80089d2:	0052      	lsls	r2, r2, #1
 80089d4:	e7fa      	b.n	80089cc <_malloc_r+0x1b0>
 80089d6:	0a42      	lsrs	r2, r0, #9
 80089d8:	2a04      	cmp	r2, #4
 80089da:	d815      	bhi.n	8008a08 <_malloc_r+0x1ec>
 80089dc:	0982      	lsrs	r2, r0, #6
 80089de:	3238      	adds	r2, #56	; 0x38
 80089e0:	1c57      	adds	r7, r2, #1
 80089e2:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 80089e6:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 80089ea:	45be      	cmp	lr, r7
 80089ec:	d126      	bne.n	8008a3c <_malloc_r+0x220>
 80089ee:	2001      	movs	r0, #1
 80089f0:	1092      	asrs	r2, r2, #2
 80089f2:	fa00 f202 	lsl.w	r2, r0, r2
 80089f6:	6868      	ldr	r0, [r5, #4]
 80089f8:	4310      	orrs	r0, r2
 80089fa:	6068      	str	r0, [r5, #4]
 80089fc:	f8c6 e00c 	str.w	lr, [r6, #12]
 8008a00:	60b7      	str	r7, [r6, #8]
 8008a02:	f8ce 6008 	str.w	r6, [lr, #8]
 8008a06:	e7b3      	b.n	8008970 <_malloc_r+0x154>
 8008a08:	2a14      	cmp	r2, #20
 8008a0a:	d801      	bhi.n	8008a10 <_malloc_r+0x1f4>
 8008a0c:	325b      	adds	r2, #91	; 0x5b
 8008a0e:	e7e7      	b.n	80089e0 <_malloc_r+0x1c4>
 8008a10:	2a54      	cmp	r2, #84	; 0x54
 8008a12:	d802      	bhi.n	8008a1a <_malloc_r+0x1fe>
 8008a14:	0b02      	lsrs	r2, r0, #12
 8008a16:	326e      	adds	r2, #110	; 0x6e
 8008a18:	e7e2      	b.n	80089e0 <_malloc_r+0x1c4>
 8008a1a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8008a1e:	d802      	bhi.n	8008a26 <_malloc_r+0x20a>
 8008a20:	0bc2      	lsrs	r2, r0, #15
 8008a22:	3277      	adds	r2, #119	; 0x77
 8008a24:	e7dc      	b.n	80089e0 <_malloc_r+0x1c4>
 8008a26:	f240 5754 	movw	r7, #1364	; 0x554
 8008a2a:	42ba      	cmp	r2, r7
 8008a2c:	bf9a      	itte	ls
 8008a2e:	0c82      	lsrls	r2, r0, #18
 8008a30:	327c      	addls	r2, #124	; 0x7c
 8008a32:	227e      	movhi	r2, #126	; 0x7e
 8008a34:	e7d4      	b.n	80089e0 <_malloc_r+0x1c4>
 8008a36:	68bf      	ldr	r7, [r7, #8]
 8008a38:	45be      	cmp	lr, r7
 8008a3a:	d004      	beq.n	8008a46 <_malloc_r+0x22a>
 8008a3c:	687a      	ldr	r2, [r7, #4]
 8008a3e:	f022 0203 	bic.w	r2, r2, #3
 8008a42:	4290      	cmp	r0, r2
 8008a44:	d3f7      	bcc.n	8008a36 <_malloc_r+0x21a>
 8008a46:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 8008a4a:	e7d7      	b.n	80089fc <_malloc_r+0x1e0>
 8008a4c:	6870      	ldr	r0, [r6, #4]
 8008a4e:	68f7      	ldr	r7, [r6, #12]
 8008a50:	f020 0003 	bic.w	r0, r0, #3
 8008a54:	eba0 0a04 	sub.w	sl, r0, r4
 8008a58:	f1ba 0f0f 	cmp.w	sl, #15
 8008a5c:	dd10      	ble.n	8008a80 <_malloc_r+0x264>
 8008a5e:	68b2      	ldr	r2, [r6, #8]
 8008a60:	1933      	adds	r3, r6, r4
 8008a62:	f044 0401 	orr.w	r4, r4, #1
 8008a66:	6074      	str	r4, [r6, #4]
 8008a68:	60d7      	str	r7, [r2, #12]
 8008a6a:	60ba      	str	r2, [r7, #8]
 8008a6c:	f04a 0201 	orr.w	r2, sl, #1
 8008a70:	616b      	str	r3, [r5, #20]
 8008a72:	612b      	str	r3, [r5, #16]
 8008a74:	60d9      	str	r1, [r3, #12]
 8008a76:	6099      	str	r1, [r3, #8]
 8008a78:	605a      	str	r2, [r3, #4]
 8008a7a:	f846 a000 	str.w	sl, [r6, r0]
 8008a7e:	e6ff      	b.n	8008880 <_malloc_r+0x64>
 8008a80:	f1ba 0f00 	cmp.w	sl, #0
 8008a84:	db0f      	blt.n	8008aa6 <_malloc_r+0x28a>
 8008a86:	4430      	add	r0, r6
 8008a88:	6843      	ldr	r3, [r0, #4]
 8008a8a:	f043 0301 	orr.w	r3, r3, #1
 8008a8e:	6043      	str	r3, [r0, #4]
 8008a90:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8008a94:	4648      	mov	r0, r9
 8008a96:	60df      	str	r7, [r3, #12]
 8008a98:	60bb      	str	r3, [r7, #8]
 8008a9a:	f000 f8e5 	bl	8008c68 <__malloc_unlock>
 8008a9e:	4630      	mov	r0, r6
 8008aa0:	b003      	add	sp, #12
 8008aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aa6:	463e      	mov	r6, r7
 8008aa8:	e77a      	b.n	80089a0 <_malloc_r+0x184>
 8008aaa:	f85c 0908 	ldr.w	r0, [ip], #-8
 8008aae:	4584      	cmp	ip, r0
 8008ab0:	f103 33ff 	add.w	r3, r3, #4294967295
 8008ab4:	f43f af7d 	beq.w	80089b2 <_malloc_r+0x196>
 8008ab8:	e781      	b.n	80089be <_malloc_r+0x1a2>
 8008aba:	bf00      	nop
 8008abc:	20000270 	.word	0x20000270
 8008ac0:	20000278 	.word	0x20000278
 8008ac4:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8008ac8:	f8db 6004 	ldr.w	r6, [fp, #4]
 8008acc:	f026 0603 	bic.w	r6, r6, #3
 8008ad0:	42b4      	cmp	r4, r6
 8008ad2:	d803      	bhi.n	8008adc <_malloc_r+0x2c0>
 8008ad4:	1b33      	subs	r3, r6, r4
 8008ad6:	2b0f      	cmp	r3, #15
 8008ad8:	f300 8096 	bgt.w	8008c08 <_malloc_r+0x3ec>
 8008adc:	4a4f      	ldr	r2, [pc, #316]	; (8008c1c <_malloc_r+0x400>)
 8008ade:	6817      	ldr	r7, [r2, #0]
 8008ae0:	4a4f      	ldr	r2, [pc, #316]	; (8008c20 <_malloc_r+0x404>)
 8008ae2:	6811      	ldr	r1, [r2, #0]
 8008ae4:	3710      	adds	r7, #16
 8008ae6:	3101      	adds	r1, #1
 8008ae8:	eb0b 0306 	add.w	r3, fp, r6
 8008aec:	4427      	add	r7, r4
 8008aee:	d005      	beq.n	8008afc <_malloc_r+0x2e0>
 8008af0:	494c      	ldr	r1, [pc, #304]	; (8008c24 <_malloc_r+0x408>)
 8008af2:	3901      	subs	r1, #1
 8008af4:	440f      	add	r7, r1
 8008af6:	3101      	adds	r1, #1
 8008af8:	4249      	negs	r1, r1
 8008afa:	400f      	ands	r7, r1
 8008afc:	4639      	mov	r1, r7
 8008afe:	4648      	mov	r0, r9
 8008b00:	9201      	str	r2, [sp, #4]
 8008b02:	9300      	str	r3, [sp, #0]
 8008b04:	f000 fca2 	bl	800944c <_sbrk_r>
 8008b08:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008b0c:	4680      	mov	r8, r0
 8008b0e:	d056      	beq.n	8008bbe <_malloc_r+0x3a2>
 8008b10:	9b00      	ldr	r3, [sp, #0]
 8008b12:	9a01      	ldr	r2, [sp, #4]
 8008b14:	4283      	cmp	r3, r0
 8008b16:	d901      	bls.n	8008b1c <_malloc_r+0x300>
 8008b18:	45ab      	cmp	fp, r5
 8008b1a:	d150      	bne.n	8008bbe <_malloc_r+0x3a2>
 8008b1c:	4842      	ldr	r0, [pc, #264]	; (8008c28 <_malloc_r+0x40c>)
 8008b1e:	6801      	ldr	r1, [r0, #0]
 8008b20:	4543      	cmp	r3, r8
 8008b22:	eb07 0e01 	add.w	lr, r7, r1
 8008b26:	f8c0 e000 	str.w	lr, [r0]
 8008b2a:	4940      	ldr	r1, [pc, #256]	; (8008c2c <_malloc_r+0x410>)
 8008b2c:	4682      	mov	sl, r0
 8008b2e:	d113      	bne.n	8008b58 <_malloc_r+0x33c>
 8008b30:	420b      	tst	r3, r1
 8008b32:	d111      	bne.n	8008b58 <_malloc_r+0x33c>
 8008b34:	68ab      	ldr	r3, [r5, #8]
 8008b36:	443e      	add	r6, r7
 8008b38:	f046 0601 	orr.w	r6, r6, #1
 8008b3c:	605e      	str	r6, [r3, #4]
 8008b3e:	4a3c      	ldr	r2, [pc, #240]	; (8008c30 <_malloc_r+0x414>)
 8008b40:	f8da 3000 	ldr.w	r3, [sl]
 8008b44:	6811      	ldr	r1, [r2, #0]
 8008b46:	428b      	cmp	r3, r1
 8008b48:	bf88      	it	hi
 8008b4a:	6013      	strhi	r3, [r2, #0]
 8008b4c:	4a39      	ldr	r2, [pc, #228]	; (8008c34 <_malloc_r+0x418>)
 8008b4e:	6811      	ldr	r1, [r2, #0]
 8008b50:	428b      	cmp	r3, r1
 8008b52:	bf88      	it	hi
 8008b54:	6013      	strhi	r3, [r2, #0]
 8008b56:	e032      	b.n	8008bbe <_malloc_r+0x3a2>
 8008b58:	6810      	ldr	r0, [r2, #0]
 8008b5a:	3001      	adds	r0, #1
 8008b5c:	bf1b      	ittet	ne
 8008b5e:	eba8 0303 	subne.w	r3, r8, r3
 8008b62:	4473      	addne	r3, lr
 8008b64:	f8c2 8000 	streq.w	r8, [r2]
 8008b68:	f8ca 3000 	strne.w	r3, [sl]
 8008b6c:	f018 0007 	ands.w	r0, r8, #7
 8008b70:	bf1c      	itt	ne
 8008b72:	f1c0 0008 	rsbne	r0, r0, #8
 8008b76:	4480      	addne	r8, r0
 8008b78:	4b2a      	ldr	r3, [pc, #168]	; (8008c24 <_malloc_r+0x408>)
 8008b7a:	4447      	add	r7, r8
 8008b7c:	4418      	add	r0, r3
 8008b7e:	400f      	ands	r7, r1
 8008b80:	1bc7      	subs	r7, r0, r7
 8008b82:	4639      	mov	r1, r7
 8008b84:	4648      	mov	r0, r9
 8008b86:	f000 fc61 	bl	800944c <_sbrk_r>
 8008b8a:	1c43      	adds	r3, r0, #1
 8008b8c:	bf08      	it	eq
 8008b8e:	4640      	moveq	r0, r8
 8008b90:	f8da 3000 	ldr.w	r3, [sl]
 8008b94:	f8c5 8008 	str.w	r8, [r5, #8]
 8008b98:	bf08      	it	eq
 8008b9a:	2700      	moveq	r7, #0
 8008b9c:	eba0 0008 	sub.w	r0, r0, r8
 8008ba0:	443b      	add	r3, r7
 8008ba2:	4407      	add	r7, r0
 8008ba4:	f047 0701 	orr.w	r7, r7, #1
 8008ba8:	45ab      	cmp	fp, r5
 8008baa:	f8ca 3000 	str.w	r3, [sl]
 8008bae:	f8c8 7004 	str.w	r7, [r8, #4]
 8008bb2:	d0c4      	beq.n	8008b3e <_malloc_r+0x322>
 8008bb4:	2e0f      	cmp	r6, #15
 8008bb6:	d810      	bhi.n	8008bda <_malloc_r+0x3be>
 8008bb8:	2301      	movs	r3, #1
 8008bba:	f8c8 3004 	str.w	r3, [r8, #4]
 8008bbe:	68ab      	ldr	r3, [r5, #8]
 8008bc0:	685a      	ldr	r2, [r3, #4]
 8008bc2:	f022 0203 	bic.w	r2, r2, #3
 8008bc6:	4294      	cmp	r4, r2
 8008bc8:	eba2 0304 	sub.w	r3, r2, r4
 8008bcc:	d801      	bhi.n	8008bd2 <_malloc_r+0x3b6>
 8008bce:	2b0f      	cmp	r3, #15
 8008bd0:	dc1a      	bgt.n	8008c08 <_malloc_r+0x3ec>
 8008bd2:	4648      	mov	r0, r9
 8008bd4:	f000 f848 	bl	8008c68 <__malloc_unlock>
 8008bd8:	e62d      	b.n	8008836 <_malloc_r+0x1a>
 8008bda:	f8db 3004 	ldr.w	r3, [fp, #4]
 8008bde:	3e0c      	subs	r6, #12
 8008be0:	f026 0607 	bic.w	r6, r6, #7
 8008be4:	f003 0301 	and.w	r3, r3, #1
 8008be8:	4333      	orrs	r3, r6
 8008bea:	f8cb 3004 	str.w	r3, [fp, #4]
 8008bee:	eb0b 0306 	add.w	r3, fp, r6
 8008bf2:	2205      	movs	r2, #5
 8008bf4:	2e0f      	cmp	r6, #15
 8008bf6:	605a      	str	r2, [r3, #4]
 8008bf8:	609a      	str	r2, [r3, #8]
 8008bfa:	d9a0      	bls.n	8008b3e <_malloc_r+0x322>
 8008bfc:	f10b 0108 	add.w	r1, fp, #8
 8008c00:	4648      	mov	r0, r9
 8008c02:	f000 fd3d 	bl	8009680 <_free_r>
 8008c06:	e79a      	b.n	8008b3e <_malloc_r+0x322>
 8008c08:	68ae      	ldr	r6, [r5, #8]
 8008c0a:	f044 0201 	orr.w	r2, r4, #1
 8008c0e:	4434      	add	r4, r6
 8008c10:	f043 0301 	orr.w	r3, r3, #1
 8008c14:	6072      	str	r2, [r6, #4]
 8008c16:	60ac      	str	r4, [r5, #8]
 8008c18:	6063      	str	r3, [r4, #4]
 8008c1a:	e631      	b.n	8008880 <_malloc_r+0x64>
 8008c1c:	20000808 	.word	0x20000808
 8008c20:	20000678 	.word	0x20000678
 8008c24:	00000080 	.word	0x00000080
 8008c28:	200007d8 	.word	0x200007d8
 8008c2c:	0000007f 	.word	0x0000007f
 8008c30:	20000800 	.word	0x20000800
 8008c34:	20000804 	.word	0x20000804

08008c38 <__ascii_mbtowc>:
 8008c38:	b082      	sub	sp, #8
 8008c3a:	b901      	cbnz	r1, 8008c3e <__ascii_mbtowc+0x6>
 8008c3c:	a901      	add	r1, sp, #4
 8008c3e:	b142      	cbz	r2, 8008c52 <__ascii_mbtowc+0x1a>
 8008c40:	b14b      	cbz	r3, 8008c56 <__ascii_mbtowc+0x1e>
 8008c42:	7813      	ldrb	r3, [r2, #0]
 8008c44:	600b      	str	r3, [r1, #0]
 8008c46:	7812      	ldrb	r2, [r2, #0]
 8008c48:	1c10      	adds	r0, r2, #0
 8008c4a:	bf18      	it	ne
 8008c4c:	2001      	movne	r0, #1
 8008c4e:	b002      	add	sp, #8
 8008c50:	4770      	bx	lr
 8008c52:	4610      	mov	r0, r2
 8008c54:	e7fb      	b.n	8008c4e <__ascii_mbtowc+0x16>
 8008c56:	f06f 0001 	mvn.w	r0, #1
 8008c5a:	e7f8      	b.n	8008c4e <__ascii_mbtowc+0x16>

08008c5c <__malloc_lock>:
 8008c5c:	4801      	ldr	r0, [pc, #4]	; (8008c64 <__malloc_lock+0x8>)
 8008c5e:	f000 bdcb 	b.w	80097f8 <__retarget_lock_acquire_recursive>
 8008c62:	bf00      	nop
 8008c64:	20000c4c 	.word	0x20000c4c

08008c68 <__malloc_unlock>:
 8008c68:	4801      	ldr	r0, [pc, #4]	; (8008c70 <__malloc_unlock+0x8>)
 8008c6a:	f000 bdc6 	b.w	80097fa <__retarget_lock_release_recursive>
 8008c6e:	bf00      	nop
 8008c70:	20000c4c 	.word	0x20000c4c

08008c74 <_Balloc>:
 8008c74:	b570      	push	{r4, r5, r6, lr}
 8008c76:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008c78:	4604      	mov	r4, r0
 8008c7a:	460e      	mov	r6, r1
 8008c7c:	b93d      	cbnz	r5, 8008c8e <_Balloc+0x1a>
 8008c7e:	2010      	movs	r0, #16
 8008c80:	f7ff fdc4 	bl	800880c <malloc>
 8008c84:	6260      	str	r0, [r4, #36]	; 0x24
 8008c86:	6045      	str	r5, [r0, #4]
 8008c88:	6085      	str	r5, [r0, #8]
 8008c8a:	6005      	str	r5, [r0, #0]
 8008c8c:	60c5      	str	r5, [r0, #12]
 8008c8e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008c90:	68eb      	ldr	r3, [r5, #12]
 8008c92:	b183      	cbz	r3, 8008cb6 <_Balloc+0x42>
 8008c94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c96:	68db      	ldr	r3, [r3, #12]
 8008c98:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008c9c:	b9b8      	cbnz	r0, 8008cce <_Balloc+0x5a>
 8008c9e:	2101      	movs	r1, #1
 8008ca0:	fa01 f506 	lsl.w	r5, r1, r6
 8008ca4:	1d6a      	adds	r2, r5, #5
 8008ca6:	0092      	lsls	r2, r2, #2
 8008ca8:	4620      	mov	r0, r4
 8008caa:	f000 fc66 	bl	800957a <_calloc_r>
 8008cae:	b160      	cbz	r0, 8008cca <_Balloc+0x56>
 8008cb0:	6046      	str	r6, [r0, #4]
 8008cb2:	6085      	str	r5, [r0, #8]
 8008cb4:	e00e      	b.n	8008cd4 <_Balloc+0x60>
 8008cb6:	2221      	movs	r2, #33	; 0x21
 8008cb8:	2104      	movs	r1, #4
 8008cba:	4620      	mov	r0, r4
 8008cbc:	f000 fc5d 	bl	800957a <_calloc_r>
 8008cc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008cc2:	60e8      	str	r0, [r5, #12]
 8008cc4:	68db      	ldr	r3, [r3, #12]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d1e4      	bne.n	8008c94 <_Balloc+0x20>
 8008cca:	2000      	movs	r0, #0
 8008ccc:	bd70      	pop	{r4, r5, r6, pc}
 8008cce:	6802      	ldr	r2, [r0, #0]
 8008cd0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	6103      	str	r3, [r0, #16]
 8008cd8:	60c3      	str	r3, [r0, #12]
 8008cda:	bd70      	pop	{r4, r5, r6, pc}

08008cdc <_Bfree>:
 8008cdc:	b570      	push	{r4, r5, r6, lr}
 8008cde:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008ce0:	4606      	mov	r6, r0
 8008ce2:	460d      	mov	r5, r1
 8008ce4:	b93c      	cbnz	r4, 8008cf6 <_Bfree+0x1a>
 8008ce6:	2010      	movs	r0, #16
 8008ce8:	f7ff fd90 	bl	800880c <malloc>
 8008cec:	6270      	str	r0, [r6, #36]	; 0x24
 8008cee:	6044      	str	r4, [r0, #4]
 8008cf0:	6084      	str	r4, [r0, #8]
 8008cf2:	6004      	str	r4, [r0, #0]
 8008cf4:	60c4      	str	r4, [r0, #12]
 8008cf6:	b13d      	cbz	r5, 8008d08 <_Bfree+0x2c>
 8008cf8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008cfa:	686a      	ldr	r2, [r5, #4]
 8008cfc:	68db      	ldr	r3, [r3, #12]
 8008cfe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008d02:	6029      	str	r1, [r5, #0]
 8008d04:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008d08:	bd70      	pop	{r4, r5, r6, pc}

08008d0a <__multadd>:
 8008d0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d0e:	690d      	ldr	r5, [r1, #16]
 8008d10:	461f      	mov	r7, r3
 8008d12:	4606      	mov	r6, r0
 8008d14:	460c      	mov	r4, r1
 8008d16:	f101 0e14 	add.w	lr, r1, #20
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	f8de 0000 	ldr.w	r0, [lr]
 8008d20:	b281      	uxth	r1, r0
 8008d22:	fb02 7101 	mla	r1, r2, r1, r7
 8008d26:	0c0f      	lsrs	r7, r1, #16
 8008d28:	0c00      	lsrs	r0, r0, #16
 8008d2a:	fb02 7000 	mla	r0, r2, r0, r7
 8008d2e:	b289      	uxth	r1, r1
 8008d30:	3301      	adds	r3, #1
 8008d32:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008d36:	429d      	cmp	r5, r3
 8008d38:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008d3c:	f84e 1b04 	str.w	r1, [lr], #4
 8008d40:	dcec      	bgt.n	8008d1c <__multadd+0x12>
 8008d42:	b1d7      	cbz	r7, 8008d7a <__multadd+0x70>
 8008d44:	68a3      	ldr	r3, [r4, #8]
 8008d46:	429d      	cmp	r5, r3
 8008d48:	db12      	blt.n	8008d70 <__multadd+0x66>
 8008d4a:	6861      	ldr	r1, [r4, #4]
 8008d4c:	4630      	mov	r0, r6
 8008d4e:	3101      	adds	r1, #1
 8008d50:	f7ff ff90 	bl	8008c74 <_Balloc>
 8008d54:	6922      	ldr	r2, [r4, #16]
 8008d56:	3202      	adds	r2, #2
 8008d58:	f104 010c 	add.w	r1, r4, #12
 8008d5c:	4680      	mov	r8, r0
 8008d5e:	0092      	lsls	r2, r2, #2
 8008d60:	300c      	adds	r0, #12
 8008d62:	f7fc fcd7 	bl	8005714 <memcpy>
 8008d66:	4621      	mov	r1, r4
 8008d68:	4630      	mov	r0, r6
 8008d6a:	f7ff ffb7 	bl	8008cdc <_Bfree>
 8008d6e:	4644      	mov	r4, r8
 8008d70:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008d74:	3501      	adds	r5, #1
 8008d76:	615f      	str	r7, [r3, #20]
 8008d78:	6125      	str	r5, [r4, #16]
 8008d7a:	4620      	mov	r0, r4
 8008d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008d80 <__s2b>:
 8008d80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d84:	460c      	mov	r4, r1
 8008d86:	4615      	mov	r5, r2
 8008d88:	461f      	mov	r7, r3
 8008d8a:	2209      	movs	r2, #9
 8008d8c:	3308      	adds	r3, #8
 8008d8e:	4606      	mov	r6, r0
 8008d90:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d94:	2100      	movs	r1, #0
 8008d96:	2201      	movs	r2, #1
 8008d98:	429a      	cmp	r2, r3
 8008d9a:	db20      	blt.n	8008dde <__s2b+0x5e>
 8008d9c:	4630      	mov	r0, r6
 8008d9e:	f7ff ff69 	bl	8008c74 <_Balloc>
 8008da2:	9b08      	ldr	r3, [sp, #32]
 8008da4:	6143      	str	r3, [r0, #20]
 8008da6:	2d09      	cmp	r5, #9
 8008da8:	f04f 0301 	mov.w	r3, #1
 8008dac:	6103      	str	r3, [r0, #16]
 8008dae:	dd19      	ble.n	8008de4 <__s2b+0x64>
 8008db0:	f104 0909 	add.w	r9, r4, #9
 8008db4:	46c8      	mov	r8, r9
 8008db6:	442c      	add	r4, r5
 8008db8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008dbc:	4601      	mov	r1, r0
 8008dbe:	3b30      	subs	r3, #48	; 0x30
 8008dc0:	220a      	movs	r2, #10
 8008dc2:	4630      	mov	r0, r6
 8008dc4:	f7ff ffa1 	bl	8008d0a <__multadd>
 8008dc8:	45a0      	cmp	r8, r4
 8008dca:	d1f5      	bne.n	8008db8 <__s2b+0x38>
 8008dcc:	f1a5 0408 	sub.w	r4, r5, #8
 8008dd0:	444c      	add	r4, r9
 8008dd2:	1b2d      	subs	r5, r5, r4
 8008dd4:	1963      	adds	r3, r4, r5
 8008dd6:	42bb      	cmp	r3, r7
 8008dd8:	db07      	blt.n	8008dea <__s2b+0x6a>
 8008dda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dde:	0052      	lsls	r2, r2, #1
 8008de0:	3101      	adds	r1, #1
 8008de2:	e7d9      	b.n	8008d98 <__s2b+0x18>
 8008de4:	340a      	adds	r4, #10
 8008de6:	2509      	movs	r5, #9
 8008de8:	e7f3      	b.n	8008dd2 <__s2b+0x52>
 8008dea:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008dee:	4601      	mov	r1, r0
 8008df0:	3b30      	subs	r3, #48	; 0x30
 8008df2:	220a      	movs	r2, #10
 8008df4:	4630      	mov	r0, r6
 8008df6:	f7ff ff88 	bl	8008d0a <__multadd>
 8008dfa:	e7eb      	b.n	8008dd4 <__s2b+0x54>

08008dfc <__hi0bits>:
 8008dfc:	0c02      	lsrs	r2, r0, #16
 8008dfe:	0412      	lsls	r2, r2, #16
 8008e00:	4603      	mov	r3, r0
 8008e02:	b9b2      	cbnz	r2, 8008e32 <__hi0bits+0x36>
 8008e04:	0403      	lsls	r3, r0, #16
 8008e06:	2010      	movs	r0, #16
 8008e08:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008e0c:	bf04      	itt	eq
 8008e0e:	021b      	lsleq	r3, r3, #8
 8008e10:	3008      	addeq	r0, #8
 8008e12:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008e16:	bf04      	itt	eq
 8008e18:	011b      	lsleq	r3, r3, #4
 8008e1a:	3004      	addeq	r0, #4
 8008e1c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008e20:	bf04      	itt	eq
 8008e22:	009b      	lsleq	r3, r3, #2
 8008e24:	3002      	addeq	r0, #2
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	db06      	blt.n	8008e38 <__hi0bits+0x3c>
 8008e2a:	005b      	lsls	r3, r3, #1
 8008e2c:	d503      	bpl.n	8008e36 <__hi0bits+0x3a>
 8008e2e:	3001      	adds	r0, #1
 8008e30:	4770      	bx	lr
 8008e32:	2000      	movs	r0, #0
 8008e34:	e7e8      	b.n	8008e08 <__hi0bits+0xc>
 8008e36:	2020      	movs	r0, #32
 8008e38:	4770      	bx	lr

08008e3a <__lo0bits>:
 8008e3a:	6803      	ldr	r3, [r0, #0]
 8008e3c:	f013 0207 	ands.w	r2, r3, #7
 8008e40:	4601      	mov	r1, r0
 8008e42:	d00b      	beq.n	8008e5c <__lo0bits+0x22>
 8008e44:	07da      	lsls	r2, r3, #31
 8008e46:	d423      	bmi.n	8008e90 <__lo0bits+0x56>
 8008e48:	0798      	lsls	r0, r3, #30
 8008e4a:	bf49      	itett	mi
 8008e4c:	085b      	lsrmi	r3, r3, #1
 8008e4e:	089b      	lsrpl	r3, r3, #2
 8008e50:	2001      	movmi	r0, #1
 8008e52:	600b      	strmi	r3, [r1, #0]
 8008e54:	bf5c      	itt	pl
 8008e56:	600b      	strpl	r3, [r1, #0]
 8008e58:	2002      	movpl	r0, #2
 8008e5a:	4770      	bx	lr
 8008e5c:	b298      	uxth	r0, r3
 8008e5e:	b9a8      	cbnz	r0, 8008e8c <__lo0bits+0x52>
 8008e60:	0c1b      	lsrs	r3, r3, #16
 8008e62:	2010      	movs	r0, #16
 8008e64:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008e68:	bf04      	itt	eq
 8008e6a:	0a1b      	lsreq	r3, r3, #8
 8008e6c:	3008      	addeq	r0, #8
 8008e6e:	071a      	lsls	r2, r3, #28
 8008e70:	bf04      	itt	eq
 8008e72:	091b      	lsreq	r3, r3, #4
 8008e74:	3004      	addeq	r0, #4
 8008e76:	079a      	lsls	r2, r3, #30
 8008e78:	bf04      	itt	eq
 8008e7a:	089b      	lsreq	r3, r3, #2
 8008e7c:	3002      	addeq	r0, #2
 8008e7e:	07da      	lsls	r2, r3, #31
 8008e80:	d402      	bmi.n	8008e88 <__lo0bits+0x4e>
 8008e82:	085b      	lsrs	r3, r3, #1
 8008e84:	d006      	beq.n	8008e94 <__lo0bits+0x5a>
 8008e86:	3001      	adds	r0, #1
 8008e88:	600b      	str	r3, [r1, #0]
 8008e8a:	4770      	bx	lr
 8008e8c:	4610      	mov	r0, r2
 8008e8e:	e7e9      	b.n	8008e64 <__lo0bits+0x2a>
 8008e90:	2000      	movs	r0, #0
 8008e92:	4770      	bx	lr
 8008e94:	2020      	movs	r0, #32
 8008e96:	4770      	bx	lr

08008e98 <__i2b>:
 8008e98:	b510      	push	{r4, lr}
 8008e9a:	460c      	mov	r4, r1
 8008e9c:	2101      	movs	r1, #1
 8008e9e:	f7ff fee9 	bl	8008c74 <_Balloc>
 8008ea2:	2201      	movs	r2, #1
 8008ea4:	6144      	str	r4, [r0, #20]
 8008ea6:	6102      	str	r2, [r0, #16]
 8008ea8:	bd10      	pop	{r4, pc}

08008eaa <__multiply>:
 8008eaa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eae:	4614      	mov	r4, r2
 8008eb0:	690a      	ldr	r2, [r1, #16]
 8008eb2:	6923      	ldr	r3, [r4, #16]
 8008eb4:	429a      	cmp	r2, r3
 8008eb6:	bfb8      	it	lt
 8008eb8:	460b      	movlt	r3, r1
 8008eba:	4689      	mov	r9, r1
 8008ebc:	bfbc      	itt	lt
 8008ebe:	46a1      	movlt	r9, r4
 8008ec0:	461c      	movlt	r4, r3
 8008ec2:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008ec6:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008eca:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8008ece:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008ed2:	eb07 060a 	add.w	r6, r7, sl
 8008ed6:	429e      	cmp	r6, r3
 8008ed8:	bfc8      	it	gt
 8008eda:	3101      	addgt	r1, #1
 8008edc:	f7ff feca 	bl	8008c74 <_Balloc>
 8008ee0:	f100 0514 	add.w	r5, r0, #20
 8008ee4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008ee8:	462b      	mov	r3, r5
 8008eea:	2200      	movs	r2, #0
 8008eec:	4543      	cmp	r3, r8
 8008eee:	d316      	bcc.n	8008f1e <__multiply+0x74>
 8008ef0:	f104 0214 	add.w	r2, r4, #20
 8008ef4:	f109 0114 	add.w	r1, r9, #20
 8008ef8:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8008efc:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008f00:	9301      	str	r3, [sp, #4]
 8008f02:	9c01      	ldr	r4, [sp, #4]
 8008f04:	4294      	cmp	r4, r2
 8008f06:	4613      	mov	r3, r2
 8008f08:	d80c      	bhi.n	8008f24 <__multiply+0x7a>
 8008f0a:	2e00      	cmp	r6, #0
 8008f0c:	dd03      	ble.n	8008f16 <__multiply+0x6c>
 8008f0e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d054      	beq.n	8008fc0 <__multiply+0x116>
 8008f16:	6106      	str	r6, [r0, #16]
 8008f18:	b003      	add	sp, #12
 8008f1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f1e:	f843 2b04 	str.w	r2, [r3], #4
 8008f22:	e7e3      	b.n	8008eec <__multiply+0x42>
 8008f24:	f8b3 a000 	ldrh.w	sl, [r3]
 8008f28:	3204      	adds	r2, #4
 8008f2a:	f1ba 0f00 	cmp.w	sl, #0
 8008f2e:	d020      	beq.n	8008f72 <__multiply+0xc8>
 8008f30:	46ae      	mov	lr, r5
 8008f32:	4689      	mov	r9, r1
 8008f34:	f04f 0c00 	mov.w	ip, #0
 8008f38:	f859 4b04 	ldr.w	r4, [r9], #4
 8008f3c:	f8be b000 	ldrh.w	fp, [lr]
 8008f40:	b2a3      	uxth	r3, r4
 8008f42:	fb0a b303 	mla	r3, sl, r3, fp
 8008f46:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8008f4a:	f8de 4000 	ldr.w	r4, [lr]
 8008f4e:	4463      	add	r3, ip
 8008f50:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8008f54:	fb0a c40b 	mla	r4, sl, fp, ip
 8008f58:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008f5c:	b29b      	uxth	r3, r3
 8008f5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008f62:	454f      	cmp	r7, r9
 8008f64:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8008f68:	f84e 3b04 	str.w	r3, [lr], #4
 8008f6c:	d8e4      	bhi.n	8008f38 <__multiply+0x8e>
 8008f6e:	f8ce c000 	str.w	ip, [lr]
 8008f72:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8008f76:	f1b9 0f00 	cmp.w	r9, #0
 8008f7a:	d01f      	beq.n	8008fbc <__multiply+0x112>
 8008f7c:	682b      	ldr	r3, [r5, #0]
 8008f7e:	46ae      	mov	lr, r5
 8008f80:	468c      	mov	ip, r1
 8008f82:	f04f 0a00 	mov.w	sl, #0
 8008f86:	f8bc 4000 	ldrh.w	r4, [ip]
 8008f8a:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008f8e:	fb09 b404 	mla	r4, r9, r4, fp
 8008f92:	44a2      	add	sl, r4
 8008f94:	b29b      	uxth	r3, r3
 8008f96:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8008f9a:	f84e 3b04 	str.w	r3, [lr], #4
 8008f9e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008fa2:	f8be 4000 	ldrh.w	r4, [lr]
 8008fa6:	0c1b      	lsrs	r3, r3, #16
 8008fa8:	fb09 4303 	mla	r3, r9, r3, r4
 8008fac:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8008fb0:	4567      	cmp	r7, ip
 8008fb2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008fb6:	d8e6      	bhi.n	8008f86 <__multiply+0xdc>
 8008fb8:	f8ce 3000 	str.w	r3, [lr]
 8008fbc:	3504      	adds	r5, #4
 8008fbe:	e7a0      	b.n	8008f02 <__multiply+0x58>
 8008fc0:	3e01      	subs	r6, #1
 8008fc2:	e7a2      	b.n	8008f0a <__multiply+0x60>

08008fc4 <__pow5mult>:
 8008fc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fc8:	4615      	mov	r5, r2
 8008fca:	f012 0203 	ands.w	r2, r2, #3
 8008fce:	4606      	mov	r6, r0
 8008fd0:	460f      	mov	r7, r1
 8008fd2:	d007      	beq.n	8008fe4 <__pow5mult+0x20>
 8008fd4:	3a01      	subs	r2, #1
 8008fd6:	4c21      	ldr	r4, [pc, #132]	; (800905c <__pow5mult+0x98>)
 8008fd8:	2300      	movs	r3, #0
 8008fda:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008fde:	f7ff fe94 	bl	8008d0a <__multadd>
 8008fe2:	4607      	mov	r7, r0
 8008fe4:	10ad      	asrs	r5, r5, #2
 8008fe6:	d035      	beq.n	8009054 <__pow5mult+0x90>
 8008fe8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008fea:	b93c      	cbnz	r4, 8008ffc <__pow5mult+0x38>
 8008fec:	2010      	movs	r0, #16
 8008fee:	f7ff fc0d 	bl	800880c <malloc>
 8008ff2:	6270      	str	r0, [r6, #36]	; 0x24
 8008ff4:	6044      	str	r4, [r0, #4]
 8008ff6:	6084      	str	r4, [r0, #8]
 8008ff8:	6004      	str	r4, [r0, #0]
 8008ffa:	60c4      	str	r4, [r0, #12]
 8008ffc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009000:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009004:	b94c      	cbnz	r4, 800901a <__pow5mult+0x56>
 8009006:	f240 2171 	movw	r1, #625	; 0x271
 800900a:	4630      	mov	r0, r6
 800900c:	f7ff ff44 	bl	8008e98 <__i2b>
 8009010:	2300      	movs	r3, #0
 8009012:	f8c8 0008 	str.w	r0, [r8, #8]
 8009016:	4604      	mov	r4, r0
 8009018:	6003      	str	r3, [r0, #0]
 800901a:	f04f 0800 	mov.w	r8, #0
 800901e:	07eb      	lsls	r3, r5, #31
 8009020:	d50a      	bpl.n	8009038 <__pow5mult+0x74>
 8009022:	4639      	mov	r1, r7
 8009024:	4622      	mov	r2, r4
 8009026:	4630      	mov	r0, r6
 8009028:	f7ff ff3f 	bl	8008eaa <__multiply>
 800902c:	4639      	mov	r1, r7
 800902e:	4681      	mov	r9, r0
 8009030:	4630      	mov	r0, r6
 8009032:	f7ff fe53 	bl	8008cdc <_Bfree>
 8009036:	464f      	mov	r7, r9
 8009038:	106d      	asrs	r5, r5, #1
 800903a:	d00b      	beq.n	8009054 <__pow5mult+0x90>
 800903c:	6820      	ldr	r0, [r4, #0]
 800903e:	b938      	cbnz	r0, 8009050 <__pow5mult+0x8c>
 8009040:	4622      	mov	r2, r4
 8009042:	4621      	mov	r1, r4
 8009044:	4630      	mov	r0, r6
 8009046:	f7ff ff30 	bl	8008eaa <__multiply>
 800904a:	6020      	str	r0, [r4, #0]
 800904c:	f8c0 8000 	str.w	r8, [r0]
 8009050:	4604      	mov	r4, r0
 8009052:	e7e4      	b.n	800901e <__pow5mult+0x5a>
 8009054:	4638      	mov	r0, r7
 8009056:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800905a:	bf00      	nop
 800905c:	08009db0 	.word	0x08009db0

08009060 <__lshift>:
 8009060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009064:	460c      	mov	r4, r1
 8009066:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800906a:	6923      	ldr	r3, [r4, #16]
 800906c:	6849      	ldr	r1, [r1, #4]
 800906e:	eb0a 0903 	add.w	r9, sl, r3
 8009072:	68a3      	ldr	r3, [r4, #8]
 8009074:	4607      	mov	r7, r0
 8009076:	4616      	mov	r6, r2
 8009078:	f109 0501 	add.w	r5, r9, #1
 800907c:	42ab      	cmp	r3, r5
 800907e:	db31      	blt.n	80090e4 <__lshift+0x84>
 8009080:	4638      	mov	r0, r7
 8009082:	f7ff fdf7 	bl	8008c74 <_Balloc>
 8009086:	2200      	movs	r2, #0
 8009088:	4680      	mov	r8, r0
 800908a:	f100 0314 	add.w	r3, r0, #20
 800908e:	4611      	mov	r1, r2
 8009090:	4552      	cmp	r2, sl
 8009092:	db2a      	blt.n	80090ea <__lshift+0x8a>
 8009094:	6920      	ldr	r0, [r4, #16]
 8009096:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800909a:	f104 0114 	add.w	r1, r4, #20
 800909e:	f016 021f 	ands.w	r2, r6, #31
 80090a2:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80090a6:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 80090aa:	d022      	beq.n	80090f2 <__lshift+0x92>
 80090ac:	f1c2 0c20 	rsb	ip, r2, #32
 80090b0:	2000      	movs	r0, #0
 80090b2:	680e      	ldr	r6, [r1, #0]
 80090b4:	4096      	lsls	r6, r2
 80090b6:	4330      	orrs	r0, r6
 80090b8:	f843 0b04 	str.w	r0, [r3], #4
 80090bc:	f851 0b04 	ldr.w	r0, [r1], #4
 80090c0:	458e      	cmp	lr, r1
 80090c2:	fa20 f00c 	lsr.w	r0, r0, ip
 80090c6:	d8f4      	bhi.n	80090b2 <__lshift+0x52>
 80090c8:	6018      	str	r0, [r3, #0]
 80090ca:	b108      	cbz	r0, 80090d0 <__lshift+0x70>
 80090cc:	f109 0502 	add.w	r5, r9, #2
 80090d0:	3d01      	subs	r5, #1
 80090d2:	4638      	mov	r0, r7
 80090d4:	f8c8 5010 	str.w	r5, [r8, #16]
 80090d8:	4621      	mov	r1, r4
 80090da:	f7ff fdff 	bl	8008cdc <_Bfree>
 80090de:	4640      	mov	r0, r8
 80090e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090e4:	3101      	adds	r1, #1
 80090e6:	005b      	lsls	r3, r3, #1
 80090e8:	e7c8      	b.n	800907c <__lshift+0x1c>
 80090ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80090ee:	3201      	adds	r2, #1
 80090f0:	e7ce      	b.n	8009090 <__lshift+0x30>
 80090f2:	3b04      	subs	r3, #4
 80090f4:	f851 2b04 	ldr.w	r2, [r1], #4
 80090f8:	f843 2f04 	str.w	r2, [r3, #4]!
 80090fc:	458e      	cmp	lr, r1
 80090fe:	d8f9      	bhi.n	80090f4 <__lshift+0x94>
 8009100:	e7e6      	b.n	80090d0 <__lshift+0x70>

08009102 <__mcmp>:
 8009102:	6903      	ldr	r3, [r0, #16]
 8009104:	690a      	ldr	r2, [r1, #16]
 8009106:	1a9b      	subs	r3, r3, r2
 8009108:	b530      	push	{r4, r5, lr}
 800910a:	d10c      	bne.n	8009126 <__mcmp+0x24>
 800910c:	0092      	lsls	r2, r2, #2
 800910e:	3014      	adds	r0, #20
 8009110:	3114      	adds	r1, #20
 8009112:	1884      	adds	r4, r0, r2
 8009114:	4411      	add	r1, r2
 8009116:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800911a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800911e:	4295      	cmp	r5, r2
 8009120:	d003      	beq.n	800912a <__mcmp+0x28>
 8009122:	d305      	bcc.n	8009130 <__mcmp+0x2e>
 8009124:	2301      	movs	r3, #1
 8009126:	4618      	mov	r0, r3
 8009128:	bd30      	pop	{r4, r5, pc}
 800912a:	42a0      	cmp	r0, r4
 800912c:	d3f3      	bcc.n	8009116 <__mcmp+0x14>
 800912e:	e7fa      	b.n	8009126 <__mcmp+0x24>
 8009130:	f04f 33ff 	mov.w	r3, #4294967295
 8009134:	e7f7      	b.n	8009126 <__mcmp+0x24>

08009136 <__mdiff>:
 8009136:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800913a:	460d      	mov	r5, r1
 800913c:	4607      	mov	r7, r0
 800913e:	4611      	mov	r1, r2
 8009140:	4628      	mov	r0, r5
 8009142:	4614      	mov	r4, r2
 8009144:	f7ff ffdd 	bl	8009102 <__mcmp>
 8009148:	1e06      	subs	r6, r0, #0
 800914a:	d108      	bne.n	800915e <__mdiff+0x28>
 800914c:	4631      	mov	r1, r6
 800914e:	4638      	mov	r0, r7
 8009150:	f7ff fd90 	bl	8008c74 <_Balloc>
 8009154:	2301      	movs	r3, #1
 8009156:	6103      	str	r3, [r0, #16]
 8009158:	6146      	str	r6, [r0, #20]
 800915a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800915e:	bfa4      	itt	ge
 8009160:	4623      	movge	r3, r4
 8009162:	462c      	movge	r4, r5
 8009164:	4638      	mov	r0, r7
 8009166:	6861      	ldr	r1, [r4, #4]
 8009168:	bfa6      	itte	ge
 800916a:	461d      	movge	r5, r3
 800916c:	2600      	movge	r6, #0
 800916e:	2601      	movlt	r6, #1
 8009170:	f7ff fd80 	bl	8008c74 <_Balloc>
 8009174:	692b      	ldr	r3, [r5, #16]
 8009176:	60c6      	str	r6, [r0, #12]
 8009178:	6926      	ldr	r6, [r4, #16]
 800917a:	f105 0914 	add.w	r9, r5, #20
 800917e:	f104 0214 	add.w	r2, r4, #20
 8009182:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009186:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800918a:	f100 0514 	add.w	r5, r0, #20
 800918e:	f04f 0c00 	mov.w	ip, #0
 8009192:	f852 ab04 	ldr.w	sl, [r2], #4
 8009196:	f859 4b04 	ldr.w	r4, [r9], #4
 800919a:	fa1c f18a 	uxtah	r1, ip, sl
 800919e:	b2a3      	uxth	r3, r4
 80091a0:	1ac9      	subs	r1, r1, r3
 80091a2:	0c23      	lsrs	r3, r4, #16
 80091a4:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80091a8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80091ac:	b289      	uxth	r1, r1
 80091ae:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80091b2:	45c8      	cmp	r8, r9
 80091b4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80091b8:	4696      	mov	lr, r2
 80091ba:	f845 3b04 	str.w	r3, [r5], #4
 80091be:	d8e8      	bhi.n	8009192 <__mdiff+0x5c>
 80091c0:	45be      	cmp	lr, r7
 80091c2:	d305      	bcc.n	80091d0 <__mdiff+0x9a>
 80091c4:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80091c8:	b18b      	cbz	r3, 80091ee <__mdiff+0xb8>
 80091ca:	6106      	str	r6, [r0, #16]
 80091cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091d0:	f85e 1b04 	ldr.w	r1, [lr], #4
 80091d4:	fa1c f381 	uxtah	r3, ip, r1
 80091d8:	141a      	asrs	r2, r3, #16
 80091da:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80091de:	b29b      	uxth	r3, r3
 80091e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80091e4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80091e8:	f845 3b04 	str.w	r3, [r5], #4
 80091ec:	e7e8      	b.n	80091c0 <__mdiff+0x8a>
 80091ee:	3e01      	subs	r6, #1
 80091f0:	e7e8      	b.n	80091c4 <__mdiff+0x8e>
	...

080091f4 <__ulp>:
 80091f4:	4b12      	ldr	r3, [pc, #72]	; (8009240 <__ulp+0x4c>)
 80091f6:	ee10 2a90 	vmov	r2, s1
 80091fa:	401a      	ands	r2, r3
 80091fc:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8009200:	2b00      	cmp	r3, #0
 8009202:	dd04      	ble.n	800920e <__ulp+0x1a>
 8009204:	2000      	movs	r0, #0
 8009206:	4619      	mov	r1, r3
 8009208:	ec41 0b10 	vmov	d0, r0, r1
 800920c:	4770      	bx	lr
 800920e:	425b      	negs	r3, r3
 8009210:	151b      	asrs	r3, r3, #20
 8009212:	2b13      	cmp	r3, #19
 8009214:	f04f 0000 	mov.w	r0, #0
 8009218:	f04f 0100 	mov.w	r1, #0
 800921c:	dc04      	bgt.n	8009228 <__ulp+0x34>
 800921e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8009222:	fa42 f103 	asr.w	r1, r2, r3
 8009226:	e7ef      	b.n	8009208 <__ulp+0x14>
 8009228:	3b14      	subs	r3, #20
 800922a:	2b1e      	cmp	r3, #30
 800922c:	f04f 0201 	mov.w	r2, #1
 8009230:	bfda      	itte	le
 8009232:	f1c3 031f 	rsble	r3, r3, #31
 8009236:	fa02 f303 	lslle.w	r3, r2, r3
 800923a:	4613      	movgt	r3, r2
 800923c:	4618      	mov	r0, r3
 800923e:	e7e3      	b.n	8009208 <__ulp+0x14>
 8009240:	7ff00000 	.word	0x7ff00000

08009244 <__b2d>:
 8009244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009246:	6905      	ldr	r5, [r0, #16]
 8009248:	f100 0714 	add.w	r7, r0, #20
 800924c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009250:	1f2e      	subs	r6, r5, #4
 8009252:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009256:	4620      	mov	r0, r4
 8009258:	f7ff fdd0 	bl	8008dfc <__hi0bits>
 800925c:	f1c0 0320 	rsb	r3, r0, #32
 8009260:	280a      	cmp	r0, #10
 8009262:	600b      	str	r3, [r1, #0]
 8009264:	f8df e074 	ldr.w	lr, [pc, #116]	; 80092dc <__b2d+0x98>
 8009268:	dc14      	bgt.n	8009294 <__b2d+0x50>
 800926a:	f1c0 0c0b 	rsb	ip, r0, #11
 800926e:	fa24 f10c 	lsr.w	r1, r4, ip
 8009272:	42b7      	cmp	r7, r6
 8009274:	ea41 030e 	orr.w	r3, r1, lr
 8009278:	bf34      	ite	cc
 800927a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800927e:	2100      	movcs	r1, #0
 8009280:	3015      	adds	r0, #21
 8009282:	fa04 f000 	lsl.w	r0, r4, r0
 8009286:	fa21 f10c 	lsr.w	r1, r1, ip
 800928a:	ea40 0201 	orr.w	r2, r0, r1
 800928e:	ec43 2b10 	vmov	d0, r2, r3
 8009292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009294:	42b7      	cmp	r7, r6
 8009296:	bf3a      	itte	cc
 8009298:	f1a5 0608 	subcc.w	r6, r5, #8
 800929c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80092a0:	2100      	movcs	r1, #0
 80092a2:	380b      	subs	r0, #11
 80092a4:	d015      	beq.n	80092d2 <__b2d+0x8e>
 80092a6:	4084      	lsls	r4, r0
 80092a8:	f1c0 0520 	rsb	r5, r0, #32
 80092ac:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80092b0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80092b4:	42be      	cmp	r6, r7
 80092b6:	fa21 fe05 	lsr.w	lr, r1, r5
 80092ba:	ea44 030e 	orr.w	r3, r4, lr
 80092be:	bf8c      	ite	hi
 80092c0:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80092c4:	2400      	movls	r4, #0
 80092c6:	fa01 f000 	lsl.w	r0, r1, r0
 80092ca:	40ec      	lsrs	r4, r5
 80092cc:	ea40 0204 	orr.w	r2, r0, r4
 80092d0:	e7dd      	b.n	800928e <__b2d+0x4a>
 80092d2:	ea44 030e 	orr.w	r3, r4, lr
 80092d6:	460a      	mov	r2, r1
 80092d8:	e7d9      	b.n	800928e <__b2d+0x4a>
 80092da:	bf00      	nop
 80092dc:	3ff00000 	.word	0x3ff00000

080092e0 <__d2b>:
 80092e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80092e4:	460e      	mov	r6, r1
 80092e6:	2101      	movs	r1, #1
 80092e8:	ec59 8b10 	vmov	r8, r9, d0
 80092ec:	4615      	mov	r5, r2
 80092ee:	f7ff fcc1 	bl	8008c74 <_Balloc>
 80092f2:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80092f6:	4607      	mov	r7, r0
 80092f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80092fc:	bb34      	cbnz	r4, 800934c <__d2b+0x6c>
 80092fe:	9301      	str	r3, [sp, #4]
 8009300:	f1b8 0f00 	cmp.w	r8, #0
 8009304:	d027      	beq.n	8009356 <__d2b+0x76>
 8009306:	a802      	add	r0, sp, #8
 8009308:	f840 8d08 	str.w	r8, [r0, #-8]!
 800930c:	f7ff fd95 	bl	8008e3a <__lo0bits>
 8009310:	9900      	ldr	r1, [sp, #0]
 8009312:	b1f0      	cbz	r0, 8009352 <__d2b+0x72>
 8009314:	9a01      	ldr	r2, [sp, #4]
 8009316:	f1c0 0320 	rsb	r3, r0, #32
 800931a:	fa02 f303 	lsl.w	r3, r2, r3
 800931e:	430b      	orrs	r3, r1
 8009320:	40c2      	lsrs	r2, r0
 8009322:	617b      	str	r3, [r7, #20]
 8009324:	9201      	str	r2, [sp, #4]
 8009326:	9b01      	ldr	r3, [sp, #4]
 8009328:	61bb      	str	r3, [r7, #24]
 800932a:	2b00      	cmp	r3, #0
 800932c:	bf14      	ite	ne
 800932e:	2102      	movne	r1, #2
 8009330:	2101      	moveq	r1, #1
 8009332:	6139      	str	r1, [r7, #16]
 8009334:	b1c4      	cbz	r4, 8009368 <__d2b+0x88>
 8009336:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800933a:	4404      	add	r4, r0
 800933c:	6034      	str	r4, [r6, #0]
 800933e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009342:	6028      	str	r0, [r5, #0]
 8009344:	4638      	mov	r0, r7
 8009346:	b003      	add	sp, #12
 8009348:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800934c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009350:	e7d5      	b.n	80092fe <__d2b+0x1e>
 8009352:	6179      	str	r1, [r7, #20]
 8009354:	e7e7      	b.n	8009326 <__d2b+0x46>
 8009356:	a801      	add	r0, sp, #4
 8009358:	f7ff fd6f 	bl	8008e3a <__lo0bits>
 800935c:	9b01      	ldr	r3, [sp, #4]
 800935e:	617b      	str	r3, [r7, #20]
 8009360:	2101      	movs	r1, #1
 8009362:	6139      	str	r1, [r7, #16]
 8009364:	3020      	adds	r0, #32
 8009366:	e7e5      	b.n	8009334 <__d2b+0x54>
 8009368:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800936c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009370:	6030      	str	r0, [r6, #0]
 8009372:	6918      	ldr	r0, [r3, #16]
 8009374:	f7ff fd42 	bl	8008dfc <__hi0bits>
 8009378:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800937c:	e7e1      	b.n	8009342 <__d2b+0x62>

0800937e <__ratio>:
 800937e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009382:	4688      	mov	r8, r1
 8009384:	4669      	mov	r1, sp
 8009386:	4681      	mov	r9, r0
 8009388:	f7ff ff5c 	bl	8009244 <__b2d>
 800938c:	a901      	add	r1, sp, #4
 800938e:	4640      	mov	r0, r8
 8009390:	ec55 4b10 	vmov	r4, r5, d0
 8009394:	f7ff ff56 	bl	8009244 <__b2d>
 8009398:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800939c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80093a0:	1a9a      	subs	r2, r3, r2
 80093a2:	e89d 000a 	ldmia.w	sp, {r1, r3}
 80093a6:	1acb      	subs	r3, r1, r3
 80093a8:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80093ac:	ec57 6b10 	vmov	r6, r7, d0
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	bfd6      	itet	le
 80093b4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80093b8:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
 80093bc:	eb07 5703 	addle.w	r7, r7, r3, lsl #20
 80093c0:	4632      	mov	r2, r6
 80093c2:	463b      	mov	r3, r7
 80093c4:	4620      	mov	r0, r4
 80093c6:	4629      	mov	r1, r5
 80093c8:	f7f7 fa3c 	bl	8000844 <__aeabi_ddiv>
 80093cc:	ec41 0b10 	vmov	d0, r0, r1
 80093d0:	b003      	add	sp, #12
 80093d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080093d6 <__copybits>:
 80093d6:	3901      	subs	r1, #1
 80093d8:	b510      	push	{r4, lr}
 80093da:	1149      	asrs	r1, r1, #5
 80093dc:	6914      	ldr	r4, [r2, #16]
 80093de:	3101      	adds	r1, #1
 80093e0:	f102 0314 	add.w	r3, r2, #20
 80093e4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80093e8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80093ec:	42a3      	cmp	r3, r4
 80093ee:	4602      	mov	r2, r0
 80093f0:	d303      	bcc.n	80093fa <__copybits+0x24>
 80093f2:	2300      	movs	r3, #0
 80093f4:	428a      	cmp	r2, r1
 80093f6:	d305      	bcc.n	8009404 <__copybits+0x2e>
 80093f8:	bd10      	pop	{r4, pc}
 80093fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80093fe:	f840 2b04 	str.w	r2, [r0], #4
 8009402:	e7f3      	b.n	80093ec <__copybits+0x16>
 8009404:	f842 3b04 	str.w	r3, [r2], #4
 8009408:	e7f4      	b.n	80093f4 <__copybits+0x1e>

0800940a <__any_on>:
 800940a:	f100 0214 	add.w	r2, r0, #20
 800940e:	6900      	ldr	r0, [r0, #16]
 8009410:	114b      	asrs	r3, r1, #5
 8009412:	4298      	cmp	r0, r3
 8009414:	b510      	push	{r4, lr}
 8009416:	db11      	blt.n	800943c <__any_on+0x32>
 8009418:	dd0a      	ble.n	8009430 <__any_on+0x26>
 800941a:	f011 011f 	ands.w	r1, r1, #31
 800941e:	d007      	beq.n	8009430 <__any_on+0x26>
 8009420:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009424:	fa24 f001 	lsr.w	r0, r4, r1
 8009428:	fa00 f101 	lsl.w	r1, r0, r1
 800942c:	428c      	cmp	r4, r1
 800942e:	d10b      	bne.n	8009448 <__any_on+0x3e>
 8009430:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009434:	4293      	cmp	r3, r2
 8009436:	d803      	bhi.n	8009440 <__any_on+0x36>
 8009438:	2000      	movs	r0, #0
 800943a:	bd10      	pop	{r4, pc}
 800943c:	4603      	mov	r3, r0
 800943e:	e7f7      	b.n	8009430 <__any_on+0x26>
 8009440:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009444:	2900      	cmp	r1, #0
 8009446:	d0f5      	beq.n	8009434 <__any_on+0x2a>
 8009448:	2001      	movs	r0, #1
 800944a:	bd10      	pop	{r4, pc}

0800944c <_sbrk_r>:
 800944c:	b538      	push	{r3, r4, r5, lr}
 800944e:	4c06      	ldr	r4, [pc, #24]	; (8009468 <_sbrk_r+0x1c>)
 8009450:	2300      	movs	r3, #0
 8009452:	4605      	mov	r5, r0
 8009454:	4608      	mov	r0, r1
 8009456:	6023      	str	r3, [r4, #0]
 8009458:	f7fc f8b4 	bl	80055c4 <_sbrk>
 800945c:	1c43      	adds	r3, r0, #1
 800945e:	d102      	bne.n	8009466 <_sbrk_r+0x1a>
 8009460:	6823      	ldr	r3, [r4, #0]
 8009462:	b103      	cbz	r3, 8009466 <_sbrk_r+0x1a>
 8009464:	602b      	str	r3, [r5, #0]
 8009466:	bd38      	pop	{r3, r4, r5, pc}
 8009468:	20000c54 	.word	0x20000c54

0800946c <__ssprint_r>:
 800946c:	6893      	ldr	r3, [r2, #8]
 800946e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009472:	4681      	mov	r9, r0
 8009474:	460c      	mov	r4, r1
 8009476:	4617      	mov	r7, r2
 8009478:	2b00      	cmp	r3, #0
 800947a:	d060      	beq.n	800953e <__ssprint_r+0xd2>
 800947c:	f04f 0b00 	mov.w	fp, #0
 8009480:	f8d2 a000 	ldr.w	sl, [r2]
 8009484:	465e      	mov	r6, fp
 8009486:	b356      	cbz	r6, 80094de <__ssprint_r+0x72>
 8009488:	68a3      	ldr	r3, [r4, #8]
 800948a:	429e      	cmp	r6, r3
 800948c:	d344      	bcc.n	8009518 <__ssprint_r+0xac>
 800948e:	89a2      	ldrh	r2, [r4, #12]
 8009490:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009494:	d03e      	beq.n	8009514 <__ssprint_r+0xa8>
 8009496:	6825      	ldr	r5, [r4, #0]
 8009498:	6921      	ldr	r1, [r4, #16]
 800949a:	eba5 0801 	sub.w	r8, r5, r1
 800949e:	6965      	ldr	r5, [r4, #20]
 80094a0:	2302      	movs	r3, #2
 80094a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80094a6:	fb95 f5f3 	sdiv	r5, r5, r3
 80094aa:	f108 0301 	add.w	r3, r8, #1
 80094ae:	4433      	add	r3, r6
 80094b0:	429d      	cmp	r5, r3
 80094b2:	bf38      	it	cc
 80094b4:	461d      	movcc	r5, r3
 80094b6:	0553      	lsls	r3, r2, #21
 80094b8:	d546      	bpl.n	8009548 <__ssprint_r+0xdc>
 80094ba:	4629      	mov	r1, r5
 80094bc:	4648      	mov	r0, r9
 80094be:	f7ff f9ad 	bl	800881c <_malloc_r>
 80094c2:	b998      	cbnz	r0, 80094ec <__ssprint_r+0x80>
 80094c4:	230c      	movs	r3, #12
 80094c6:	f8c9 3000 	str.w	r3, [r9]
 80094ca:	89a3      	ldrh	r3, [r4, #12]
 80094cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094d0:	81a3      	strh	r3, [r4, #12]
 80094d2:	2300      	movs	r3, #0
 80094d4:	60bb      	str	r3, [r7, #8]
 80094d6:	607b      	str	r3, [r7, #4]
 80094d8:	f04f 30ff 	mov.w	r0, #4294967295
 80094dc:	e031      	b.n	8009542 <__ssprint_r+0xd6>
 80094de:	f8da b000 	ldr.w	fp, [sl]
 80094e2:	f8da 6004 	ldr.w	r6, [sl, #4]
 80094e6:	f10a 0a08 	add.w	sl, sl, #8
 80094ea:	e7cc      	b.n	8009486 <__ssprint_r+0x1a>
 80094ec:	4642      	mov	r2, r8
 80094ee:	6921      	ldr	r1, [r4, #16]
 80094f0:	9001      	str	r0, [sp, #4]
 80094f2:	f7fc f90f 	bl	8005714 <memcpy>
 80094f6:	89a2      	ldrh	r2, [r4, #12]
 80094f8:	9b01      	ldr	r3, [sp, #4]
 80094fa:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 80094fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009502:	81a2      	strh	r2, [r4, #12]
 8009504:	6123      	str	r3, [r4, #16]
 8009506:	6165      	str	r5, [r4, #20]
 8009508:	4443      	add	r3, r8
 800950a:	eba5 0508 	sub.w	r5, r5, r8
 800950e:	6023      	str	r3, [r4, #0]
 8009510:	60a5      	str	r5, [r4, #8]
 8009512:	4633      	mov	r3, r6
 8009514:	429e      	cmp	r6, r3
 8009516:	d200      	bcs.n	800951a <__ssprint_r+0xae>
 8009518:	4633      	mov	r3, r6
 800951a:	461a      	mov	r2, r3
 800951c:	4659      	mov	r1, fp
 800951e:	6820      	ldr	r0, [r4, #0]
 8009520:	9301      	str	r3, [sp, #4]
 8009522:	f000 f96b 	bl	80097fc <memmove>
 8009526:	68a2      	ldr	r2, [r4, #8]
 8009528:	9b01      	ldr	r3, [sp, #4]
 800952a:	1ad2      	subs	r2, r2, r3
 800952c:	60a2      	str	r2, [r4, #8]
 800952e:	6822      	ldr	r2, [r4, #0]
 8009530:	4413      	add	r3, r2
 8009532:	6023      	str	r3, [r4, #0]
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	1b9e      	subs	r6, r3, r6
 8009538:	60be      	str	r6, [r7, #8]
 800953a:	2e00      	cmp	r6, #0
 800953c:	d1cf      	bne.n	80094de <__ssprint_r+0x72>
 800953e:	2000      	movs	r0, #0
 8009540:	6078      	str	r0, [r7, #4]
 8009542:	b003      	add	sp, #12
 8009544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009548:	462a      	mov	r2, r5
 800954a:	4648      	mov	r0, r9
 800954c:	f000 f970 	bl	8009830 <_realloc_r>
 8009550:	4603      	mov	r3, r0
 8009552:	2800      	cmp	r0, #0
 8009554:	d1d6      	bne.n	8009504 <__ssprint_r+0x98>
 8009556:	6921      	ldr	r1, [r4, #16]
 8009558:	4648      	mov	r0, r9
 800955a:	f000 f891 	bl	8009680 <_free_r>
 800955e:	e7b1      	b.n	80094c4 <__ssprint_r+0x58>

08009560 <__ascii_wctomb>:
 8009560:	b149      	cbz	r1, 8009576 <__ascii_wctomb+0x16>
 8009562:	2aff      	cmp	r2, #255	; 0xff
 8009564:	bf85      	ittet	hi
 8009566:	238a      	movhi	r3, #138	; 0x8a
 8009568:	6003      	strhi	r3, [r0, #0]
 800956a:	700a      	strbls	r2, [r1, #0]
 800956c:	f04f 30ff 	movhi.w	r0, #4294967295
 8009570:	bf98      	it	ls
 8009572:	2001      	movls	r0, #1
 8009574:	4770      	bx	lr
 8009576:	4608      	mov	r0, r1
 8009578:	4770      	bx	lr

0800957a <_calloc_r>:
 800957a:	b510      	push	{r4, lr}
 800957c:	4351      	muls	r1, r2
 800957e:	f7ff f94d 	bl	800881c <_malloc_r>
 8009582:	4604      	mov	r4, r0
 8009584:	b198      	cbz	r0, 80095ae <_calloc_r+0x34>
 8009586:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800958a:	f022 0203 	bic.w	r2, r2, #3
 800958e:	3a04      	subs	r2, #4
 8009590:	2a24      	cmp	r2, #36	; 0x24
 8009592:	d81b      	bhi.n	80095cc <_calloc_r+0x52>
 8009594:	2a13      	cmp	r2, #19
 8009596:	d917      	bls.n	80095c8 <_calloc_r+0x4e>
 8009598:	2100      	movs	r1, #0
 800959a:	2a1b      	cmp	r2, #27
 800959c:	6001      	str	r1, [r0, #0]
 800959e:	6041      	str	r1, [r0, #4]
 80095a0:	d807      	bhi.n	80095b2 <_calloc_r+0x38>
 80095a2:	f100 0308 	add.w	r3, r0, #8
 80095a6:	2200      	movs	r2, #0
 80095a8:	601a      	str	r2, [r3, #0]
 80095aa:	605a      	str	r2, [r3, #4]
 80095ac:	609a      	str	r2, [r3, #8]
 80095ae:	4620      	mov	r0, r4
 80095b0:	bd10      	pop	{r4, pc}
 80095b2:	2a24      	cmp	r2, #36	; 0x24
 80095b4:	6081      	str	r1, [r0, #8]
 80095b6:	60c1      	str	r1, [r0, #12]
 80095b8:	bf11      	iteee	ne
 80095ba:	f100 0310 	addne.w	r3, r0, #16
 80095be:	6101      	streq	r1, [r0, #16]
 80095c0:	f100 0318 	addeq.w	r3, r0, #24
 80095c4:	6141      	streq	r1, [r0, #20]
 80095c6:	e7ee      	b.n	80095a6 <_calloc_r+0x2c>
 80095c8:	4603      	mov	r3, r0
 80095ca:	e7ec      	b.n	80095a6 <_calloc_r+0x2c>
 80095cc:	2100      	movs	r1, #0
 80095ce:	f7fc f8ac 	bl	800572a <memset>
 80095d2:	e7ec      	b.n	80095ae <_calloc_r+0x34>

080095d4 <_malloc_trim_r>:
 80095d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095d8:	4f25      	ldr	r7, [pc, #148]	; (8009670 <_malloc_trim_r+0x9c>)
 80095da:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 800967c <_malloc_trim_r+0xa8>
 80095de:	4689      	mov	r9, r1
 80095e0:	4606      	mov	r6, r0
 80095e2:	f7ff fb3b 	bl	8008c5c <__malloc_lock>
 80095e6:	68bb      	ldr	r3, [r7, #8]
 80095e8:	685d      	ldr	r5, [r3, #4]
 80095ea:	f1a8 0411 	sub.w	r4, r8, #17
 80095ee:	f025 0503 	bic.w	r5, r5, #3
 80095f2:	eba4 0409 	sub.w	r4, r4, r9
 80095f6:	442c      	add	r4, r5
 80095f8:	fbb4 f4f8 	udiv	r4, r4, r8
 80095fc:	3c01      	subs	r4, #1
 80095fe:	fb08 f404 	mul.w	r4, r8, r4
 8009602:	4544      	cmp	r4, r8
 8009604:	da05      	bge.n	8009612 <_malloc_trim_r+0x3e>
 8009606:	4630      	mov	r0, r6
 8009608:	f7ff fb2e 	bl	8008c68 <__malloc_unlock>
 800960c:	2000      	movs	r0, #0
 800960e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009612:	2100      	movs	r1, #0
 8009614:	4630      	mov	r0, r6
 8009616:	f7ff ff19 	bl	800944c <_sbrk_r>
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	442b      	add	r3, r5
 800961e:	4298      	cmp	r0, r3
 8009620:	d1f1      	bne.n	8009606 <_malloc_trim_r+0x32>
 8009622:	4261      	negs	r1, r4
 8009624:	4630      	mov	r0, r6
 8009626:	f7ff ff11 	bl	800944c <_sbrk_r>
 800962a:	3001      	adds	r0, #1
 800962c:	d110      	bne.n	8009650 <_malloc_trim_r+0x7c>
 800962e:	2100      	movs	r1, #0
 8009630:	4630      	mov	r0, r6
 8009632:	f7ff ff0b 	bl	800944c <_sbrk_r>
 8009636:	68ba      	ldr	r2, [r7, #8]
 8009638:	1a83      	subs	r3, r0, r2
 800963a:	2b0f      	cmp	r3, #15
 800963c:	dde3      	ble.n	8009606 <_malloc_trim_r+0x32>
 800963e:	490d      	ldr	r1, [pc, #52]	; (8009674 <_malloc_trim_r+0xa0>)
 8009640:	6809      	ldr	r1, [r1, #0]
 8009642:	1a40      	subs	r0, r0, r1
 8009644:	490c      	ldr	r1, [pc, #48]	; (8009678 <_malloc_trim_r+0xa4>)
 8009646:	f043 0301 	orr.w	r3, r3, #1
 800964a:	6008      	str	r0, [r1, #0]
 800964c:	6053      	str	r3, [r2, #4]
 800964e:	e7da      	b.n	8009606 <_malloc_trim_r+0x32>
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	4a09      	ldr	r2, [pc, #36]	; (8009678 <_malloc_trim_r+0xa4>)
 8009654:	1b2d      	subs	r5, r5, r4
 8009656:	f045 0501 	orr.w	r5, r5, #1
 800965a:	605d      	str	r5, [r3, #4]
 800965c:	6813      	ldr	r3, [r2, #0]
 800965e:	4630      	mov	r0, r6
 8009660:	1b1c      	subs	r4, r3, r4
 8009662:	6014      	str	r4, [r2, #0]
 8009664:	f7ff fb00 	bl	8008c68 <__malloc_unlock>
 8009668:	2001      	movs	r0, #1
 800966a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800966e:	bf00      	nop
 8009670:	20000270 	.word	0x20000270
 8009674:	20000678 	.word	0x20000678
 8009678:	200007d8 	.word	0x200007d8
 800967c:	00000080 	.word	0x00000080

08009680 <_free_r>:
 8009680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009684:	4604      	mov	r4, r0
 8009686:	4688      	mov	r8, r1
 8009688:	2900      	cmp	r1, #0
 800968a:	f000 80ab 	beq.w	80097e4 <_free_r+0x164>
 800968e:	f7ff fae5 	bl	8008c5c <__malloc_lock>
 8009692:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8009696:	4d54      	ldr	r5, [pc, #336]	; (80097e8 <_free_r+0x168>)
 8009698:	f022 0001 	bic.w	r0, r2, #1
 800969c:	f1a8 0308 	sub.w	r3, r8, #8
 80096a0:	181f      	adds	r7, r3, r0
 80096a2:	68a9      	ldr	r1, [r5, #8]
 80096a4:	687e      	ldr	r6, [r7, #4]
 80096a6:	428f      	cmp	r7, r1
 80096a8:	f026 0603 	bic.w	r6, r6, #3
 80096ac:	f002 0201 	and.w	r2, r2, #1
 80096b0:	d11b      	bne.n	80096ea <_free_r+0x6a>
 80096b2:	4430      	add	r0, r6
 80096b4:	b93a      	cbnz	r2, 80096c6 <_free_r+0x46>
 80096b6:	f858 2c08 	ldr.w	r2, [r8, #-8]
 80096ba:	1a9b      	subs	r3, r3, r2
 80096bc:	4410      	add	r0, r2
 80096be:	6899      	ldr	r1, [r3, #8]
 80096c0:	68da      	ldr	r2, [r3, #12]
 80096c2:	60ca      	str	r2, [r1, #12]
 80096c4:	6091      	str	r1, [r2, #8]
 80096c6:	f040 0201 	orr.w	r2, r0, #1
 80096ca:	605a      	str	r2, [r3, #4]
 80096cc:	60ab      	str	r3, [r5, #8]
 80096ce:	4b47      	ldr	r3, [pc, #284]	; (80097ec <_free_r+0x16c>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	4298      	cmp	r0, r3
 80096d4:	d304      	bcc.n	80096e0 <_free_r+0x60>
 80096d6:	4b46      	ldr	r3, [pc, #280]	; (80097f0 <_free_r+0x170>)
 80096d8:	4620      	mov	r0, r4
 80096da:	6819      	ldr	r1, [r3, #0]
 80096dc:	f7ff ff7a 	bl	80095d4 <_malloc_trim_r>
 80096e0:	4620      	mov	r0, r4
 80096e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80096e6:	f7ff babf 	b.w	8008c68 <__malloc_unlock>
 80096ea:	607e      	str	r6, [r7, #4]
 80096ec:	2a00      	cmp	r2, #0
 80096ee:	d139      	bne.n	8009764 <_free_r+0xe4>
 80096f0:	f858 1c08 	ldr.w	r1, [r8, #-8]
 80096f4:	1a5b      	subs	r3, r3, r1
 80096f6:	4408      	add	r0, r1
 80096f8:	6899      	ldr	r1, [r3, #8]
 80096fa:	f105 0e08 	add.w	lr, r5, #8
 80096fe:	4571      	cmp	r1, lr
 8009700:	d032      	beq.n	8009768 <_free_r+0xe8>
 8009702:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8009706:	f8c1 e00c 	str.w	lr, [r1, #12]
 800970a:	f8ce 1008 	str.w	r1, [lr, #8]
 800970e:	19b9      	adds	r1, r7, r6
 8009710:	6849      	ldr	r1, [r1, #4]
 8009712:	07c9      	lsls	r1, r1, #31
 8009714:	d40a      	bmi.n	800972c <_free_r+0xac>
 8009716:	4430      	add	r0, r6
 8009718:	68b9      	ldr	r1, [r7, #8]
 800971a:	bb3a      	cbnz	r2, 800976c <_free_r+0xec>
 800971c:	4e35      	ldr	r6, [pc, #212]	; (80097f4 <_free_r+0x174>)
 800971e:	42b1      	cmp	r1, r6
 8009720:	d124      	bne.n	800976c <_free_r+0xec>
 8009722:	616b      	str	r3, [r5, #20]
 8009724:	612b      	str	r3, [r5, #16]
 8009726:	2201      	movs	r2, #1
 8009728:	60d9      	str	r1, [r3, #12]
 800972a:	6099      	str	r1, [r3, #8]
 800972c:	f040 0101 	orr.w	r1, r0, #1
 8009730:	6059      	str	r1, [r3, #4]
 8009732:	5018      	str	r0, [r3, r0]
 8009734:	2a00      	cmp	r2, #0
 8009736:	d1d3      	bne.n	80096e0 <_free_r+0x60>
 8009738:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800973c:	d21a      	bcs.n	8009774 <_free_r+0xf4>
 800973e:	08c0      	lsrs	r0, r0, #3
 8009740:	1081      	asrs	r1, r0, #2
 8009742:	2201      	movs	r2, #1
 8009744:	408a      	lsls	r2, r1
 8009746:	6869      	ldr	r1, [r5, #4]
 8009748:	3001      	adds	r0, #1
 800974a:	430a      	orrs	r2, r1
 800974c:	606a      	str	r2, [r5, #4]
 800974e:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8009752:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8009756:	6099      	str	r1, [r3, #8]
 8009758:	3a08      	subs	r2, #8
 800975a:	60da      	str	r2, [r3, #12]
 800975c:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8009760:	60cb      	str	r3, [r1, #12]
 8009762:	e7bd      	b.n	80096e0 <_free_r+0x60>
 8009764:	2200      	movs	r2, #0
 8009766:	e7d2      	b.n	800970e <_free_r+0x8e>
 8009768:	2201      	movs	r2, #1
 800976a:	e7d0      	b.n	800970e <_free_r+0x8e>
 800976c:	68fe      	ldr	r6, [r7, #12]
 800976e:	60ce      	str	r6, [r1, #12]
 8009770:	60b1      	str	r1, [r6, #8]
 8009772:	e7db      	b.n	800972c <_free_r+0xac>
 8009774:	0a42      	lsrs	r2, r0, #9
 8009776:	2a04      	cmp	r2, #4
 8009778:	d813      	bhi.n	80097a2 <_free_r+0x122>
 800977a:	0982      	lsrs	r2, r0, #6
 800977c:	3238      	adds	r2, #56	; 0x38
 800977e:	1c51      	adds	r1, r2, #1
 8009780:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8009784:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8009788:	428e      	cmp	r6, r1
 800978a:	d124      	bne.n	80097d6 <_free_r+0x156>
 800978c:	2001      	movs	r0, #1
 800978e:	1092      	asrs	r2, r2, #2
 8009790:	fa00 f202 	lsl.w	r2, r0, r2
 8009794:	6868      	ldr	r0, [r5, #4]
 8009796:	4302      	orrs	r2, r0
 8009798:	606a      	str	r2, [r5, #4]
 800979a:	60de      	str	r6, [r3, #12]
 800979c:	6099      	str	r1, [r3, #8]
 800979e:	60b3      	str	r3, [r6, #8]
 80097a0:	e7de      	b.n	8009760 <_free_r+0xe0>
 80097a2:	2a14      	cmp	r2, #20
 80097a4:	d801      	bhi.n	80097aa <_free_r+0x12a>
 80097a6:	325b      	adds	r2, #91	; 0x5b
 80097a8:	e7e9      	b.n	800977e <_free_r+0xfe>
 80097aa:	2a54      	cmp	r2, #84	; 0x54
 80097ac:	d802      	bhi.n	80097b4 <_free_r+0x134>
 80097ae:	0b02      	lsrs	r2, r0, #12
 80097b0:	326e      	adds	r2, #110	; 0x6e
 80097b2:	e7e4      	b.n	800977e <_free_r+0xfe>
 80097b4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80097b8:	d802      	bhi.n	80097c0 <_free_r+0x140>
 80097ba:	0bc2      	lsrs	r2, r0, #15
 80097bc:	3277      	adds	r2, #119	; 0x77
 80097be:	e7de      	b.n	800977e <_free_r+0xfe>
 80097c0:	f240 5154 	movw	r1, #1364	; 0x554
 80097c4:	428a      	cmp	r2, r1
 80097c6:	bf9a      	itte	ls
 80097c8:	0c82      	lsrls	r2, r0, #18
 80097ca:	327c      	addls	r2, #124	; 0x7c
 80097cc:	227e      	movhi	r2, #126	; 0x7e
 80097ce:	e7d6      	b.n	800977e <_free_r+0xfe>
 80097d0:	6889      	ldr	r1, [r1, #8]
 80097d2:	428e      	cmp	r6, r1
 80097d4:	d004      	beq.n	80097e0 <_free_r+0x160>
 80097d6:	684a      	ldr	r2, [r1, #4]
 80097d8:	f022 0203 	bic.w	r2, r2, #3
 80097dc:	4290      	cmp	r0, r2
 80097de:	d3f7      	bcc.n	80097d0 <_free_r+0x150>
 80097e0:	68ce      	ldr	r6, [r1, #12]
 80097e2:	e7da      	b.n	800979a <_free_r+0x11a>
 80097e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097e8:	20000270 	.word	0x20000270
 80097ec:	2000067c 	.word	0x2000067c
 80097f0:	20000808 	.word	0x20000808
 80097f4:	20000278 	.word	0x20000278

080097f8 <__retarget_lock_acquire_recursive>:
 80097f8:	4770      	bx	lr

080097fa <__retarget_lock_release_recursive>:
 80097fa:	4770      	bx	lr

080097fc <memmove>:
 80097fc:	4288      	cmp	r0, r1
 80097fe:	b510      	push	{r4, lr}
 8009800:	eb01 0302 	add.w	r3, r1, r2
 8009804:	d803      	bhi.n	800980e <memmove+0x12>
 8009806:	1e42      	subs	r2, r0, #1
 8009808:	4299      	cmp	r1, r3
 800980a:	d10c      	bne.n	8009826 <memmove+0x2a>
 800980c:	bd10      	pop	{r4, pc}
 800980e:	4298      	cmp	r0, r3
 8009810:	d2f9      	bcs.n	8009806 <memmove+0xa>
 8009812:	1881      	adds	r1, r0, r2
 8009814:	1ad2      	subs	r2, r2, r3
 8009816:	42d3      	cmn	r3, r2
 8009818:	d100      	bne.n	800981c <memmove+0x20>
 800981a:	bd10      	pop	{r4, pc}
 800981c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009820:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009824:	e7f7      	b.n	8009816 <memmove+0x1a>
 8009826:	f811 4b01 	ldrb.w	r4, [r1], #1
 800982a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800982e:	e7eb      	b.n	8009808 <memmove+0xc>

08009830 <_realloc_r>:
 8009830:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009834:	4682      	mov	sl, r0
 8009836:	460c      	mov	r4, r1
 8009838:	b929      	cbnz	r1, 8009846 <_realloc_r+0x16>
 800983a:	4611      	mov	r1, r2
 800983c:	b003      	add	sp, #12
 800983e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009842:	f7fe bfeb 	b.w	800881c <_malloc_r>
 8009846:	9201      	str	r2, [sp, #4]
 8009848:	f7ff fa08 	bl	8008c5c <__malloc_lock>
 800984c:	9a01      	ldr	r2, [sp, #4]
 800984e:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8009852:	f102 080b 	add.w	r8, r2, #11
 8009856:	f1b8 0f16 	cmp.w	r8, #22
 800985a:	f1a4 0908 	sub.w	r9, r4, #8
 800985e:	f025 0603 	bic.w	r6, r5, #3
 8009862:	d90a      	bls.n	800987a <_realloc_r+0x4a>
 8009864:	f038 0807 	bics.w	r8, r8, #7
 8009868:	d509      	bpl.n	800987e <_realloc_r+0x4e>
 800986a:	230c      	movs	r3, #12
 800986c:	f8ca 3000 	str.w	r3, [sl]
 8009870:	2700      	movs	r7, #0
 8009872:	4638      	mov	r0, r7
 8009874:	b003      	add	sp, #12
 8009876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800987a:	f04f 0810 	mov.w	r8, #16
 800987e:	4590      	cmp	r8, r2
 8009880:	d3f3      	bcc.n	800986a <_realloc_r+0x3a>
 8009882:	45b0      	cmp	r8, r6
 8009884:	f340 8145 	ble.w	8009b12 <_realloc_r+0x2e2>
 8009888:	4ba8      	ldr	r3, [pc, #672]	; (8009b2c <_realloc_r+0x2fc>)
 800988a:	f8d3 e008 	ldr.w	lr, [r3, #8]
 800988e:	eb09 0106 	add.w	r1, r9, r6
 8009892:	4571      	cmp	r1, lr
 8009894:	469b      	mov	fp, r3
 8009896:	684b      	ldr	r3, [r1, #4]
 8009898:	d005      	beq.n	80098a6 <_realloc_r+0x76>
 800989a:	f023 0001 	bic.w	r0, r3, #1
 800989e:	4408      	add	r0, r1
 80098a0:	6840      	ldr	r0, [r0, #4]
 80098a2:	07c7      	lsls	r7, r0, #31
 80098a4:	d447      	bmi.n	8009936 <_realloc_r+0x106>
 80098a6:	f023 0303 	bic.w	r3, r3, #3
 80098aa:	4571      	cmp	r1, lr
 80098ac:	eb06 0703 	add.w	r7, r6, r3
 80098b0:	d119      	bne.n	80098e6 <_realloc_r+0xb6>
 80098b2:	f108 0010 	add.w	r0, r8, #16
 80098b6:	4287      	cmp	r7, r0
 80098b8:	db3f      	blt.n	800993a <_realloc_r+0x10a>
 80098ba:	eb09 0308 	add.w	r3, r9, r8
 80098be:	eba7 0708 	sub.w	r7, r7, r8
 80098c2:	f047 0701 	orr.w	r7, r7, #1
 80098c6:	f8cb 3008 	str.w	r3, [fp, #8]
 80098ca:	605f      	str	r7, [r3, #4]
 80098cc:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80098d0:	f003 0301 	and.w	r3, r3, #1
 80098d4:	ea43 0308 	orr.w	r3, r3, r8
 80098d8:	f844 3c04 	str.w	r3, [r4, #-4]
 80098dc:	4650      	mov	r0, sl
 80098de:	f7ff f9c3 	bl	8008c68 <__malloc_unlock>
 80098e2:	4627      	mov	r7, r4
 80098e4:	e7c5      	b.n	8009872 <_realloc_r+0x42>
 80098e6:	45b8      	cmp	r8, r7
 80098e8:	dc27      	bgt.n	800993a <_realloc_r+0x10a>
 80098ea:	68cb      	ldr	r3, [r1, #12]
 80098ec:	688a      	ldr	r2, [r1, #8]
 80098ee:	60d3      	str	r3, [r2, #12]
 80098f0:	609a      	str	r2, [r3, #8]
 80098f2:	eba7 0008 	sub.w	r0, r7, r8
 80098f6:	280f      	cmp	r0, #15
 80098f8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80098fc:	eb09 0207 	add.w	r2, r9, r7
 8009900:	f240 8109 	bls.w	8009b16 <_realloc_r+0x2e6>
 8009904:	eb09 0108 	add.w	r1, r9, r8
 8009908:	f003 0301 	and.w	r3, r3, #1
 800990c:	ea43 0308 	orr.w	r3, r3, r8
 8009910:	f040 0001 	orr.w	r0, r0, #1
 8009914:	f8c9 3004 	str.w	r3, [r9, #4]
 8009918:	6048      	str	r0, [r1, #4]
 800991a:	6853      	ldr	r3, [r2, #4]
 800991c:	f043 0301 	orr.w	r3, r3, #1
 8009920:	6053      	str	r3, [r2, #4]
 8009922:	3108      	adds	r1, #8
 8009924:	4650      	mov	r0, sl
 8009926:	f7ff feab 	bl	8009680 <_free_r>
 800992a:	4650      	mov	r0, sl
 800992c:	f7ff f99c 	bl	8008c68 <__malloc_unlock>
 8009930:	f109 0708 	add.w	r7, r9, #8
 8009934:	e79d      	b.n	8009872 <_realloc_r+0x42>
 8009936:	2300      	movs	r3, #0
 8009938:	4619      	mov	r1, r3
 800993a:	07e8      	lsls	r0, r5, #31
 800993c:	f100 8084 	bmi.w	8009a48 <_realloc_r+0x218>
 8009940:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8009944:	eba9 0505 	sub.w	r5, r9, r5
 8009948:	6868      	ldr	r0, [r5, #4]
 800994a:	f020 0003 	bic.w	r0, r0, #3
 800994e:	4430      	add	r0, r6
 8009950:	2900      	cmp	r1, #0
 8009952:	d076      	beq.n	8009a42 <_realloc_r+0x212>
 8009954:	4571      	cmp	r1, lr
 8009956:	d150      	bne.n	80099fa <_realloc_r+0x1ca>
 8009958:	4403      	add	r3, r0
 800995a:	f108 0110 	add.w	r1, r8, #16
 800995e:	428b      	cmp	r3, r1
 8009960:	db6f      	blt.n	8009a42 <_realloc_r+0x212>
 8009962:	462f      	mov	r7, r5
 8009964:	68ea      	ldr	r2, [r5, #12]
 8009966:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800996a:	60ca      	str	r2, [r1, #12]
 800996c:	6091      	str	r1, [r2, #8]
 800996e:	1f32      	subs	r2, r6, #4
 8009970:	2a24      	cmp	r2, #36	; 0x24
 8009972:	d83b      	bhi.n	80099ec <_realloc_r+0x1bc>
 8009974:	2a13      	cmp	r2, #19
 8009976:	d936      	bls.n	80099e6 <_realloc_r+0x1b6>
 8009978:	6821      	ldr	r1, [r4, #0]
 800997a:	60a9      	str	r1, [r5, #8]
 800997c:	6861      	ldr	r1, [r4, #4]
 800997e:	60e9      	str	r1, [r5, #12]
 8009980:	2a1b      	cmp	r2, #27
 8009982:	d81c      	bhi.n	80099be <_realloc_r+0x18e>
 8009984:	f105 0210 	add.w	r2, r5, #16
 8009988:	f104 0108 	add.w	r1, r4, #8
 800998c:	6808      	ldr	r0, [r1, #0]
 800998e:	6010      	str	r0, [r2, #0]
 8009990:	6848      	ldr	r0, [r1, #4]
 8009992:	6050      	str	r0, [r2, #4]
 8009994:	6889      	ldr	r1, [r1, #8]
 8009996:	6091      	str	r1, [r2, #8]
 8009998:	eb05 0208 	add.w	r2, r5, r8
 800999c:	eba3 0308 	sub.w	r3, r3, r8
 80099a0:	f043 0301 	orr.w	r3, r3, #1
 80099a4:	f8cb 2008 	str.w	r2, [fp, #8]
 80099a8:	6053      	str	r3, [r2, #4]
 80099aa:	686b      	ldr	r3, [r5, #4]
 80099ac:	f003 0301 	and.w	r3, r3, #1
 80099b0:	ea43 0308 	orr.w	r3, r3, r8
 80099b4:	606b      	str	r3, [r5, #4]
 80099b6:	4650      	mov	r0, sl
 80099b8:	f7ff f956 	bl	8008c68 <__malloc_unlock>
 80099bc:	e759      	b.n	8009872 <_realloc_r+0x42>
 80099be:	68a1      	ldr	r1, [r4, #8]
 80099c0:	6129      	str	r1, [r5, #16]
 80099c2:	68e1      	ldr	r1, [r4, #12]
 80099c4:	6169      	str	r1, [r5, #20]
 80099c6:	2a24      	cmp	r2, #36	; 0x24
 80099c8:	bf01      	itttt	eq
 80099ca:	6922      	ldreq	r2, [r4, #16]
 80099cc:	61aa      	streq	r2, [r5, #24]
 80099ce:	6960      	ldreq	r0, [r4, #20]
 80099d0:	61e8      	streq	r0, [r5, #28]
 80099d2:	bf19      	ittee	ne
 80099d4:	f105 0218 	addne.w	r2, r5, #24
 80099d8:	f104 0110 	addne.w	r1, r4, #16
 80099dc:	f105 0220 	addeq.w	r2, r5, #32
 80099e0:	f104 0118 	addeq.w	r1, r4, #24
 80099e4:	e7d2      	b.n	800998c <_realloc_r+0x15c>
 80099e6:	463a      	mov	r2, r7
 80099e8:	4621      	mov	r1, r4
 80099ea:	e7cf      	b.n	800998c <_realloc_r+0x15c>
 80099ec:	4621      	mov	r1, r4
 80099ee:	4638      	mov	r0, r7
 80099f0:	9301      	str	r3, [sp, #4]
 80099f2:	f7ff ff03 	bl	80097fc <memmove>
 80099f6:	9b01      	ldr	r3, [sp, #4]
 80099f8:	e7ce      	b.n	8009998 <_realloc_r+0x168>
 80099fa:	18c7      	adds	r7, r0, r3
 80099fc:	45b8      	cmp	r8, r7
 80099fe:	dc20      	bgt.n	8009a42 <_realloc_r+0x212>
 8009a00:	68cb      	ldr	r3, [r1, #12]
 8009a02:	688a      	ldr	r2, [r1, #8]
 8009a04:	60d3      	str	r3, [r2, #12]
 8009a06:	609a      	str	r2, [r3, #8]
 8009a08:	4628      	mov	r0, r5
 8009a0a:	68eb      	ldr	r3, [r5, #12]
 8009a0c:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8009a10:	60d3      	str	r3, [r2, #12]
 8009a12:	609a      	str	r2, [r3, #8]
 8009a14:	1f32      	subs	r2, r6, #4
 8009a16:	2a24      	cmp	r2, #36	; 0x24
 8009a18:	d842      	bhi.n	8009aa0 <_realloc_r+0x270>
 8009a1a:	2a13      	cmp	r2, #19
 8009a1c:	d93e      	bls.n	8009a9c <_realloc_r+0x26c>
 8009a1e:	6823      	ldr	r3, [r4, #0]
 8009a20:	60ab      	str	r3, [r5, #8]
 8009a22:	6863      	ldr	r3, [r4, #4]
 8009a24:	60eb      	str	r3, [r5, #12]
 8009a26:	2a1b      	cmp	r2, #27
 8009a28:	d824      	bhi.n	8009a74 <_realloc_r+0x244>
 8009a2a:	f105 0010 	add.w	r0, r5, #16
 8009a2e:	f104 0308 	add.w	r3, r4, #8
 8009a32:	681a      	ldr	r2, [r3, #0]
 8009a34:	6002      	str	r2, [r0, #0]
 8009a36:	685a      	ldr	r2, [r3, #4]
 8009a38:	6042      	str	r2, [r0, #4]
 8009a3a:	689b      	ldr	r3, [r3, #8]
 8009a3c:	6083      	str	r3, [r0, #8]
 8009a3e:	46a9      	mov	r9, r5
 8009a40:	e757      	b.n	80098f2 <_realloc_r+0xc2>
 8009a42:	4580      	cmp	r8, r0
 8009a44:	4607      	mov	r7, r0
 8009a46:	dddf      	ble.n	8009a08 <_realloc_r+0x1d8>
 8009a48:	4611      	mov	r1, r2
 8009a4a:	4650      	mov	r0, sl
 8009a4c:	f7fe fee6 	bl	800881c <_malloc_r>
 8009a50:	4607      	mov	r7, r0
 8009a52:	2800      	cmp	r0, #0
 8009a54:	d0af      	beq.n	80099b6 <_realloc_r+0x186>
 8009a56:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8009a5a:	f023 0301 	bic.w	r3, r3, #1
 8009a5e:	f1a0 0208 	sub.w	r2, r0, #8
 8009a62:	444b      	add	r3, r9
 8009a64:	429a      	cmp	r2, r3
 8009a66:	d11f      	bne.n	8009aa8 <_realloc_r+0x278>
 8009a68:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8009a6c:	f027 0703 	bic.w	r7, r7, #3
 8009a70:	4437      	add	r7, r6
 8009a72:	e73e      	b.n	80098f2 <_realloc_r+0xc2>
 8009a74:	68a3      	ldr	r3, [r4, #8]
 8009a76:	612b      	str	r3, [r5, #16]
 8009a78:	68e3      	ldr	r3, [r4, #12]
 8009a7a:	616b      	str	r3, [r5, #20]
 8009a7c:	2a24      	cmp	r2, #36	; 0x24
 8009a7e:	bf01      	itttt	eq
 8009a80:	6923      	ldreq	r3, [r4, #16]
 8009a82:	61ab      	streq	r3, [r5, #24]
 8009a84:	6962      	ldreq	r2, [r4, #20]
 8009a86:	61ea      	streq	r2, [r5, #28]
 8009a88:	bf19      	ittee	ne
 8009a8a:	f105 0018 	addne.w	r0, r5, #24
 8009a8e:	f104 0310 	addne.w	r3, r4, #16
 8009a92:	f105 0020 	addeq.w	r0, r5, #32
 8009a96:	f104 0318 	addeq.w	r3, r4, #24
 8009a9a:	e7ca      	b.n	8009a32 <_realloc_r+0x202>
 8009a9c:	4623      	mov	r3, r4
 8009a9e:	e7c8      	b.n	8009a32 <_realloc_r+0x202>
 8009aa0:	4621      	mov	r1, r4
 8009aa2:	f7ff feab 	bl	80097fc <memmove>
 8009aa6:	e7ca      	b.n	8009a3e <_realloc_r+0x20e>
 8009aa8:	1f32      	subs	r2, r6, #4
 8009aaa:	2a24      	cmp	r2, #36	; 0x24
 8009aac:	d82d      	bhi.n	8009b0a <_realloc_r+0x2da>
 8009aae:	2a13      	cmp	r2, #19
 8009ab0:	d928      	bls.n	8009b04 <_realloc_r+0x2d4>
 8009ab2:	6823      	ldr	r3, [r4, #0]
 8009ab4:	6003      	str	r3, [r0, #0]
 8009ab6:	6863      	ldr	r3, [r4, #4]
 8009ab8:	6043      	str	r3, [r0, #4]
 8009aba:	2a1b      	cmp	r2, #27
 8009abc:	d80e      	bhi.n	8009adc <_realloc_r+0x2ac>
 8009abe:	f100 0308 	add.w	r3, r0, #8
 8009ac2:	f104 0208 	add.w	r2, r4, #8
 8009ac6:	6811      	ldr	r1, [r2, #0]
 8009ac8:	6019      	str	r1, [r3, #0]
 8009aca:	6851      	ldr	r1, [r2, #4]
 8009acc:	6059      	str	r1, [r3, #4]
 8009ace:	6892      	ldr	r2, [r2, #8]
 8009ad0:	609a      	str	r2, [r3, #8]
 8009ad2:	4621      	mov	r1, r4
 8009ad4:	4650      	mov	r0, sl
 8009ad6:	f7ff fdd3 	bl	8009680 <_free_r>
 8009ada:	e76c      	b.n	80099b6 <_realloc_r+0x186>
 8009adc:	68a3      	ldr	r3, [r4, #8]
 8009ade:	6083      	str	r3, [r0, #8]
 8009ae0:	68e3      	ldr	r3, [r4, #12]
 8009ae2:	60c3      	str	r3, [r0, #12]
 8009ae4:	2a24      	cmp	r2, #36	; 0x24
 8009ae6:	bf01      	itttt	eq
 8009ae8:	6923      	ldreq	r3, [r4, #16]
 8009aea:	6103      	streq	r3, [r0, #16]
 8009aec:	6961      	ldreq	r1, [r4, #20]
 8009aee:	6141      	streq	r1, [r0, #20]
 8009af0:	bf19      	ittee	ne
 8009af2:	f100 0310 	addne.w	r3, r0, #16
 8009af6:	f104 0210 	addne.w	r2, r4, #16
 8009afa:	f100 0318 	addeq.w	r3, r0, #24
 8009afe:	f104 0218 	addeq.w	r2, r4, #24
 8009b02:	e7e0      	b.n	8009ac6 <_realloc_r+0x296>
 8009b04:	4603      	mov	r3, r0
 8009b06:	4622      	mov	r2, r4
 8009b08:	e7dd      	b.n	8009ac6 <_realloc_r+0x296>
 8009b0a:	4621      	mov	r1, r4
 8009b0c:	f7ff fe76 	bl	80097fc <memmove>
 8009b10:	e7df      	b.n	8009ad2 <_realloc_r+0x2a2>
 8009b12:	4637      	mov	r7, r6
 8009b14:	e6ed      	b.n	80098f2 <_realloc_r+0xc2>
 8009b16:	f003 0301 	and.w	r3, r3, #1
 8009b1a:	431f      	orrs	r7, r3
 8009b1c:	f8c9 7004 	str.w	r7, [r9, #4]
 8009b20:	6853      	ldr	r3, [r2, #4]
 8009b22:	f043 0301 	orr.w	r3, r3, #1
 8009b26:	6053      	str	r3, [r2, #4]
 8009b28:	e6ff      	b.n	800992a <_realloc_r+0xfa>
 8009b2a:	bf00      	nop
 8009b2c:	20000270 	.word	0x20000270

08009b30 <_init>:
 8009b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b32:	bf00      	nop
 8009b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b36:	bc08      	pop	{r3}
 8009b38:	469e      	mov	lr, r3
 8009b3a:	4770      	bx	lr

08009b3c <_fini>:
 8009b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b3e:	bf00      	nop
 8009b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b42:	bc08      	pop	{r3}
 8009b44:	469e      	mov	lr, r3
 8009b46:	4770      	bx	lr
